http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Assembly_language.html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Assembly_language by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:56:46 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Assembly language - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf18" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Assembly_language" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="Assembly_language.html" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.rtlcite%2Cwikihiero%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Assembly_language","wgTitle":"Assembly language","wgCurRevisionId":599041479,"wgRevisionId":599041479,"wgArticleId":1368,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using web citations with no URL","All articles with unsourced statements","Articles with unsourced statements from November 2011","Articles with unsourced statements from January 2009","Articles with unsourced statements from February 2007","Articles with unsourced statements from January 2011","Articles with unsourced statements from March 2012","Articles with unsourced statements from March 2011","Assembly languages","Assemblers","Programming language implementation"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Assembly_language","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf18/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["nl-nl","nl","en-us","en"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q165436"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-enable-mwmath":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":
false,"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:0378eace27e3aee431624f77f4809281 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-asm {line-height: normal;}
.source-asm li, .source-asm pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for asm
 * CSS class: source-asm, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.asm.source-asm .de1, .asm.source-asm .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.asm.source-asm  {font-family:monospace;}
.asm.source-asm .imp {font-weight: bold; color: red;}
.asm.source-asm li, .asm.source-asm .li1 {font-weight: normal; vertical-align:top;}
.asm.source-asm .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.asm.source-asm .li2 {font-weight: bold; vertical-align:top;}
.asm.source-asm .kw1 {color: #00007f; font-weight: bold;}
.asm.source-asm .kw2 {color: #0000ff;}
.asm.source-asm .kw3 {color: #b00040;}
.asm.source-asm .kw4 {color: #46aa03; font-weight: bold;}
.asm.source-asm .kw5 {color: #0000ff; font-weight: bold;}
.asm.source-asm .kw6 {color: #0000ff; font-weight: bold;}
.asm.source-asm .co1 {color: #666666; font-style: italic;}
.asm.source-asm .co2 {color: #adadad; font-style: italic;}
.asm.source-asm .es0 {color: #000099; font-weight: bold;}
.asm.source-asm .br0 {color: #009900; font-weight: bold;}
.asm.source-asm .sy1 {color: #339933;}
.asm.source-asm .sy2 {color: #0000ff; font-weight: bold;}
.asm.source-asm .st0 {color: #7f007f;}
.asm.source-asm .nu0 {color: #ff0000;}
.asm.source-asm .ln-xtra, .asm.source-asm li.ln-xtra, .asm.source-asm div.ln-xtra {background-color: #ffc;}
.asm.source-asm span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf18/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Assembly_language skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Assembly language</span></h1>
			<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><dl>
<dd><i>See the <a href="#Related_terminology">terminology</a> section below for information regarding inconsistent use of the terms assembly and assembler.</i></dd>
</dl>
<div class="thumb tright">
<div class="thumbinner" style="width:222px;"><a href="http://en.wikipedia.org/wiki/File:Motorola_6800_Assembly_Language.png" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Motorola_6800_Assembly_Language.png/220px-Motorola_6800_Assembly_Language.png" width="220" height="350" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Motorola_6800_Assembly_Language.png/330px-Motorola_6800_Assembly_Language.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Motorola_6800_Assembly_Language.png/440px-Motorola_6800_Assembly_Language.png 2x" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="http://en.wikipedia.org/wiki/File:Motorola_6800_Assembly_Language.png" class="internal" title="Enlarge"><img src="http://bits.wikimedia.org/static-1.23wmf18/skins/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Motorola MC6800 Assembly Language</div>
</div>
</div>
<p>An <b>assembly language</b> is a <a href="http://en.wikipedia.org/wiki/Low-level_programming_language" title="Low-level programming language">low-level programming language</a> for a <a href="Computer.html" title="Computer">computer</a>, or other programmable device, in which there is a very strong (generally <a href="http://en.wikipedia.org/wiki/One-to-one_correspondence" title="One-to-one correspondence" class="mw-redirect">one-to-one</a>) correspondence between the language and the <a href="Computer_architecture.html" title="Computer architecture">architecture's</a> <a href="http://en.wikipedia.org/wiki/Machine_code" title="Machine code">machine code</a> <a href="http://en.wikipedia.org/wiki/Instruction_(computer_science)" title="Instruction (computer science)" class="mw-redirect">instructions</a>. Each assembly language is specific to a particular computer architecture, in contrast to most <a href="High-level_programming_language.html" title="High-level programming language">high-level programming languages</a>, which are generally <a href="Porting.html" title="Porting">portable</a> across multiple architectures, but require <a href="Interpreter_(computing).html" title="Interpreter (computing)">interpreting</a> or <a href="Compiler.html" title="Compiler">compiling</a>.</p>
<p>Assembly language is converted into executable machine code by a <a href="http://en.wikipedia.org/wiki/Utility_program" title="Utility program" class="mw-redirect">utility program</a> referred to as an <i><a href="#Assembler">assembler</a></i>; the conversion process is referred to as <i>assembly</i>, or <i>assembling</i> the code.</p>
<p>Assembly language uses a <a href="http://en.wikipedia.org/wiki/Mnemonic" title="Mnemonic">mnemonic</a> to represent each low-level machine operation or <a href="http://en.wikipedia.org/wiki/Opcode" title="Opcode">opcode</a>. Some opcodes require one or more <a href="http://en.wikipedia.org/wiki/Operand#Computer_science" title="Operand">operands</a> as part of the instruction, and most assemblers can take labels and symbols as operands to represent addresses and constants, instead of <a href="http://en.wikipedia.org/wiki/Hard_coding" title="Hard coding">hard coding</a> them into the program. <b>Macro assemblers</b> include a <a href="http://en.wikipedia.org/wiki/Macro_(computer_science)" title="Macro (computer science)">macroinstruction</a> facility so that assembly language text can be pre-assigned to a name, and that name can be used to insert the text into other code. Many assemblers offer additional mechanisms to facilitate program development, to control the assembly process, and to aid <a href="http://en.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a>.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Key_concepts"><span class="tocnumber">1</span> <span class="toctext">Key concepts</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Assembler"><span class="tocnumber">1.1</span> <span class="toctext">Assembler</span></a>
<ul>
<li class="toclevel-3 tocsection-3"><a href="#Number_of_passes"><span class="tocnumber">1.1.1</span> <span class="toctext">Number of passes</span></a></li>
<li class="toclevel-3 tocsection-4"><a href="#High-level_assemblers"><span class="tocnumber">1.1.2</span> <span class="toctext">High-level assemblers</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-5"><a href="#Assembly_language"><span class="tocnumber">1.2</span> <span class="toctext">Assembly language</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#Language_design"><span class="tocnumber">2</span> <span class="toctext">Language design</span></a>
<ul>
<li class="toclevel-2 tocsection-7"><a href="#Basic_elements"><span class="tocnumber">2.1</span> <span class="toctext">Basic elements</span></a>
<ul>
<li class="toclevel-3 tocsection-8"><a href="#Opcode_mnemonics_and_extended_mnemonics"><span class="tocnumber">2.1.1</span> <span class="toctext">Opcode mnemonics and extended mnemonics</span></a></li>
<li class="toclevel-3 tocsection-9"><a href="#Data_directives"><span class="tocnumber">2.1.2</span> <span class="toctext">Data directives</span></a></li>
<li class="toclevel-3 tocsection-10"><a href="#Assembly_directives"><span class="tocnumber">2.1.3</span> <span class="toctext">Assembly directives</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-11"><a href="#Macros"><span class="tocnumber">2.2</span> <span class="toctext">Macros</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Support_for_structured_programming"><span class="tocnumber">2.3</span> <span class="toctext">Support for structured programming</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="#Use_of_assembly_language"><span class="tocnumber">3</span> <span class="toctext">Use of assembly language</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="#Historical_perspective"><span class="tocnumber">3.1</span> <span class="toctext">Historical perspective</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Current_usage"><span class="tocnumber">3.2</span> <span class="toctext">Current usage</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#Typical_applications"><span class="tocnumber">3.3</span> <span class="toctext">Typical applications</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-17"><a href="#Related_terminology"><span class="tocnumber">4</span> <span class="toctext">Related terminology</span></a></li>
<li class="toclevel-1 tocsection-18"><a href="#List_of_assemblers_for_different_computer_architectures"><span class="tocnumber">5</span> <span class="toctext">List of assemblers for different computer architectures</span></a></li>
<li class="toclevel-1 tocsection-19"><a href="#Further_details"><span class="tocnumber">6</span> <span class="toctext">Further details</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="#Example_listing_of_assembly_language_source_code"><span class="tocnumber">7</span> <span class="toctext">Example listing of assembly language source code</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="#Further_reading"><span class="tocnumber">10</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Key_concepts">Key concepts</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=1" title="Edit section: Key concepts">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Assembler">Assembler</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=2" title="Edit section: Assembler">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>An <b>assembler</b> creates <a href="Object_code.html" title="Object code">object code</a> by translating assembly instruction mnemonics into <a href="http://en.wikipedia.org/wiki/Opcode" title="Opcode">opcodes</a>, and by resolving <a href="http://en.wikipedia.org/wiki/Identifier" title="Identifier">symbolic names</a> for memory locations and other entities.<sup id="cite_ref-Salomon_1-0" class="reference"><a href="#cite_note-Salomon-1"><span>[</span>1<span>]</span></a></sup> The use of symbolic references is a key feature of assemblers, saving tedious calculations and manual address updates after program modifications. Most assemblers also include <a href="http://en.wikipedia.org/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> facilities for performing textual substitution—e.g., to generate common short sequences of instructions as <a href="http://en.wikipedia.org/wiki/Inline_expansion" title="Inline expansion">inline</a>, instead of <i>called</i> <a href="Subroutine.html" title="Subroutine">subroutines</a>.</p>
<p>Assemblers have been available since the 1950s and are far simpler to write than <a href="Compiler.html" title="Compiler">compilers</a> for <a href="http://en.wikipedia.org/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a> as each mnemonic instruction / address mode combination translates directly into a single machine language opcode. Modern assemblers, especially for <a href="http://en.wikipedia.org/wiki/RISC" title="RISC" class="mw-redirect">RISC</a> <a href="http://en.wikipedia.org/wiki/Instruction_set_architecture" title="Instruction set architecture" class="mw-redirect">architectures</a>, such as <a href="http://en.wikipedia.org/wiki/SPARC" title="SPARC">SPARC</a> or <a href="http://en.wikipedia.org/wiki/Power_Architecture" title="Power Architecture">Power Architecture</a>, as well as <a href="http://en.wikipedia.org/wiki/X86" title="X86">x86</a> and <a href="http://en.wikipedia.org/wiki/X86-64" title="X86-64">x86-64</a>, optimize <a href="http://en.wikipedia.org/wiki/Instruction_scheduling" title="Instruction scheduling">instruction scheduling</a> to exploit the <a href="http://en.wikipedia.org/wiki/CPU_pipeline" title="CPU pipeline" class="mw-redirect">CPU pipeline</a> efficiently.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2011)">citation needed</span></a></i>]</sup></p>
<h4><span class="mw-headline" id="Number_of_passes">Number of passes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=3" title="Edit section: Number of passes">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>There are two types of assemblers based on how many passes through the source are needed to produce the executable program.</p>
<ul>
<li>One-pass assemblers go through the source code once. Any symbol used before it is defined will require <a href="http://en.wikipedia.org/wiki/Erratum" title="Erratum">"errata"</a> at the end of the object code (or, at least, no earlier than the point where the symbol is defined) telling the <a href="Linker_(computing).html" title="Linker (computing)">linker</a> or the loader to "go back" and overwrite a placeholder which had been left where the as yet undefined symbol was used.</li>
<li>Multi-pass assemblers create a table with all symbols and their values in the first passes, then use the table in later passes to generate code.</li>
</ul>
<p>In both cases, the assembler must be able to determine the size of each instruction on the initial passes in order to calculate the addresses of subsequent symbols. This means that if the size of an operation referring to an operand defined later depends on the type or distance of the operand, the assembler will make a pessimistic estimate when first encountering the operation, and if necessary pad it with one or more "<a href="http://en.wikipedia.org/wiki/NOP" title="NOP">no-operation</a>" instructions in a later pass or the errata. In an assembler with <a href="http://en.wikipedia.org/wiki/Peephole_optimization" title="Peephole optimization">peephole optimization</a>, addresses may be recalculated between passes to allow replacing pessimistic code with code tailored to the exact distance from the target.</p>
<p>The original reason for the use of one-pass assemblers was speed of assembly— often a second pass would require rewinding and rereading a <a href="Magnetic_tape_data_storage.html" title="Magnetic tape data storage">tape</a> or rereading a deck of <a href="http://en.wikipedia.org/wiki/Punch_cards" title="Punch cards" class="mw-redirect">cards</a>. With modern computers this has ceased to be an issue. The advantage of the multi-pass assembler is that the absence of errata makes the <a href="Linker_(computing).html" title="Linker (computing)">linking process</a> (or the <a href="Loader_(computing).html" title="Loader (computing)">program load</a> if the assembler directly produces executable code) faster.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>2<span>]</span></a></sup></p>
<h4><span class="mw-headline" id="High-level_assemblers">High-level assemblers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=4" title="Edit section: High-level assemblers">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>More sophisticated <a href="http://en.wikipedia.org/wiki/High-level_assembler" title="High-level assembler">high-level assemblers</a> provide language abstractions such as:</p>
<ul>
<li>Advanced control structures</li>
<li>High-level procedure/function declarations and invocations</li>
<li>High-level abstract data types, including structures/records, unions, classes, and sets</li>
<li>Sophisticated macro processing (although available on ordinary assemblers since the late 1950s for <a href="http://en.wikipedia.org/wiki/IBM_700/7000_series" title="IBM 700/7000 series">IBM 700 series</a> and since the 1960s for <a href="http://en.wikipedia.org/wiki/IBM/360" title="IBM/360" class="mw-redirect">IBM/360</a>, amongst other machines)</li>
<li><a href="Object-oriented_programming.html" title="Object-oriented programming">Object-oriented programming</a> features such as <a href="http://en.wikipedia.org/wiki/Class_(computer_programming)" title="Class (computer programming)">classes</a>, <a href="http://en.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">objects</a>, <a href="http://en.wikipedia.org/wiki/Abstraction_(computer_science)" title="Abstraction (computer science)">abstraction</a>, <a href="Type_polymorphism.html" title="Type polymorphism" class="mw-redirect">polymorphism</a>, and <a href="http://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)" title="Inheritance (object-oriented programming)">inheritance</a><sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>3<span>]</span></a></sup></li>
</ul>
<p>See <a href="#Language_design">Language design</a> below for more details.</p>
<h3><span class="mw-headline" id="Assembly_language">Assembly language</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=5" title="Edit section: Assembly language">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A program written in assembly language consists of a series of (mnemonic) processor instructions and meta-statements (known variously as directives, pseudo-instructions and pseudo-ops), comments and data. Assembly language instructions usually consist of an opcode mnemonic followed by a list of data, arguments or parameters.<sup id="cite_ref-intel-1999_4-0" class="reference"><a href="#cite_note-intel-1999-4"><span>[</span>4<span>]</span></a></sup> These are translated by an <a href="http://en.wikipedia.org/wiki/Assembly_language_assembler" title="Assembly language assembler" class="mw-redirect">assembler</a> into <a href="http://en.wikipedia.org/wiki/Machine_language" title="Machine language" class="mw-redirect">machine language</a> instructions that can be loaded into memory and executed.</p>
<p>For example, the instruction below tells an <a href="http://en.wikipedia.org/wiki/X86" title="X86">x86</a>/<a href="http://en.wikipedia.org/wiki/IA-32" title="IA-32">IA-32</a> processor to move an <a href="http://en.wikipedia.org/wiki/Constant_(programming)" title="Constant (programming)">immediate 8-bit value</a> into a <a href="http://en.wikipedia.org/wiki/Processor_register" title="Processor register">register</a>. The binary code for this instruction is 10110 followed by a 3-bit identifier for which register to use. The identifier for the <i>AL</i> register is 000, so the following <a href="http://en.wikipedia.org/wiki/Machine_code" title="Machine code">machine code</a> loads the <i>AL</i> register with the data 01100001.<sup id="cite_ref-intel-1999-MOV_5-0" class="reference"><a href="#cite_note-intel-1999-MOV-5"><span>[</span>5<span>]</span></a></sup></p>
<pre>
10110000 01100001
</pre>
<p>This binary computer code can be made more human-readable by expressing it in <a href="http://en.wikipedia.org/wiki/Hexadecimal" title="Hexadecimal">hexadecimal</a> as follows.</p>
<pre>
B0 61
</pre>
<p>Here, <code>B0</code> means 'Move a copy of the following value into <i>AL'</i>, and <code>61</code> is a hexadecimal representation of the value 01100001, which is 97 in <a href="http://en.wikipedia.org/wiki/Decimal" title="Decimal">decimal</a>. Intel assembly language provides the <a href="http://en.wikipedia.org/wiki/Mnemonic" title="Mnemonic">mnemonic</a> <a href="http://en.wikipedia.org/wiki/MOV_(x86_instruction)" title="MOV (x86 instruction)">MOV</a> (an abbreviation of <i>move</i>) for instructions such as this, so the machine code above can be written as follows in assembly language, complete with an explanatory comment if required, after the semicolon. This is much easier to read and to remember.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="asm source-asm">
<pre class="de1">
<span class="kw1">MOV</span> <span class="kw4">AL</span><span class="sy1">,</span> <span class="nu0">61h</span>       <span class="co1">; Load AL with 97 decimal (61 hex)</span>
</pre></div>
</div>
<p>In some assembly languages the same mnemonic such as MOV may be used for a family of related instructions for loading, copying and moving data, whether these are immediate values, values in registers, or memory locations pointed to by values in registers. Other assemblers may use separate opcodes such as L for "move memory to register", ST for "move register to memory", LR for "move register to register", MVI for "move immediate operand to memory", etc.</p>
<p>The Intel opcode 10110000 (<code>B0</code>) copies an 8-bit value into the <i>AL</i> register, while 10110001 (<code>B1</code>) moves it into <i>CL</i> and 10110010 (<code>B2</code>) does so into <i>DL</i>. Assembly language examples for these follow.<sup id="cite_ref-intel-1999-MOV_5-1" class="reference"><a href="#cite_note-intel-1999-MOV-5"><span>[</span>5<span>]</span></a></sup></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="asm source-asm">
<pre class="de1">
<span class="kw1">MOV</span> <span class="kw4">AL</span><span class="sy1">,</span> <span class="nu0">1h</span>        <span class="co1">; Load AL with immediate value 1</span>
<span class="kw1">MOV</span> <span class="kw4">CL</span><span class="sy1">,</span> <span class="nu0">2h</span>        <span class="co1">; Load CL with immediate value 2</span>
<span class="kw1">MOV</span> <span class="kw4">DL</span><span class="sy1">,</span> <span class="nu0">3h</span>        <span class="co1">; Load DL with immediate value 3</span>
</pre></div>
</div>
<p>The syntax of MOV can also be more complex as the following examples show.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6"><span>[</span>6<span>]</span></a></sup></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="asm source-asm">
<pre class="de1">
<span class="kw1">MOV</span> <span class="kw4">EAX</span><span class="sy1">,</span> <span class="br0">[</span><span class="kw4">EBX</span><span class="br0">]</span>	  <span class="co1">; Move the 4 bytes in memory at the address contained in EBX into EAX</span>
<span class="kw1">MOV</span> <span class="br0">[</span><span class="kw4">ESI</span><span class="sy1">+</span><span class="kw4">EAX</span><span class="br0">]</span><span class="sy1">,</span> <span class="kw4">CL</span> <span class="co1">; Move the contents of CL into the byte at address ESI+EAX</span>
</pre></div>
</div>
<p>In each case, the MOV mnemonic is translated directly into an opcode in the ranges 88-8E, A0-A3, B0-B8, C6 or C7 by an assembler, and the programmer does not have to know or remember which.<sup id="cite_ref-intel-1999-MOV_5-2" class="reference"><a href="#cite_note-intel-1999-MOV-5"><span>[</span>5<span>]</span></a></sup></p>
<p>Transforming assembly language into machine code is the job of an assembler, and the reverse can at least partially be achieved by a <a href="http://en.wikipedia.org/wiki/Disassembler" title="Disassembler">disassembler</a>. Unlike <a href="http://en.wikipedia.org/wiki/High-level_language" title="High-level language" class="mw-redirect">high-level languages</a>, there is usually a <a href="http://en.wikipedia.org/wiki/One-to-one_correspondence" title="One-to-one correspondence" class="mw-redirect">one-to-one correspondence</a> between simple assembly statements and machine language instructions. However, in some cases, an assembler may provide <i>pseudoinstructions</i> (essentially macros) which expand into several machine language instructions to provide commonly needed functionality. For example, for a machine that lacks a "branch if greater or equal" instruction, an assembler may provide a pseudoinstruction that expands to the machine's "set if less than" and "branch if zero (on the result of the set instruction)". Most full-featured assemblers also provide a rich <a href="http://en.wikipedia.org/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences.</p>
<p>Each <a href="Computer_architecture.html" title="Computer architecture">computer architecture</a> has its own machine language. Computers differ in the number and type of operations they support, in the different sizes and numbers of registers, and in the representations of data in storage. While most general-purpose computers are able to carry out essentially the same functionality, the ways they do so differ; the corresponding assembly languages reflect these differences.</p>
<p>Multiple sets of <a href="http://en.wikipedia.org/wiki/Mnemonic" title="Mnemonic">mnemonics</a> or assembly-language syntax may exist for a single instruction set, typically instantiated in different assembler programs. In these cases, the most popular one is usually that supplied by the manufacturer and used in its documentation.</p>
<h2><span class="mw-headline" id="Language_design">Language design</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=6" title="Edit section: Language design">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Basic_elements">Basic elements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=7" title="Edit section: Basic elements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>There is a large degree of diversity in the way the authors of assemblers categorize statements and in the nomenclature that they use. In particular, some describe anything other than a machine mnemonic or extended mnemonic as a pseudo-operation (pseudo-op). A typical assembly language consists of 3 types of instruction statements that are used to define program operations:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Opcode" title="Opcode">Opcode</a> mnemonics</li>
<li>Data sections</li>
<li>Assembly directives</li>
</ul>
<h4><span class="mw-headline" id="Opcode_mnemonics_and_extended_mnemonics">Opcode mnemonics and extended mnemonics</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=8" title="Edit section: Opcode mnemonics and extended mnemonics">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Instructions (statements) in assembly language are generally very simple, unlike those in <a href="High-level_programming_language.html" title="High-level programming language">high-level language</a>. Generally, a mnemonic is a symbolic name for a single executable machine language instruction (an <a href="http://en.wikipedia.org/wiki/Opcode" title="Opcode">opcode</a>), and there is at least one opcode mnemonic defined for each machine language instruction. Each instruction typically consists of an <i>operation</i> or <i>opcode</i> plus zero or more <i><a href="http://en.wikipedia.org/wiki/Operand" title="Operand">operands</a></i>. Most instructions refer to a single value, or a pair of values. Operands can be immediate (value coded in the instruction itself), registers specified in the instruction or implied, or the addresses of data located elsewhere in storage. This is determined by the underlying processor architecture: the assembler merely reflects how this architecture works. <i>Extended mnemonics</i> are often used to specify a combination of an opcode with a specific operand, e.g., the System/360 assemblers use <b>B</b> as an extended mnemonic for <b>BC</b> with a mask of 15 and <b>NOP</b> ("NO OPeration" - do nothing for one step) for <b>BC</b> with a mask of 0.</p>
<p><i>Extended mnemonics</i> are often used to support specialized uses of instructions, often for purposes not obvious from the instruction name. For example, many CPU's do not have an explicit NOP instruction, but do have instructions that can be used for the purpose. In 8086 CPUs the instruction <i>xchg ax,ax</i> is used for <i>nop</i>, with <i>nop</i> being a pseudo-opcode to encode the instruction <i>xchg ax,ax</i>. Some disassemblers recognize this and will decode the <i>xchg ax,ax</i> instruction as <i>nop</i>. Similarly, IBM assemblers for <a href="http://en.wikipedia.org/wiki/IBM_System/360" title="IBM System/360">System/360</a> and <a href="http://en.wikipedia.org/wiki/IBM_System/370" title="IBM System/370">System/370</a> use the extended mnemonics <i>NOP</i> and <i>NOPR</i> for <i>BC</i> and <i>BCR</i> with zero masks. For the SPARC architecture, these are known as <i>synthetic instructions</i>.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7"><span>[</span>7<span>]</span></a></sup></p>
<p>Some assemblers also support simple built-in macro-instructions that generate two or more machine instructions. For instance, with some Z80 assemblers the instruction <i>ld hl,bc</i> is recognized to generate <i>ld l,c</i> followed by <i>ld h,b</i>.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8"><span>[</span>8<span>]</span></a></sup> These are sometimes known as <i>pseudo-opcodes</i>.</p>
<p>Mnemonics are arbitrary symbols; in 1985 the <a href="IEEE.html" title="IEEE" class="mw-redirect">IEEE</a> published Standard 694 for a uniform set of mnemonics to be used by all assemblers. The standard has since been withdrawn.</p>
<h4><span class="mw-headline" id="Data_directives">Data directives</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=9" title="Edit section: Data directives">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>There are instructions used to define data elements to hold data and variables. They define the type of data, the length and the <a href="http://en.wikipedia.org/wiki/Data_structure_alignment" title="Data structure alignment">alignment</a> of data. These instructions can also define whether the data is available to outside programs (programs assembled separately) or only to the program in which the data section is defined. Some assemblers classify these as pseudo-ops.</p>
<h4><span class="mw-headline" id="Assembly_directives">Assembly directives</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=10" title="Edit section: Assembly directives">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Assembly directives, also called pseudo-opcodes, pseudo-operations or pseudo-ops, are instructions that are executed by an assembler at assembly time, not by a CPU at run time. The names of pseudo-ops often start with a dot to distinguish them from machine instructions. Pseudo-ops can make the assembly of the program dependent on parameters input by a programmer, so that one program can be assembled different ways, perhaps for different applications. Or, a pseudo-op can be used to manipulate presentation of a program to make it easier to read and maintain. Another common use of pseudo-ops is to reserve storage areas for run-time data and optionally initialize their contents to known values.</p>
<p>Symbolic assemblers let programmers associate arbitrary names (<i><a href="Label_(programming_language).html" title="Label (programming language)" class="mw-redirect">labels</a></i> or <i>symbols</i>) with memory locations and various constants. Usually, every constant and variable is given a name so instructions can reference those locations by name, thus promoting <a href="http://en.wikipedia.org/wiki/Self-documenting_code" title="Self-documenting code" class="mw-redirect">self-documenting code</a>. In executable code, the name of each subroutine is associated with its entry point, so any calls to a subroutine can use its name. Inside subroutines, <a href="http://en.wikipedia.org/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a> destinations are given labels. Some assemblers support <i>local symbols</i> which are lexically distinct from normal symbols (e.g., the use of "10$" as a <a href="http://en.wikipedia.org/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a> destination).</p>
<p>Some assemblers, such as NASM provide flexible symbol management, letting programmers manage different <a href="http://en.wikipedia.org/wiki/Namespaces" title="Namespaces" class="mw-redirect">namespaces</a>, automatically calculate offsets within <a href="Data_structure.html" title="Data structure">data structures</a>, and assign labels that refer to literal values or the result of simple computations performed by the assembler. Labels can also be used to initialize constants and variables with relocatable addresses.</p>
<p>Assembly languages, like most other computer languages, allow comments to be added to program <a href="Source_code.html" title="Source code">source code</a> that will be ignored during assembly. Judicious commenting is essential in assembly language programs, as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine. It should be noted that the "raw" (uncommented) assembly language generated by compilers or disassemblers is quite difficult to read when changes must be made.</p>
<h3><span class="mw-headline" id="Macros">Macros</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=11" title="Edit section: Macros">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Many assemblers support <i>predefined macros</i>, and others support <i>programmer-defined</i> (and repeatedly re-definable) macros involving sequences of text lines in which variables and constants are embedded. This sequence of text lines may include opcodes or directives. Once a macro has been defined its name may be used in place of a mnemonic. When the assembler processes such a statement, it replaces the statement with the text lines associated with that macro, then processes them as if they existed in the source code file (including, in some assemblers, expansion of any macros existing in the replacement text).</p>
<p>Note that this definition of "macro" is slightly different from the use of the term in other contexts, like the <a href="http://en.wikipedia.org/wiki/C_programming_language" title="C programming language" class="mw-redirect">C programming language</a>. C macros created through the #define directive typically are just one line, or a few lines at most. Assembler macro instructions can be lengthy "programs" by themselves, executed by interpretation by the assembler during assembly.</p>
<p>Since macros can have 'short' names but expand to several or indeed many lines of code, they can be used to make assembly language programs appear to be far shorter, requiring fewer lines of source code, as with higher level languages. They can also be used to add higher levels of structure to assembly programs, optionally introduce embedded debugging code via parameters and other similar features.</p>
<p>Macro assemblers often allow macros to take <a href="http://en.wikipedia.org/wiki/Parameter_(computer_science)" title="Parameter (computer science)" class="mw-redirect">parameters</a>. Some assemblers include quite sophisticated macro languages, incorporating such high-level language elements as optional parameters, symbolic variables, conditionals, string manipulation, and arithmetic operations, all usable during the execution of a given macro, and allowing macros to save context or exchange information. Thus a macro might generate a large number of assembly language instructions or data definitions, based on the macro arguments. This could be used to generate record-style data structures or "unrolled" loops, for example, or could generate entire algorithms based on complex parameters. An organization using assembly language that has been heavily extended using such a macro suite can be considered to be working in a higher-level language, since such programmers are not working with a computer's lowest-level conceptual elements.</p>
<p>Macros were used to customize large scale software systems for specific customers in the mainframe era and were also used by customer personnel to satisfy their employers' needs by making specific versions of manufacturer operating systems. This was done, for example, by systems programmers working with <a href="IBM.html" title="IBM">IBM</a>'s Conversational Monitor System / Virtual Machine (<a href="http://en.wikipedia.org/wiki/VM/CMS" title="VM/CMS" class="mw-redirect">VM/CMS</a>) and with IBM's "real time transaction processing" add-ons, Customer Information Control System <a href="http://en.wikipedia.org/wiki/CICS" title="CICS">CICS</a>, and <a href="http://en.wikipedia.org/wiki/Airline_Control_Program" title="Airline Control Program" class="mw-redirect">ACP</a>/<a href="Transaction_Processing_Facility.html" title="Transaction Processing Facility">TPF</a>, the airline/financial system that began in the 1970s and still runs many large <a href="http://en.wikipedia.org/wiki/Computer_reservations_system" title="Computer reservations system">computer reservations systems</a> (CRS) and credit card systems today.</p>
<p>It was also possible to use solely the macro processing abilities of an assembler to generate code written in completely different languages, for example, to generate a version of a program in <a href="COBOL.html" title="COBOL">COBOL</a> using a pure macro assembler program containing lines of COBOL code inside assembly time operators instructing the assembler to generate arbitrary code.</p>
<p>This was because, as was realized in the 1960s, the concept of "macro processing" is independent of the concept of "assembly", the former being in modern terms more word processing, text processing, than generating object code. The concept of macro processing appeared, and appears, in the C programming language, which supports "preprocessor instructions" to set variables, and make conditional tests on their values. Note that unlike certain previous macro processors inside assemblers, the C preprocessor was not <a href="http://en.wikipedia.org/wiki/Turing_completeness" title="Turing completeness">Turing-complete</a> because it lacked the ability to either loop or "go to", the latter allowing programs to loop.</p>
<p>Despite the power of macro processing, it fell into disuse in many high level languages (major exceptions being C/C++ and <a href="PL/I.html" title="PL/I">PL/I</a>) while remaining a perennial for assemblers.</p>
<p>Macro parameter substitution is strictly by name: at macro processing time, the value of a parameter is textually substituted for its name. The most famous class of bugs resulting was the use of a parameter that itself was an expression and not a simple name when the macro writer expected a name. In the macro: <tt>foo: macro a load a*b</tt> the intention was that the caller would provide the name of a variable, and the "global" variable or constant b would be used to multiply "a". If foo is called with the parameter <tt>a-c</tt>, the macro expansion of <tt>load a-c*b</tt> occurs. To avoid any possible ambiguity, users of macro processors can parenthesize formal parameters inside macro definitions, or callers can parenthesize the input parameters.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9"><span>[</span>9<span>]</span></a></sup></p>
<h3><span class="mw-headline" id="Support_for_structured_programming">Support for structured programming</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=12" title="Edit section: Support for structured programming">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Some assemblers have incorporated <a href="Structured_programming.html" title="Structured programming">structured programming</a> elements to encode execution flow. The earliest example of this approach was in the <a href="http://en.wikipedia.org/w/index.php?title=Concept-14_macro_set&amp;action=edit&amp;redlink=1" class="new" title="Concept-14 macro set (page does not exist)">Concept-14 macro set</a>, originally proposed by Dr. H.D. Mills (March, 1970), and implemented by Marvin Kessler at IBM's Federal Systems Division, which extended the S/360 macro assembler with IF/ELSE/ENDIF and similar control flow blocks.<sup id="cite_ref-10" class="reference"><a href="#cite_note-10"><span>[</span>10<span>]</span></a></sup> This was a way to reduce or eliminate the use of <a href="http://en.wikipedia.org/wiki/GOTO" title="GOTO" class="mw-redirect">GOTO</a> operations in assembly code, one of the main factors causing <a href="http://en.wikipedia.org/wiki/Spaghetti_code" title="Spaghetti code">spaghetti code</a> in assembly language. This approach was widely accepted in the early '80s (the latter days of large-scale assembly language use).</p>
<p>A curious design was <a href="http://en.wikipedia.org/w/index.php?title=A-natural&amp;action=edit&amp;redlink=1" class="new" title="A-natural (page does not exist)">A-natural</a>, a "stream-oriented" assembler for 8080/<a href="http://en.wikipedia.org/wiki/Z80" title="Z80" class="mw-redirect">Z80</a> processors<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (January 2009)">citation needed</span></a></i>]</sup> from <a href="http://en.wikipedia.org/wiki/Whitesmiths" title="Whitesmiths">Whitesmiths Ltd.</a> (developers of the <a href="Unix.html" title="Unix">Unix</a>-like <a href="http://en.wikipedia.org/wiki/Idris_(operating_system)" title="Idris (operating system)">Idris</a> operating system, and what was reported to be the first commercial <a href="C_(programming_language).html" title="C (programming language)">C</a> <a href="Compiler.html" title="Compiler">compiler</a>). The language was classified as an assembler, because it worked with raw machine elements such as <a href="http://en.wikipedia.org/wiki/Opcodes" title="Opcodes" class="mw-redirect">opcodes</a>, <a href="http://en.wikipedia.org/wiki/Processor_register" title="Processor register">registers</a>, and memory references; but it incorporated an expression syntax to indicate execution order. Parentheses and other special symbols, along with block-oriented structured programming constructs, controlled the sequence of the generated instructions. A-natural was built as the object language of a C compiler, rather than for hand-coding, but its logical syntax won some fans.</p>
<p>There has been little apparent demand for more sophisticated assemblers since the decline of large-scale assembly language development.<sup id="cite_ref-assembly-language.3Fcat.3Dtechnology_11-0" class="reference"><a href="#cite_note-assembly-language.3Fcat.3Dtechnology-11"><span>[</span>11<span>]</span></a></sup> In spite of that, they are still being developed and applied in cases where resource constraints or peculiarities in the target system's architecture prevent the effective use of higher-level languages.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12"><span>[</span>12<span>]</span></a></sup></p>
<h2><span class="mw-headline" id="Use_of_assembly_language">Use of assembly language</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=13" title="Edit section: Use of assembly language">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Historical_perspective">Historical perspective</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=14" title="Edit section: Historical perspective">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Assembly languages date to the introduction of the <a href="http://en.wikipedia.org/wiki/Stored-program_computer" title="Stored-program computer">stored-program computer</a>. The <a href="http://en.wikipedia.org/wiki/Electronic_Delay_Storage_Automatic_Calculator" title="Electronic Delay Storage Automatic Calculator">EDSAC</a> computer (1949) had an assembler called <i>initial orders</i> featuring one-letter mnemonics.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13"><span>[</span>13<span>]</span></a></sup> <a href="http://en.wikipedia.org/wiki/Nathaniel_Rochester_(computer_scientist)" title="Nathaniel Rochester (computer scientist)">Nathaniel Rochester</a> wrote an assembler for an <a href="http://en.wikipedia.org/wiki/IBM_701" title="IBM 701">IBM 701</a> (1954). SOAP (Symbolic Optimal Assembly Program) (1955) was an assembly language for the <a href="http://en.wikipedia.org/wiki/IBM_650" title="IBM 650">IBM 650</a> computer written by Stan Poley.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14"><span>[</span>14<span>]</span></a></sup></p>
<p>Assembly languages eliminated much of the error-prone and time-consuming <a href="http://en.wikipedia.org/wiki/First-generation_language" title="First-generation language" class="mw-redirect">first-generation</a> programming needed with the earliest computers, freeing programmers from tedium such as remembering numeric codes and calculating addresses. They were once widely used for all sorts of programming. However, by the 1980s (1990s on <a href="Microcomputer.html" title="Microcomputer">microcomputers</a>), their use had largely been supplanted by higher-level languages, in the search for improved <a href="http://en.wikipedia.org/wiki/Programming_productivity" title="Programming productivity">programming productivity</a>. Today assembly language is still used for direct hardware manipulation, access to specialized processor instructions, or to address critical performance issues. Typical uses are <a href="Device_driver.html" title="Device driver">device drivers</a>, low-level <a href="Embedded_system.html" title="Embedded system">embedded systems</a>, and <a href="http://en.wikipedia.org/wiki/Real-time_computing" title="Real-time computing">real-time</a> systems.</p>
<p>Historically, a large number of programs have been written entirely in assembly language. Operating systems were entirely written in assembly language until the introduction of the <a href="http://en.wikipedia.org/wiki/Burroughs_MCP" title="Burroughs MCP">Burroughs MCP</a> (1961), which was written in <a href="http://en.wikipedia.org/wiki/Executive_Systems_Problem_Oriented_Language" title="Executive Systems Problem Oriented Language">ESPOL</a>, an Algol dialect. Many commercial applications were written in assembly language as well, including a large amount of the <a href="http://en.wikipedia.org/wiki/IBM_mainframe" title="IBM mainframe">IBM mainframe</a> software written by large corporations. <a href="COBOL.html" title="COBOL">COBOL</a>, <a href="FORTRAN.html" title="FORTRAN" class="mw-redirect">FORTRAN</a> and some <a href="PL/I.html" title="PL/I">PL/I</a> eventually displaced much of this work, although a number of large organizations retained assembly-language application infrastructures well into the '90s.</p>
<p>Most early microcomputers relied on hand-coded assembly language, including most operating systems and large applications. This was because these systems had severe resource constraints, imposed idiosyncratic memory and display architectures, and provided limited, buggy system services. Perhaps more important was the lack of first-class high-level language compilers suitable for microcomputer use. A psychological factor may have also played a role: the first generation of microcomputer programmers retained a hobbyist, "wires and pliers" attitude.</p>
<p>In a more commercial context, the biggest reasons for using assembly language were minimal bloat (size), minimal overhead, greater speed, and reliability.</p>
<p>Typical examples of large assembly language programs from this time are IBM PC <a href="DOS.html" title="DOS">DOS</a> operating systems and early applications such as the <a href="http://en.wikipedia.org/wiki/Spreadsheet" title="Spreadsheet">spreadsheet</a> program <a href="http://en.wikipedia.org/wiki/Lotus_1-2-3" title="Lotus 1-2-3">Lotus 1-2-3</a>. Even into the 1990s, most console video games were written in assembly, including most games for the <a href="http://en.wikipedia.org/wiki/Sega_Mega_Drive" title="Sega Mega Drive" class="mw-redirect">Mega Drive/Genesis</a> and the <a href="http://en.wikipedia.org/wiki/Super_Nintendo_Entertainment_System" title="Super Nintendo Entertainment System">Super Nintendo Entertainment System</a>.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (February 2007)">citation needed</span></a></i>]</sup> According to some industry insiders, the assembly language was the best computer language to use to get the best performance out of the <a href="http://en.wikipedia.org/wiki/Sega_Saturn" title="Sega Saturn">Sega Saturn</a>, a console that was notoriously challenging to develop and program games for.<sup id="cite_ref-15" class="reference"><a href="#cite_note-15"><span>[</span>15<span>]</span></a></sup> The popular arcade game <a href="http://en.wikipedia.org/wiki/NBA_Jam" title="NBA Jam">NBA Jam</a> (1993) is another example. Assembly language has long been the primary development language for many popular home computers of the 1980s and 1990s (such as the <a href="http://en.wikipedia.org/wiki/Sinclair_ZX_Spectrum" title="Sinclair ZX Spectrum" class="mw-redirect">Sinclair ZX Spectrum</a>, <a href="http://en.wikipedia.org/wiki/Commodore_64" title="Commodore 64">Commodore 64</a>, <a href="http://en.wikipedia.org/wiki/Commodore_Amiga" title="Commodore Amiga" class="mw-redirect">Commodore Amiga</a>, and <a href="http://en.wikipedia.org/wiki/Atari_ST" title="Atari ST">Atari ST</a>). This was in large part because BASIC dialects on these systems offered insufficient execution speed, as well as insufficient facilities to take full advantage of the available hardware on these systems. Some systems, most notably the Amiga, even have IDEs with highly advanced debugging and macro facilities, such as the freeware <a rel="nofollow" class="external text" href="http://www.theflamearrows.info/homepage.html">ASM-One assembler</a>, comparable to that of <a href="Microsoft_Visual_Studio.html" title="Microsoft Visual Studio">Microsoft Visual Studio</a> facilities (ASM-One predates Microsoft Visual Studio).</p>
<p><i>The Assembler for the <a href="http://en.wikipedia.org/wiki/VIC-20" title="VIC-20" class="mw-redirect">VIC-20</a></i> was written by Don French and published by <i>French Silk</i>. At 1,639 bytes in length, its author believes it is the smallest symbolic assembler ever written. The assembler supported the usual symbolic addressing and the definition of <a href="http://en.wikipedia.org/wiki/Character_string" title="Character string" class="mw-redirect">character strings</a> or hex strings. It also allowed address expressions which could be combined with <a href="Addition.html" title="Addition">addition</a>, <a href="Subtraction.html" title="Subtraction">subtraction</a>, <a href="Multiplication.html" title="Multiplication">multiplication</a>, <a href="http://en.wikipedia.org/wiki/Division_(mathematics)" title="Division (mathematics)">division</a>, <a href="http://en.wikipedia.org/wiki/Logical_AND" title="Logical AND" class="mw-redirect">logical AND</a>, <a href="http://en.wikipedia.org/wiki/Logical_OR" title="Logical OR" class="mw-redirect">logical OR</a>, and <a href="http://en.wikipedia.org/wiki/Exponentiation" title="Exponentiation">exponentiation</a> operators.<sup id="cite_ref-16" class="reference"><a href="#cite_note-16"><span>[</span>16<span>]</span></a></sup></p>
<h3><span class="mw-headline" id="Current_usage">Current usage</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=15" title="Edit section: Current usage">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>There have always been debates over the usefulness and performance of assembly language relative to high-level languages. Assembly language has specific niche uses where it is important; see below. Assembler can be used to optimize for speed or optimize for size. In the case of speed optimization, modern <a href="http://en.wikipedia.org/wiki/Optimizing_compiler" title="Optimizing compiler">optimizing compilers</a> are claimed<sup id="cite_ref-17" class="reference"><a href="#cite_note-17"><span>[</span>17<span>]</span></a></sup> to render high-level languages into code that can run as fast as hand-written assembly, despite the counter-examples that can be found.<sup id="cite_ref-goto_18-0" class="reference"><a href="#cite_note-goto-18"><span>[</span>18<span>]</span></a></sup><sup id="cite_ref-bit-fild_19-0" class="reference"><a href="#cite_note-bit-fild-19"><span>[</span>19<span>]</span></a></sup><sup id="cite_ref-gcc-mess_20-0" class="reference"><a href="#cite_note-gcc-mess-20"><span>[</span>20<span>]</span></a></sup> The complexity of modern processors and memory sub-systems makes effective optimization increasingly difficult for compilers, as well as assembly programmers.<sup id="cite_ref-GreatDebate1_21-0" class="reference"><a href="#cite_note-GreatDebate1-21"><span>[</span>21<span>]</span></a></sup><sup id="cite_ref-compiler-fails1_22-0" class="reference"><a href="#cite_note-compiler-fails1-22"><span>[</span>22<span>]</span></a></sup> Moreover, and to the dismay of efficiency lovers, increasing processor performance has meant that most CPUs sit idle most of the time,<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="Mainframes normally run with a high CPU loading factor. (January 2011)">citation needed</span></a></i>]</sup> with delays caused by predictable bottlenecks such as <a href="http://en.wikipedia.org/wiki/I/O" title="I/O" class="mw-redirect">I/O</a> operations and <a href="Paging.html" title="Paging">paging</a>. This has made raw code execution speed a non-issue for many programmers.</p>
<p>There are some situations in which developers might choose to use assembly language:</p>
<ul>
<li>A stand-alone executable of compact size is required that must execute without recourse to the <a href="Run-time_system.html" title="Run-time system">run-time</a> components or <a href="Library_(computing).html" title="Library (computing)">libraries</a> associated with a high-level language; this is perhaps the most common situation. For example, firmware for telephones, automobile fuel and ignition systems, air-conditioning control systems, security systems, and sensors.</li>
<li>Code that must interact directly with the hardware, for example in <a href="Device_driver.html" title="Device driver">device drivers</a> and <a href="http://en.wikipedia.org/wiki/Interrupt_handler" title="Interrupt handler">interrupt handlers</a>.</li>
<li>Programs that need to use processor-specific instructions not implemented in a compiler. A common example is the <a href="http://en.wikipedia.org/wiki/Circular_shift" title="Circular shift">bitwise rotation</a> instruction at the core of many encryption algorithms.</li>
<li>Programs that create vectorized functions for programs in higher-level languages such as C. In the higher-level language this is sometimes aided by compiler <a href="http://en.wikipedia.org/wiki/Intrinsic_function" title="Intrinsic function">intrinsic functions</a> which map directly to SIMD mnemonics, but nevertheless result in a one-to-one assembly conversion specific for the given vector processor.</li>
<li>Programs requiring extreme optimization, for example an inner <a href="http://en.wikipedia.org/wiki/Program_loop" title="Program loop" class="mw-redirect">loop</a> in a processor-intensive algorithm. <a href="http://en.wikipedia.org/wiki/Game_programmer" title="Game programmer">Game programmers</a> take advantage of the abilities of hardware features in systems, enabling games to run faster. Also large scientific simulations require highly optimized algorithms, e.g. <a href="Linear_algebra.html" title="Linear algebra">linear algebra</a> with <a href="http://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms" title="Basic Linear Algebra Subprograms">BLAS</a><sup id="cite_ref-goto_18-1" class="reference"><a href="#cite_note-goto-18"><span>[</span>18<span>]</span></a></sup><sup id="cite_ref-bench_23-0" class="reference"><a href="#cite_note-bench-23"><span>[</span>23<span>]</span></a></sup> or <a href="http://en.wikipedia.org/wiki/DCT_(math)" title="DCT (math)" class="mw-redirect">discrete cosine transformation</a> (e.g. <a href="http://en.wikipedia.org/wiki/SIMD" title="SIMD">SIMD</a> assembly version from <a href="http://en.wikipedia.org/wiki/X264" title="X264">x264</a><sup id="cite_ref-24" class="reference"><a href="#cite_note-24"><span>[</span>24<span>]</span></a></sup>)</li>
<li>Situations where no high-level language exists, on a new or specialized processor, for example.</li>
<li>Programs that need precise timing such as
<ul>
<li><a href="http://en.wikipedia.org/wiki/Real-time_computing" title="Real-time computing">real-time</a> programs such as simulations, flight navigation systems, and medical equipment. For example, in a <a href="http://en.wikipedia.org/wiki/Fly-by-wire" title="Fly-by-wire">fly-by-wire</a> system, telemetry must be interpreted and acted upon within strict time constraints. Such systems must eliminate sources of unpredictable delays, which may be created by (some) interpreted languages, automatic <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>, paging operations, or <a href="http://en.wikipedia.org/wiki/Preemptive_multitasking" title="Preemptive multitasking" class="mw-redirect">preemptive multitasking</a>. However, some higher-level languages incorporate run-time components and operating system interfaces that can introduce such delays. Choosing assembly or lower-level languages for such systems gives programmers greater visibility and control over processing details.</li>
<li>cryptographic algorithms that must always take strictly the same time to execute, preventing <a href="http://en.wikipedia.org/wiki/Timing_attack" title="Timing attack">timing attacks</a>.</li>
</ul>
</li>
<li>Situations where complete control over the environment is required, in extremely high security situations where <a href="http://en.wikipedia.org/wiki/Trusting_trust#Reflections_on_Trusting_Trust" title="Trusting trust" class="mw-redirect">nothing can be taken for granted</a>.</li>
<li><a href="http://en.wikipedia.org/wiki/Computer_virus" title="Computer virus">Computer viruses</a>, <a href="http://en.wikipedia.org/wiki/Bootloader" title="Bootloader" class="mw-redirect">bootloaders</a>, certain <a href="Device_driver.html" title="Device driver">device drivers</a>, or other items very close to the hardware or low-level operating system.</li>
<li><a href="http://en.wikipedia.org/wiki/Instruction_set_simulator" title="Instruction set simulator">Instruction set simulators</a> for monitoring, tracing and <a href="http://en.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a> where additional overhead is kept to a minimum</li>
<li><a href="http://en.wikipedia.org/wiki/Reverse-engineering" title="Reverse-engineering" class="mw-redirect">Reverse-engineering</a> and modifying program files such as
<ul>
<li>existing <a href="http://en.wikipedia.org/wiki/Binary_file" title="Binary file">binaries</a> that may or may not have originally been written in a high-level language, for example when trying to recreate programs for which source code is not available or has been lost, or cracking copy protection of proprietary software.</li>
<li><a href="Video_game.html" title="Video game">Video games</a> (also termed <a href="http://en.wikipedia.org/wiki/ROM_hacking" title="ROM hacking">ROM hacking</a>), which is possible via several methods. The most widely employed is altering program code at the assembly language level.</li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Self-modifying_code" title="Self-modifying code">Self-modifying code</a>, to which assembly language lends itself well.</li>
<li><a href="http://en.wikipedia.org/wiki/Calculator_gaming" title="Calculator gaming" class="mw-redirect">Games</a> and other software for <a href="http://en.wikipedia.org/wiki/Graphing_calculator" title="Graphing calculator">graphing calculators</a>.<sup id="cite_ref-25" class="reference"><a href="#cite_note-25"><span>[</span>25<span>]</span></a></sup></li>
</ul>
<p>Assembly language is still taught in most <a href="Computer_science.html" title="Computer science">computer science</a> and <a href="Electronic_engineering.html" title="Electronic engineering">electronic engineering</a> programs. Although few programmers today regularly work with assembly language as a tool, the underlying concepts remain very important. Such fundamental topics as <a href="http://en.wikipedia.org/wiki/Binary_arithmetic" title="Binary arithmetic" class="mw-redirect">binary arithmetic</a>, <a href="http://en.wikipedia.org/wiki/Memory_allocation" title="Memory allocation" class="mw-redirect">memory allocation</a>, <a href="Stack_(data_structure).html" title="Stack (data structure)" class="mw-redirect">stack processing</a>, <a href="http://en.wikipedia.org/wiki/Character_set" title="Character set" class="mw-redirect">character set</a> encoding, <a href="Interrupt.html" title="Interrupt">interrupt</a> processing, and <a href="Compiler.html" title="Compiler">compiler</a> design would be hard to study in detail without a grasp of how a computer operates at the hardware level. Since a computer's behavior is fundamentally defined by its instruction set, the logical way to learn such concepts is to study an assembly language. Most modern computers have similar instruction sets. Therefore, studying a single assembly language is sufficient to learn: I) the basic concepts; II) to recognize situations where the use of assembly language might be appropriate; and III) to see how efficient executable code can be created from high-level languages. <sup id="cite_ref-26" class="reference"><a href="#cite_note-26"><span>[</span>26<span>]</span></a></sup> This is analogous to children needing to learn the basic arithmetic operations (e.g., long division), although <a href="http://en.wikipedia.org/wiki/Calculator" title="Calculator">calculators</a> are widely used for all except the most trivial calculations.</p>
<h3><span class="mw-headline" id="Typical_applications">Typical applications</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=16" title="Edit section: Typical applications">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<ul>
<li>Assembly language is typically used in a system's <a href="http://en.wikipedia.org/wiki/Booting" title="Booting">boot</a> code, (<a href="http://en.wikipedia.org/wiki/BIOS" title="BIOS">BIOS</a> on IBM-compatible <a href="http://en.wikipedia.org/wiki/Personal_Computer" title="Personal Computer" class="mw-redirect">PC</a> systems and <a href="CP/M.html" title="CP/M">CP/M</a>), the low-level code that initializes and tests the system hardware prior to booting the operating system, and is often stored in <a href="http://en.wikipedia.org/wiki/Read-only_memory" title="Read-only memory">ROM</a>.</li>
</ul>
<ul>
<li>Some compilers translate high-level languages into assembly first before fully compiling, allowing the assembly code to be viewed for <a href="http://en.wikipedia.org/wiki/Debug" title="Debug" class="mw-redirect">debugging</a> and optimization purposes.</li>
</ul>
<ul>
<li>Relatively low-level languages, such as <a href="C_(programming_language).html" title="C (programming language)">C</a>, allow the programmer to embed assembly language directly in the source code. Programs using such facilities, such as the <a href="Linux_kernel.html" title="Linux kernel">Linux kernel</a>, can then construct abstractions using different assembly language on each hardware platform. The system's <a href="Software_portability.html" title="Software portability">portable</a> code can then use these processor-specific components through a uniform interface.</li>
</ul>
<ul>
<li>Assembly language is valuable in <a href="http://en.wikipedia.org/wiki/Reverse_engineering" title="Reverse engineering">reverse engineering</a>. Many programs are distributed only in machine code form which is straightforward to translate into assembly language, but more difficult to translate into a higher-level language. Tools such as the <a href="http://en.wikipedia.org/wiki/Interactive_Disassembler" title="Interactive Disassembler">Interactive Disassembler</a> make extensive use of disassembly for such a purpose.</li>
</ul>
<ul>
<li>Assemblers can be used to generate blocks of data, with no high-level language overhead, from formatted and commented source code, to be used by other code.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2012)">citation needed</span></a></i>]</sup></li>
</ul>
<h2><span class="mw-headline" id="Related_terminology">Related terminology</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=17" title="Edit section: Related terminology">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><b>Assembly language</b> or <b>assembler language</b> is commonly called <b>assembly</b>, <b>assembler</b>, <b>ASM</b>, or <b>symbolic machine code</b>. A generation of IBM mainframe programmers called it <b>ALC</b> for <i>Assembly Language Code</i> or <b>BAL</b><sup id="cite_ref-27" class="reference"><a href="#cite_note-27"><span>[</span>27<span>]</span></a></sup> for <b>Basic Assembly Language</b>. Calling the language <b>assembler</b> might be considered potentially confusing and ambiguous, since this is also the name of the utility program that translates assembly language statements into machine code. However, this usage has been common among professionals and in the literature for decades.<sup id="cite_ref-28" class="reference"><a href="#cite_note-28"><span>[</span>28<span>]</span></a></sup> Similarly, some early computers called their <i>assembler</i> their <b>assembly program</b>.<sup id="cite_ref-29" class="reference"><a href="#cite_note-29"><span>[</span>29<span>]</span></a></sup></li>
<li>The computational step where an assembler is run, including all macro processing, is termed <b>assembly time</b>. The assembler is said to be "assembling" the <a href="Source_code.html" title="Source code">source code</a>.</li>
<li>The use of the word <b>assembly</b> dates from the early years of computers (<i>cf.</i> <a href="http://en.wikipedia.org/wiki/Short_Code_(Computer_language)" title="Short Code (Computer language)" class="mw-redirect">short code</a>, <a href="http://en.wikipedia.org/wiki/Speedcoding" title="Speedcoding">speedcode</a>).</li>
<li><span id="Cross_assembler"></span>A <b>cross assembler</b> (see also <a href="http://en.wikipedia.org/wiki/Cross_compiler" title="Cross compiler">cross compiler</a>) is an assembler that is run on a computer or <a href="Operating_system.html" title="Operating system">operating system</a> of a different type from the system on which the resulting code is to run (the <i>target system</i>). Cross-assembling may be necessary if the target system cannot run an assembler itself, as is typically the case for small embedded systems. The computer on which the cross assembler is run must have some means of transporting the resulting <a href="http://en.wikipedia.org/wiki/Machine_code" title="Machine code">machine code</a> to the target system. Common methods involve transmitting an exact byte-by-byte copy of the machine code or an <a href="ASCII.html" title="ASCII">ASCII</a> representation of the machine code in a portable format (such as <a href="http://en.wikipedia.org/wiki/SREC_(file_format)" title="SREC (file format)">Motorola</a> or <a href="http://en.wikipedia.org/wiki/Intel_HEX" title="Intel HEX">Intel</a> <a href="http://en.wikipedia.org/wiki/Hexadecimal" title="Hexadecimal">hexadecimal</a>) through a compatible <a href="http://en.wikipedia.org/wiki/Interface_(computing)" title="Interface (computing)">interface</a> to the target system for execution.</li>
<li>An <b>assembler directive</b> or <i>pseudo-opcode</i> is a command given to an assembler "directing it to perform operations other than assembling instructions."<sup id="cite_ref-Salomon_1-1" class="reference"><a href="#cite_note-Salomon-1"><span>[</span>1<span>]</span></a></sup> Directives affect how the assembler operates and "may affect the object code, the symbol table, the listing file, and the values of internal assembler parameters." Sometimes the term <i>pseudo-opcode</i> is reserved for directives that generate object code, such as those that generate data.<sup id="cite_ref-30" class="reference"><a href="#cite_note-30"><span>[</span>30<span>]</span></a></sup></li>
<li>A <b>meta-assembler</b> is "a program that accepts the syntactic and semantic description of an assembly language, and generates an assembler for that language." <sup id="cite_ref-31" class="reference"><a href="#cite_note-31"><span>[</span>31<span>]</span></a></sup></li>
</ul>
<h2><span class="mw-headline" id="List_of_assemblers_for_different_computer_architectures">List of assemblers for different computer architectures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=18" title="Edit section: List of assemblers for different computer architectures">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/List_of_assemblers" title="List of assemblers" class="mw-redirect">List of assemblers</a></div>
<h2><span class="mw-headline" id="Further_details">Further details</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=19" title="Edit section: Further details">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>For any given personal computer, mainframe, embedded system, and game console, both past and present, at least one – possibly dozens – of assemblers have been written. For some examples, see the <a href="http://en.wikipedia.org/wiki/List_of_assemblers" title="List of assemblers" class="mw-redirect">list of assemblers</a>.</p>
<p>On <a href="Unix.html" title="Unix">Unix</a> systems, the assembler is traditionally called <a href="http://en.wikipedia.org/wiki/As_(Unix)" title="As (Unix)">as</a>, although it is not a single body of code, being typically written anew for each port. A number of Unix variants use <a href="http://en.wikipedia.org/wiki/GNU_Assembler" title="GNU Assembler">GAS</a>.</p>
<p>Within processor groups, each assembler has its own dialect. Sometimes, some assemblers can read another assembler's dialect, for example, <a href="http://en.wikipedia.org/wiki/TASM" title="TASM" class="mw-redirect">TASM</a> can read old <a href="http://en.wikipedia.org/wiki/MASM" title="MASM" class="mw-redirect">MASM</a> code, but not the reverse. <a href="http://en.wikipedia.org/wiki/FASM" title="FASM">FASM</a> and <a href="http://en.wikipedia.org/wiki/Netwide_Assembler" title="Netwide Assembler">NASM</a> have similar syntax, but each support different macros that could make them difficult to translate to each other. The basics are all the same, but the advanced features will differ.<sup id="cite_ref-Hyde_32-0" class="reference"><a href="#cite_note-Hyde-32"><span>[</span>32<span>]</span></a></sup></p>
<p>Also, assembly can sometimes be portable across different operating systems on the same type of <a href="http://en.wikipedia.org/wiki/CPU" title="CPU" class="mw-redirect">CPU</a>. <a href="http://en.wikipedia.org/wiki/Calling_convention" title="Calling convention">Calling conventions</a> between operating systems often differ slightly or not at all, and with care it is possible to gain some portability in assembly language, usually by linking with a <a href="C_(programming_language).html" title="C (programming language)">C</a> library that does not change between operating systems.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2011)">citation needed</span></a></i>]</sup> An <a href="http://en.wikipedia.org/wiki/Instruction_set_simulator" title="Instruction set simulator">instruction set simulator</a> can process the <a href="Object_code.html" title="Object code">object code</a>/ <a href="http://en.wikipedia.org/wiki/Binary_file" title="Binary file">binary</a> of <i>any</i> assembler to achieve portability even across <a href="Platform_(computing).html" title="Platform (computing)" class="mw-redirect">platforms</a> with an overhead no greater than a typical bytecode interpreter.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2011)">citation needed</span></a></i>]</sup> This is similar to use of microcode to achieve compatibility across a processor family.</p>
<p>Some higher level computer languages, such as <a href="C_(programming_language).html" title="C (programming language)">C</a> and <a href="http://en.wikipedia.org/wiki/Borland_Pascal" title="Borland Pascal" class="mw-redirect">Borland Pascal</a>, support <a href="http://en.wikipedia.org/wiki/Inline_assembler" title="Inline assembler">inline assembly</a> where sections of assembly code, in practice usually brief, can be embedded into the high level language code. The <a href="http://en.wikipedia.org/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a> language commonly contains an assembler used in CODE words.</p>
<p>An <a href="http://en.wikipedia.org/wiki/Emulator" title="Emulator">emulator</a> can be used to debug assembly-language programs.</p>
<h2><span class="mw-headline" id="Example_listing_of_assembly_language_source_code">Example listing of assembly language source code</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=20" title="Edit section: Example listing of assembly language source code">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The following is a partial listing generated by the <a href="http://en.wikipedia.org/wiki/Netwide_Assembler" title="Netwide Assembler">NASM</a>, an assembler for 32-bit <a href="http://en.wikipedia.org/wiki/Intel_80386" title="Intel 80386">Intel x86</a> CPUs. The code is for a subroutine, not a complete program.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="asm source-asm">
<ol start="100">
<li class="li1">
<pre class="de1">
                     <span class="co1">;-----------------------------------------------------------</span>
</pre></li>
<li class="li1">
<pre class="de1">
                     <span class="co1">; zstr_count:</span>
</pre></li>
<li class="li1">
<pre class="de1">
                     <span class="co1">; Counts a zero-terminated ASCII string to determine its size</span>
</pre></li>
<li class="li1">
<pre class="de1">
                     <span class="co1">; in:   eax = start address of the zero terminated string</span>
</pre></li>
<li class="li2">
<pre class="de2">
                     <span class="co1">; out:  ecx = count = the length of the string</span>
</pre></li>
<li class="li1">
<pre class="de1">
 
</pre></li>
<li class="li1">
<pre class="de1">
                     zstr_count<span class="sy1">:</span>                   <span class="co1">; Entry point</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="co2">00000030</span> B9FFFFFFFF      <span class="kw1">mov</span>  <span class="kw4">ecx</span><span class="sy1">,</span> <span class="sy1">-</span><span class="nu0">1</span>              <span class="co1">; Init the loop counter, pre-decrement</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">;  to compensate for the increment</span>
</pre></li>
<li class="li2">
<pre class="de2">
                     <span class="sy1">.</span><span class="kw1">loop</span><span class="sy1">:</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="co2">00000035</span> <span class="nu0">41</span>              <span class="kw1">inc</span>  <span class="kw4">ecx</span>                  <span class="co1">; Add 1 to the loop counter</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="co2">00000036</span> 803C0800        <span class="kw1">cmp</span>  <span class="kw6">byte</span> <span class="br0">[</span><span class="kw4">eax</span> <span class="sy1">+</span> <span class="kw4">ecx</span><span class="br0">]</span><span class="sy1">,</span> <span class="nu0">0</span>  <span class="co1">; Compare the value at the string's</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">;  [starting memory address Plus the</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">;  loop offset], to zero</span>
</pre></li>
<li class="li2">
<pre class="de2">
<span class="co2">0000003A</span> 75F9            <span class="kw1">jne</span>  <span class="sy1">.</span><span class="kw1">loop</span>                <span class="co1">; If the memory value is not zero,</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">;  then jump to the label called '.loop',</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">;  otherwise continue to the next line</span>
</pre></li>
<li class="li1">
<pre class="de1">
                     <span class="sy1">.</span>done<span class="sy1">:</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">; We don't do a final increment,</span>
</pre></li>
<li class="li2">
<pre class="de2">
                                                   <span class="co1">;  because even though the count is base 1,</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">;  we do not include the zero terminator in the</span>
</pre></li>
<li class="li1">
<pre class="de1">
                                                   <span class="co1">;  string's length</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="co2">0000003C</span> C3              <span class="kw1">ret</span>                       <span class="co1">; Return to the calling program</span>
</pre></li>
</ol>
</div>
</div>
<p>The first column (from the left) is simply the line number in the listing and is otherwise meaningless. The second column is the relative address, in hex, of where the code will be placed in memory. The third column is the actual compiled code. For instance, <code><span class="mw-geshi text source-text">B9</span></code> is the x86 opcode for the <code><span class="mw-geshi text source-text">MOV</span></code>&#160;<code><span class="mw-geshi text source-text">ECX</span></code> instruction; <code><span class="mw-geshi text source-text">FFFFFFFF</span></code> is the value −1 in two's-complement binary form.</p>
<p>Names suffixed with colons (<code><span class="mw-geshi text source-text">:</span></code>) are symbolic labels; the labels do not create code, they are simply a way to tell the assembler that those locations have symbolic names. The <code><span class="mw-geshi text source-text">.done</span></code> label is only present for clarity of where the program ends, it does not serve any other purpose. Prefixing a period (<code><span class="mw-geshi text source-text">.</span></code>) on a label is a feature of the assembler, declaring the label as being local to the subroutine.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=21" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="noprint tright portal" style="border:solid #aaa 1px;margin:0.5em 0 0.5em 1em;">
<table style="background:#f9f9f9;font-size:85%;line-height:110%;max-width:175px;">
<tr valign="middle">
<td style="text-align:center;"><a href="http://en.wikipedia.org/wiki/File:8bit-dynamiclist.gif" class="image"><img alt="Portal icon" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1d/8bit-dynamiclist.gif/28px-8bit-dynamiclist.gif" width="28" height="28" srcset="//upload.wikimedia.org/wikipedia/commons/1/1d/8bit-dynamiclist.gif 1.5x, //upload.wikimedia.org/wikipedia/commons/1/1d/8bit-dynamiclist.gif 2x" /></a></td>
<td style="padding:0 0.2em;vertical-align:middle;font-style:italic;font-weight:bold;"><a href="http://en.wikipedia.org/wiki/Portal:Computer_programming" title="Portal:Computer programming">Computer programming portal</a></td>
</tr>
<tr valign="middle">
<td style="text-align:center;"><a href="http://en.wikipedia.org/wiki/File:Internet_map_1024.jpg" class="image"><img alt="Portal icon" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/28px-Internet_map_1024.jpg" width="28" height="28" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/42px-Internet_map_1024.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/56px-Internet_map_1024.jpg 2x" /></a></td>
<td style="padding:0 0.2em;vertical-align:middle;font-style:italic;font-weight:bold;"><a href="http://en.wikipedia.org/wiki/Portal:Computer_science" title="Portal:Computer science">Computer science portal</a></td>
</tr>
</table>
</div>
<ul>
<li><a href="Compiler.html" title="Compiler">Compiler</a></li>
<li><a href="http://en.wikipedia.org/wiki/Disassembler" title="Disassembler">Disassembler</a></li>
<li><a href="http://en.wikipedia.org/wiki/High_Level_Assembly" title="High Level Assembly">High Level Assembly</a></li>
<li><a href="http://en.wikipedia.org/wiki/Instruction_set" title="Instruction set">Instruction set</a></li>
<li><a href="http://en.wikipedia.org/wiki/Little_man_computer" title="Little man computer">Little man computer</a> – an educational computer model with a base-10 assembly language</li>
<li><a href="http://en.wikipedia.org/wiki/Microassembler" title="Microassembler">Microassembler</a></li>
<li><a href="http://en.wikipedia.org/wiki/Typed_assembly_language" title="Typed assembly language">Typed assembly language</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=22" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-Salomon-1"><span class="mw-cite-backlink">^ <a href="#cite_ref-Salomon_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Salomon_1-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text">David Salomon (1993). <i><a rel="nofollow" class="external text" href="http://www.davidsalomon.name/assem.advertis/asl.pdf">Assemblers and Loaders</a></i></span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation book">Beck, Leland L. (1996). "2". <i>System Software: An Introduction to Systems Programming</i>. Addison Wesley.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.atitle=System+Software%3A+An+Introduction+to+Systems+Programming&amp;rft.au=Beck%2C+Leland+L.&amp;rft.aufirst=Leland+L.&amp;rft.aulast=Beck&amp;rft.btitle=2&amp;rft.date=1996&amp;rft.genre=bookitem&amp;rft.pub=Addison+Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text">Hyde, Randall. "Chapter 12 – Classes and Objects". The Art of Assembly Language, 2nd Edition. No Starch Press. © 2010.</span></li>
<li id="cite_note-intel-1999-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-intel-1999_4-0">^</a></b></span> <span class="reference-text"><span class="citation book"><a rel="nofollow" class="external text" href="http://download.intel.com/design/PentiumII/manuals/24319102.PDF"><i>Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference</i></a>. Intel Corporation. 1999<span class="reference-accessdate">. Retrieved 18 November 2010</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=Intel+Architecture+Software+Developer%27s+Manual%2C+Volume+2%3A+Instruction+Set+Reference&amp;rft.date=1999&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fdownload.intel.com%2Fdesign%2FPentiumII%2Fmanuals%2F24319102.PDF&amp;rft.pub=Intel+Corporation&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-intel-1999-MOV-5"><span class="mw-cite-backlink">^ <a href="#cite_ref-intel-1999-MOV_5-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-intel-1999-MOV_5-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-intel-1999-MOV_5-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><span class="citation book"><a rel="nofollow" class="external text" href="http://download.intel.com/design/PentiumII/manuals/24319102.PDF"><i>Intel Architecture Software Developer's Manual, Volume 2: Instruction Set Reference</i></a>. Intel Corporation. 1999. pp.&#160;442 and 35<span class="reference-accessdate">. Retrieved 18 November 2010</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=Intel+Architecture+Software+Developer%27s+Manual%2C+Volume+2%3A+Instruction+Set+Reference&amp;rft.date=1999&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fdownload.intel.com%2Fdesign%2FPentiumII%2Fmanuals%2F24319102.PDF&amp;rft.pages=442+and+35&amp;rft.pub=Intel+Corporation&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text"><span class="citation web">Evans, David (2006). <a rel="nofollow" class="external text" href="http://www.cs.virginia.edu/~evans/cs216/guides/x86.html">"x86 Assembly Guide"</a>. University of Virginia<span class="reference-accessdate">. Retrieved 18 November 2010</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.au=Evans%2C+David&amp;rft.aufirst=David&amp;rft.aulast=Evans&amp;rft.btitle=x86+Assembly+Guide&amp;rft.date=2006&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.cs.virginia.edu%2F~evans%2Fcs216%2Fguides%2Fx86.html&amp;rft.pub=University+of+Virginia&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.sparc.com/standards/V8.pdf">"The SPARC Architecture Manual, Version 8"</a>. SPARC, International. 1992.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=The+SPARC+Architecture+Manual%2C+Version+8&amp;rft.date=1992&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.sparc.com%2Fstandards%2FV8.pdf&amp;rft.pub=SPARC%2C+International&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.z80.de/z80/z80code.htm">Z80 Op Codes for ZINT</a>. Z80.de. Retrieved on 2013-07-21.</span></li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/503x3e3s(v=VS.90).aspx">"Macros (C/C++), MSDN Library for Visual Studio 2008"</a>. Microsoft Corp<span class="reference-accessdate">. Retrieved 2010-06-22</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=Macros+%28C%2FC%2B%2B%29%2C+MSDN+Library+for+Visual+Studio+2008&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2F503x3e3s%2528v%3DVS.90%2529.aspx&amp;rft.pub=Microsoft+Corp.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://skycoast.us/pscott/software/mvs/concept14.html">"Concept 14 Macros"</a>. MVS Software<span class="reference-accessdate">. Retrieved May 25, 2009</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=Concept+14+Macros&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fskycoast.us%2Fpscott%2Fsoftware%2Fmvs%2Fconcept14.html&amp;rft.pub=MVS+Software&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-assembly-language.3Fcat.3Dtechnology-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-assembly-language.3Fcat.3Dtechnology_11-0">^</a></b></span> <span class="reference-text"><span class="citation web">Answers.com. <a rel="nofollow" class="external text" href="http://www.answers.com/topic/assembly-language?cat=technology">"assembly language: Definition and Much More from Answers.com"</a><span class="reference-accessdate">. Retrieved 2008-06-19</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.au=Answers.com&amp;rft.aulast=Answers.com&amp;rft.btitle=assembly+language%3A+Definition+and+Much+More+from+Answers.com&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.answers.com%2Ftopic%2Fassembly-language%3Fcat%3Dtechnology&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><span class="citation web">Provinciano, Brian. <a rel="nofollow" class="external text" href="http://neshla.sourceforge.net/">"NESHLA: The High Level, Open Source, 6502 Assembler for the Nintendo Entertainment System"</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aufirst=Brian&amp;rft.aulast=Provinciano&amp;rft.au=Provinciano%2C+Brian&amp;rft.btitle=NESHLA%3A+The+High+Level%2C+Open+Source%2C+6502+Assembler+for+the+Nintendo+Entertainment+System&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fneshla.sourceforge.net%2F&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><span class="citation book">Salomon. <a rel="nofollow" class="external text" href="http://www.davidsalomon.name/assem.advertis/asl.pdf"><i>Assemblers and Loaders</i></a>. p.&#160;7<span class="reference-accessdate">. Retrieved 2012-01-17</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aulast=Salomon&amp;rft.au=Salomon&amp;rft.btitle=Assemblers+and+Loaders&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.davidsalomon.name%2Fassem.advertis%2Fasl.pdf&amp;rft.pages=7&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.columbia.edu/cu/computinghistory/650.html">"The IBM 650 Magnetic Drum Calculator"</a><span class="reference-accessdate">. Retrieved 2012-01-17</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=The+IBM+650+Magnetic+Drum+Calculator&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.columbia.edu%2Fcu%2Fcomputinghistory%2F650.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.eidolons-inn.net/tiki-index.php?page=SegaBase+Saturn">Eidolon's Inn&#160;: SegaBase Saturn</a></span></li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><span class="citation web">Jim Lawless (2004-05-21). <a rel="nofollow" class="external text" href="http://www.radiks.net/~jimbo/art/int7.htm">"Speaking with Don French&#160;: The Man Behind the French Silk Assembler Tools"</a>. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20080821105848/http://www.radiks.net/~jimbo/art/int7.htm">Archived</a> from the original on 21 August 2008<span class="reference-accessdate">. Retrieved 2008-07-25</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.au=Jim+Lawless&amp;rft.aulast=Jim+Lawless&amp;rft.btitle=Speaking+with+Don+French+%3A+The+Man+Behind+the+French+Silk+Assembler+Tools&amp;rft.date=2004-05-21&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.radiks.net%2F~jimbo%2Fart%2Fint7.htm&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-17">^</a></b></span> <span class="reference-text"><span class="citation web">Rusling, David A. <a rel="nofollow" class="external text" href="http://tldp.org/LDP/tlk/basics/sw.html">"The Linux Kernel"</a><span class="reference-accessdate">. Retrieved Mar 11, 2012</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aufirst=David+A.&amp;rft.aulast=Rusling&amp;rft.au=Rusling%2C+David+A.&amp;rft.btitle=The+Linux+Kernel&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Ftldp.org%2FLDP%2Ftlk%2Fbasics%2Fsw.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-goto-18"><span class="mw-cite-backlink">^ <a href="#cite_ref-goto_18-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-goto_18-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation news"><a rel="nofollow" class="external text" href="http://www.nytimes.com/2005/11/28/technology/28super.html?_r=1">"Writing the Fastest Code, by Hand, for Fun: A Human Computer Keeps Speeding Up Chips"</a>. New York Times, John Markoff. 2005-11-28<span class="reference-accessdate">. Retrieved 2010-03-04</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=Writing+the+Fastest+Code%2C+by+Hand%2C+for+Fun%3A+A+Human+Computer+Keeps+Speeding+Up+Chips&amp;rft.date=2005-11-28&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.nytimes.com%2F2005%2F11%2F28%2Ftechnology%2F28super.html%3F_r%3D1&amp;rft.pub=New+York+Times%2C+John+Markoff&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-bit-fild-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-bit-fild_19-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://hardwarebug.org/2010/01/30/bit-field-badness/">"Bit-field-badness"</a>. hardwarebug.org. 2010-01-30. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20100205120952/http://hardwarebug.org/2010/01/30/bit-field-badness/">Archived</a> from the original on 5 February 2010<span class="reference-accessdate">. Retrieved 2010-03-04</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=Bit-field-badness&amp;rft.date=2010-01-30&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fhardwarebug.org%2F2010%2F01%2F30%2Fbit-field-badness%2F&amp;rft.pub=hardwarebug.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-gcc-mess-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-gcc-mess_20-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://hardwarebug.org/2009/05/13/gcc-makes-a-mess/">"GCC makes a mess"</a>. HardwareBug.org. 2009-05-13. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20100316212040/http://hardwarebug.org/2009/05/13/gcc-makes-a-mess/">Archived</a> from the original on 16 March 2010<span class="reference-accessdate">. Retrieved 2010-03-04</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=GCC+makes+a+mess&amp;rft.date=2009-05-13&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fhardwarebug.org%2F2009%2F05%2F13%2Fgcc-makes-a-mess%2F&amp;rft.pub=HardwareBug.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-GreatDebate1-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-GreatDebate1_21-0">^</a></b></span> <span class="reference-text"><span class="citation web">Randall Hyde. <a rel="nofollow" class="external text" href="http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html">"The Great Debate"</a>. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20080616110102/http://webster.cs.ucr.edu/Page_TechDocs/GreatDebate/debate1.html">Archived</a> from the original on 16 June 2008<span class="reference-accessdate">. Retrieved 2008-07-03</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aulast=Randall+Hyde&amp;rft.au=Randall+Hyde&amp;rft.btitle=The+Great+Debate&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwebster.cs.ucr.edu%2FPage_TechDocs%2FGreatDebate%2Fdebate1.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-compiler-fails1-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-compiler-fails1_22-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://hardwarebug.org/2008/11/28/codesourcery-fails-again/">"Code sourcery fails again"</a>. hardwarebug.org. 2010-01-30. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20100402221204/http://hardwarebug.org/2008/11/28/codesourcery-fails-again/">Archived</a> from the original on 2 April 2010<span class="reference-accessdate">. Retrieved 2010-03-04</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=Code+sourcery+fails+again&amp;rft.date=2010-01-30&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fhardwarebug.org%2F2008%2F11%2F28%2Fcodesourcery-fails-again%2F&amp;rft.pub=hardwarebug.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-bench-23"><span class="mw-cite-backlink"><b><a href="#cite_ref-bench_23-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://eigen.tuxfamily.org/index.php?title=Benchmark-August2008">"BLAS Benchmark-August2008"</a>. eigen.tuxfamily.org. 2008-08-01<span class="reference-accessdate">. Retrieved 2010-03-04</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=BLAS+Benchmark-August2008&amp;rft.date=2008-08-01&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Feigen.tuxfamily.org%2Findex.php%3Ftitle%3DBenchmark-August2008&amp;rft.pub=eigen.tuxfamily.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-24">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://git.videolan.org/?p=x264.git;a=tree;f=common/x86;hb=HEAD">"x264.git/common/x86/dct-32.asm"</a>. git.videolan.org. 2010-09-29<span class="reference-accessdate">. Retrieved 2010-09-29</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=x264.git%2Fcommon%2Fx86%2Fdct-32.asm&amp;rft.date=2010-09-29&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fgit.videolan.org%2F%3Fp%3Dx264.git%3Ba%3Dtree%3Bf%3Dcommon%2Fx86%3Bhb%3DHEAD&amp;rft.pub=git.videolan.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-25">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://tifreakware.net/tutorials/89/a/calc/fargoii.htm">"68K Programming in Fargo II"</a>. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20080702181616/http://tifreakware.net/tutorials/89/a/calc/fargoii.htm">Archived</a> from the original on 2 July 2008<span class="reference-accessdate">. Retrieved 2008-07-03</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.btitle=68K+Programming+in+Fargo+II&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Ftifreakware.net%2Ftutorials%2F89%2Fa%2Fcalc%2Ffargoii.htm&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-26">^</a></b></span> <span class="reference-text"><span class="citation web">Hyde, Randall (1996-09-30). <a rel="nofollow" class="external text" href="http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/fwd.html">"Foreword ("Why would anyone learn this stuff?"), <i>op. cit.</i>"</a>. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20100325155048/http://www.arl.wustl.edu/~lockwood/class/cs306/books/artofasm/fwd.html">Archived</a> from the original on 25 March 2010<span class="reference-accessdate">. Retrieved 2010-03-05</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.au=Hyde%2C+Randall&amp;rft.aulast=Hyde%2C+Randall&amp;rft.btitle=Foreword+%28%22Why+would+anyone+learn+this+stuff%3F%22%29%2C+%27%27op.+cit.%27%27&amp;rft.date=1996-09-30&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.arl.wustl.edu%2F~lockwood%2Fclass%2Fcs306%2Fbooks%2Fartofasm%2Ffwd.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-27"><span class="mw-cite-backlink"><b><a href="#cite_ref-27">^</a></b></span> <span class="reference-text">Technically BAL was only the assembler for <a href="http://en.wikipedia.org/wiki/IBM_Basic_Programming_Support" title="IBM Basic Programming Support"><b>BPS</b></a>; the others were macro assemblers.</span></li>
<li id="cite_note-28"><span class="mw-cite-backlink"><b><a href="#cite_ref-28">^</a></b></span> <span class="reference-text"><span class="citation book">Stroustrup, Bjarne (1986). <i>The C++ Programming Language</i>. Addison-Wesley. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-201-12078-X" title="Special:BookSources/0-201-12078-X">0-201-12078-X</a>. "C++ was primarily designed so that the author and his friends would not have to program in assembler, C, or various modern high-level languages. [use of the term <i>assembler</i> to mean <i>assembly language</i>]"</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aufirst=Bjarne&amp;rft.aulast=Stroustrup&amp;rft.au=Stroustrup%2C+Bjarne&amp;rft.btitle=The+C%2B%2B+Programming+Language&amp;rft.date=1986&amp;rft.genre=book&amp;rft.isbn=0-201-12078-X&amp;rft.pub=Addison-Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-29">^</a></b></span> <span class="reference-text"><span class="citation web">Saxon, James; Plette, William (1962). "Programming the IBM 1401". Prentice-Hall. LoC 62-20615. [use of the term <i>assembly program</i>]</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aufirst=James&amp;rft.aulast=Saxon&amp;rft.au=Plette%2C+William&amp;rft.au=Saxon%2C+James&amp;rft.btitle=Programming+the+IBM+1401&amp;rft.date=1962&amp;rft.genre=book&amp;rft.pub=Prentice-Hall&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment">Missing or empty <code>|url=</code> (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#cite_web_url" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-30">^</a></b></span> <span class="reference-text"><span class="citation web">Microsoft Corporation. <a rel="nofollow" class="external text" href="http://flint.cs.yale.edu/cs422/doc/art-of-asm/pdf/CH08.PDF">"MASM: Directives &amp; Pseudo-Opcodes"</a><span class="reference-accessdate">. Retrieved March 19, 2011</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aulast=Microsoft+Corporation&amp;rft.au=Microsoft+Corporation&amp;rft.btitle=MASM%3A+Directives+%26+Pseudo-Opcodes&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fflint.cs.yale.edu%2Fcs422%2Fdoc%2Fart-of-asm%2Fpdf%2FCH08.PDF&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-31">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.encyclopedia.com/doc/1O11-metaassembler.html">(John Daintith, ed.) A Dictionary of Computing: "meta-assembler"</a></span></li>
<li id="cite_note-Hyde-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-Hyde_32-0">^</a></b></span> <span class="reference-text"><span class="citation web">Randall Hyde. <a rel="nofollow" class="external text" href="http://webster.cs.ucr.edu/AsmTools/WhichAsm.html">"Which Assembler is the Best?"</a>. <a rel="nofollow" class="external text" href="http://web.archive.org/web/20071018014019/http://webster.cs.ucr.edu/AsmTools/WhichAsm.html">Archived</a> from the original on 18 October 2007<span class="reference-accessdate">. Retrieved 2007-10-19</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAssembly+language&amp;rft.aulast=Randall+Hyde&amp;rft.au=Randall+Hyde&amp;rft.btitle=Which+Assembler+is+the+Best%3F&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwebster.cs.ucr.edu%2FAsmTools%2FWhichAsm.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=23" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li>Yurichev, Dennis, "An Introduction To Reverse Engineering for Beginners". Online book: <a rel="nofollow" class="external free" href="http://yurichev.com/writings/RE_for_beginners-en.pdf">http://yurichev.com/writings/RE_for_beginners-en.pdf</a></li>
<li><a rel="nofollow" class="external text" href="http://www.asmcommunity.net/book/"><i>ASM Community Book</i></a> "An online book full of helpful ASM info, tutorials and code examples" by the ASM Community</li>
<li>Jonathan Bartlett: <i><a rel="nofollow" class="external text" href="http://programminggroundup.blogspot.com/">Programming from the Ground Up</a></i>. Bartlett Publishing, 2004. <a href="http://en.wikipedia.org/wiki/Special:BookSources/0975283847" class="internal mw-magiclink-isbn">ISBN 0-9752838-4-7</a><br />
Also available online <a rel="nofollow" class="external text" href="http://download.savannah.gnu.org/releases-noredirect/pgubook/ProgrammingGroundUp-1-0-booksize.pdf">as PDF</a></li>
<li>Robert Britton: <i>MIPS Assembly Language Programming</i>. Prentice Hall, 2003. <a href="http://en.wikipedia.org/wiki/Special:BookSources/0131420445" class="internal mw-magiclink-isbn">ISBN 0-13-142044-5</a></li>
<li>Paul Carter: <i>PC Assembly Language</i>. Free ebook, 2001.<br />
<a rel="nofollow" class="external text" href="http://drpaulcarter.com/pcasm/">Website</a></li>
<li>Jeff Duntemann: <i>Assembly Language Step-by-Step</i>. Wiley, 2000. <a href="http://en.wikipedia.org/wiki/Special:BookSources/0471375233" class="internal mw-magiclink-isbn">ISBN 0-471-37523-3</a></li>
<li>Randall Hyde: <i>The Art of Assembly Language</i>. No Starch Press, 2003. <a href="http://en.wikipedia.org/wiki/Special:BookSources/1886411972" class="internal mw-magiclink-isbn">ISBN 1-886411-97-2</a><br />
Draft versions <a rel="nofollow" class="external text" href="http://www.plantation-productions.com/Webster/www.artofasm.com/index.html">available online</a> as PDF and HTML</li>
<li>Peter Norton, John Socha, <i>Peter Norton's Assembly Language Book for the IBM PC</i>, Brady Books, NY: 1986.</li>
<li>Michael Singer, <i>PDP-11. Assembler Language Programming and Machine Organization</i>, John Wiley &amp; Sons, NY: 1980.</li>
<li>Dominic Sweetman: <i>See MIPS Run</i>. Morgan Kaufmann Publishers, 1999. <a href="http://en.wikipedia.org/wiki/Special:BookSources/1558604103" class="internal mw-magiclink-isbn">ISBN 1-55860-410-3</a></li>
<li>John Waldron: <i>Introduction to RISC Assembly Language Programming</i>. Addison Wesley, 1998. <a href="http://en.wikipedia.org/wiki/Special:BookSources/0201398281" class="internal mw-magiclink-isbn">ISBN 0-201-39828-1</a></li>
</ul>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit&amp;section=24" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/37px-Wiktionary-logo-en.svg.png" width="37" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/55px-Wiktionary-logo-en.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/73px-Wiktionary-logo-en.svg.png 2x" /></td>
<td class="mbox-text plainlist" style="">Look up <i><b><a href="http://en.wiktionary.org/wiki/assembly_language" class="extiw" title="wiktionary:assembly language">assembly language</a></b></i> in Wiktionary, the free dictionary.</td>
</tr>
</table>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x" /></td>
<td class="mbox-text plainlist" style="">Wikibooks has a book on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Subject:Assembly_languages" class="extiw" title="wikibooks:Subject:Assembly languages">Subject:Assembly languages</a></b></i></td>
</tr>
</table>
<ul>
<li><a rel="nofollow" class="external text" href="http://www.atariarchives.org/mlb/introduction.php">Machine language for beginners</a></li>
<li><a rel="nofollow" class="external text" href="http://www.asmcommunity.net/">The ASM Community</a>, a programming resource about assembly.</li>
<li><a rel="nofollow" class="external text" href="http://www.int80h.org/">Unix Assembly Language Programming</a></li>
<li><a rel="nofollow" class="external text" href="http://asm.sourceforge.net/">Linux Assembly</a></li>
<li><a rel="nofollow" class="external text" href="http://www-03.ibm.com/systems/z/os/zos/bkserv/r8pdf/index.html#hlasm">IBM High Level Assembler</a> IBM manuals on mainframe assembler language.</li>
<li><a rel="nofollow" class="external text" href="http://c2.com/cgi/wiki?LearningAssemblyLanguage">PPR: Learning Assembly Language</a></li>
<li><a rel="nofollow" class="external text" href="http://www.nasm.us/">NASM - The Netwide Assembler (a popular assembly language)</a></li>
<li><a rel="nofollow" class="external text" href="http://www.azillionmonkeys.com/qed/asmexample.html">Assembly Language Programming Examples</a></li>
<li><a rel="nofollow" class="external text" href="http://www.grc.com/smgassembly.htm">Authoring Windows Applications In Assembly Language</a></li>
<li><a rel="nofollow" class="external text" href="https://web.archive.org/web/*/http://win32assembly.online.fr/tutorials.html">Iczelion's Win32 Assembly Tutorial</a> at the <a href="http://en.wikipedia.org/wiki/Wayback_Machine" title="Wayback Machine">Wayback Machine</a></li>
<li><a rel="nofollow" class="external text" href="http://mark.masmcode.com/">Assembly Optimization Tips</a> by Mark Larson</li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:Types_of_programming_languages" title="Template:Types of programming languages"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:Types_of_programming_languages" title="Template talk:Types of programming languages"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Types_of_programming_languages&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="Programming_paradigm.html" title="Programming paradigm">Types of programming languages</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td colspan="2" class="navbox-list navbox-odd hlist" style="width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Array_programming" title="Array programming">Array</a></li>
<li><a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">Aspect-oriented</a></li>
<li><a href="http://en.wikipedia.org/wiki/Class-based_programming" title="Class-based programming">Class-based</a></li>
<li><a href="http://en.wikipedia.org/wiki/Concatenative_programming_language" title="Concatenative programming language">Concatenative</a></li>
<li><a href="http://en.wikipedia.org/wiki/Concurrent_computing" title="Concurrent computing">Concurrent</a></li>
<li><a href="http://en.wikipedia.org/wiki/Data-structured_language" title="Data-structured language">Data-structured</a></li>
<li><a href="http://en.wikipedia.org/wiki/Dataflow_programming" title="Dataflow programming">Dataflow</a></li>
<li><a href="http://en.wikipedia.org/wiki/Declarative_programming" title="Declarative programming">Declarative</a></li>
<li><a href="http://en.wikipedia.org/wiki/Domain-specific_language" title="Domain-specific language">Domain-specific</a></li>
<li><a href="http://en.wikipedia.org/wiki/Dynamic_programming_language" title="Dynamic programming language">Dynamic</a></li>
<li><a href="http://en.wikipedia.org/wiki/Esoteric_programming_language" title="Esoteric programming language">Esoteric</a></li>
<li><a href="http://en.wikipedia.org/wiki/Event-driven_programming" title="Event-driven programming">Event-driven</a></li>
<li><a href="http://en.wikipedia.org/wiki/Extensible_programming" title="Extensible programming">Extensible</a></li>
<li><a href="Functional_programming.html" title="Functional programming">Functional</a></li>
<li><a href="Imperative_programming.html" title="Imperative programming">Imperative</a></li>
<li><a href="Logic_programming.html" title="Logic programming">Logic</a></li>
<li><a href="http://en.wikipedia.org/wiki/Macro_(computer_science)" title="Macro (computer science)">Macro</a></li>
<li><a href="http://en.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">Metaprogramming</a></li>
<li><a href="http://en.wikipedia.org/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language" class="mw-redirect">Multi-paradigm</a></li>
<li><a href="http://en.wikipedia.org/wiki/Object-based_language" title="Object-based language">Object-based</a></li>
<li><a href="Object-oriented_programming.html" title="Object-oriented programming">Object-oriented</a></li>
<li><a href="http://en.wikipedia.org/wiki/Pipeline_programming" title="Pipeline programming" class="mw-redirect">Pipeline</a></li>
<li><a href="Procedural_programming.html" title="Procedural programming">Procedural</a></li>
<li><a href="http://en.wikipedia.org/wiki/Prototype-based_programming" title="Prototype-based programming">Prototype-based</a></li>
<li><a href="http://en.wikipedia.org/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">Reflective</a></li>
<li><a href="http://en.wikipedia.org/wiki/Rule-based_system" title="Rule-based system">Rule-based</a></li>
<li><a href="http://en.wikipedia.org/wiki/Scripting_language" title="Scripting language">Scripting</a></li>
<li><a href="http://en.wikipedia.org/wiki/Synchronous_programming_language" title="Synchronous programming language">Synchronous</a></li>
<li><a href="http://en.wikipedia.org/wiki/Templating_language" title="Templating language" class="mw-redirect">Templating</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td colspan="2" class="navbox-list navbox-even hlist" style="width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><strong class="selflink">Assembly</strong></li>
<li><a href="http://en.wikipedia.org/wiki/Compiled_language" title="Compiled language">Compiled</a></li>
<li><a href="Interpreted_language.html" title="Interpreted language">Interpreted</a></li>
<li><a href="http://en.wikipedia.org/wiki/Machine_code" title="Machine code">Machine</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td colspan="2" class="navbox-list navbox-odd hlist" style="width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Low-level_programming_language" title="Low-level programming language">Low-level</a></li>
<li><a href="High-level_programming_language.html" title="High-level programming language">High-level</a></li>
<li><a href="http://en.wikipedia.org/wiki/Very_high-level_programming_language" title="Very high-level programming language">Very high-level</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td colspan="2" class="navbox-list navbox-even hlist" style="width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Non-English-based_programming_languages.html" title="Non-English-based programming languages">Non-English-based</a></li>
<li><a href="http://en.wikipedia.org/wiki/Off-side_rule" title="Off-side rule">Off-side rule</a></li>
<li><a href="http://en.wikipedia.org/wiki/Visual_programming_language" title="Visual programming language">Visual</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1032
CPU time usage: 1.952 seconds
Real time usage: 2.049 seconds
Preprocessor visited node count: 2892/1000000
Preprocessor generated node count: 9489/1500000
Post‐expand include size: 64482/2048000 bytes
Template argument size: 4890/2048000 bytes
Highest expansion depth: 11/40
Expensive parser function count: 8/500
Lua time usage: 0.215/10.000 seconds
Lua memory usage: 3.26 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1368-0!*!0!!en!4!* and timestamp 20140325134612
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;oldid=599041479">http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;oldid=599041479</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Assembly_languages" title="Category:Assembly languages">Assembly languages</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Assemblers" title="Category:Assemblers">Assemblers</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Programming_language_implementation" title="Category:Programming language implementation">Programming language implementation</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Pages_using_web_citations_with_no_URL" title="Category:Pages using web citations with no URL">Pages using web citations with no URL</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_November_2011" title="Category:Articles with unsourced statements from November 2011">Articles with unsourced statements from November 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_January_2009" title="Category:Articles with unsourced statements from January 2009">Articles with unsourced statements from January 2009</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_February_2007" title="Category:Articles with unsourced statements from February 2007">Articles with unsourced statements from February 2007</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_January_2011" title="Category:Articles with unsourced statements from January 2011">Articles with unsourced statements from January 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_March_2012" title="Category:Articles with unsourced statements from March 2012">Articles with unsourced statements from March 2012</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_March_2011" title="Category:Articles with unsourced statements from March 2011">Articles with unsourced statements from March 2011</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Assembly+language&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Assembly+language" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Assembly_language.html"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Assembly_language"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Assembly_language.html" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Assembly_language" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Assembly_language" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;oldid=599041479" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q165436" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Assembly_language&amp;id=599041479" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Assembly+language">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Assembly+language&amp;oldid=599041479&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Assembly_language&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-ar"><a href="http://ar.wikipedia.org/wiki/لغة_تجميع" title="لغة تجميع – Arabic" lang="ar" hreflang="ar">العربية</a></li>
			<li class="interlanguage-link interwiki-az"><a href="http://az.wikipedia.org/wiki/Assembler_(proqramlaşdırma_dili)" title="Assembler (proqramlaşdırma dili) – Azerbaijani" lang="az" hreflang="az">Azərbaycanca</a></li>
			<li class="interlanguage-link interwiki-bn"><a href="http://bn.wikipedia.org/wiki/অ্যাসেম্বলি_ভাষা" title="অ্যাসেম্বলি ভাষা – Bengali" lang="bn" hreflang="bn">বাংলা</a></li>
			<li class="interlanguage-link interwiki-be-x-old"><a href="http://be-x-old.wikipedia.org/wiki/Мова_асэмблера" title="Мова асэмблера – беларуская (тарашкевіца)‎" lang="be-x-old" hreflang="be-x-old">Беларуская (тарашкевіца)‎</a></li>
			<li class="interlanguage-link interwiki-bg"><a href="http://bg.wikipedia.org/wiki/Асемблер" title="Асемблер – Bulgarian" lang="bg" hreflang="bg">Български</a></li>
			<li class="interlanguage-link interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Assembler" title="Assembler – Bosnian" lang="bs" hreflang="bs">Bosanski</a></li>
			<li class="interlanguage-link interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Llenguatge_assemblador" title="Llenguatge assemblador – Catalan" lang="ca" hreflang="ca">Català</a></li>
			<li class="interlanguage-link interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Jazyk_symbolických_adres" title="Jazyk symbolických adres – Czech" lang="cs" hreflang="cs">Čeština</a></li>
			<li class="interlanguage-link interwiki-da"><a href="http://da.wikipedia.org/wiki/Assemblersprog" title="Assemblersprog – Danish" lang="da" hreflang="da">Dansk</a></li>
			<li class="interlanguage-link interwiki-de"><a href="http://de.wikipedia.org/wiki/Assemblersprache" title="Assemblersprache – German" lang="de" hreflang="de">Deutsch</a></li>
			<li class="interlanguage-link interwiki-et"><a href="http://et.wikipedia.org/wiki/Assemblerkeel" title="Assemblerkeel – Estonian" lang="et" hreflang="et">Eesti</a></li>
			<li class="interlanguage-link interwiki-el"><a href="http://el.wikipedia.org/wiki/Assembly_(γλώσσα_προγραμματισμού)" title="Assembly (γλώσσα προγραμματισμού) – Greek" lang="el" hreflang="el">Ελληνικά</a></li>
			<li class="interlanguage-link interwiki-es"><a href="http://es.wikipedia.org/wiki/Lenguaje_ensamblador" title="Lenguaje ensamblador – Spanish" lang="es" hreflang="es">Español</a></li>
			<li class="interlanguage-link interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Asembla_lingvo" title="Asembla lingvo – Esperanto" lang="eo" hreflang="eo">Esperanto</a></li>
			<li class="interlanguage-link interwiki-eu"><a href="http://eu.wikipedia.org/wiki/Mihiztadura-lengoaia" title="Mihiztadura-lengoaia – Basque" lang="eu" hreflang="eu">Euskara</a></li>
			<li class="interlanguage-link interwiki-fa"><a href="http://fa.wikipedia.org/wiki/زبان_اسمبلی" title="زبان اسمبلی – Persian" lang="fa" hreflang="fa">فارسی</a></li>
			<li class="interlanguage-link interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Assembleur" title="Assembleur – French" lang="fr" hreflang="fr">Français</a></li>
			<li class="interlanguage-link interwiki-ga"><a href="http://ga.wikipedia.org/wiki/Teanga_díolama" title="Teanga díolama – Irish" lang="ga" hreflang="ga">Gaeilge</a></li>
			<li class="interlanguage-link interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Linguaxe_ensambladora" title="Linguaxe ensambladora – Galician" lang="gl" hreflang="gl">Galego</a></li>
			<li class="interlanguage-link interwiki-ko"><a href="http://ko.wikipedia.org/wiki/어셈블리어" title="어셈블리어 – Korean" lang="ko" hreflang="ko">한국어</a></li>
			<li class="interlanguage-link interwiki-hi"><a href="http://hi.wikipedia.org/wiki/असेम्बली_भाषा" title="असेम्बली भाषा – Hindi" lang="hi" hreflang="hi">हिन्दी</a></li>
			<li class="interlanguage-link interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Asemblerski_jezik" title="Asemblerski jezik – Croatian" lang="hr" hreflang="hr">Hrvatski</a></li>
			<li class="interlanguage-link interwiki-id"><a href="http://id.wikipedia.org/wiki/Bahasa_rakitan" title="Bahasa rakitan – Indonesian" lang="id" hreflang="id">Bahasa Indonesia</a></li>
			<li class="interlanguage-link interwiki-is"><a href="http://is.wikipedia.org/wiki/Smalamál" title="Smalamál – Icelandic" lang="is" hreflang="is">Íslenska</a></li>
			<li class="interlanguage-link interwiki-it"><a href="http://it.wikipedia.org/wiki/Assembly" title="Assembly – Italian" lang="it" hreflang="it">Italiano</a></li>
			<li class="interlanguage-link interwiki-he"><a href="http://he.wikipedia.org/wiki/שפת_סף" title="שפת סף – Hebrew" lang="he" hreflang="he">עברית</a></li>
			<li class="interlanguage-link interwiki-ka"><a href="http://ka.wikipedia.org/wiki/ასემბლი" title="ასემბლი – Georgian" lang="ka" hreflang="ka">ქართული</a></li>
			<li class="interlanguage-link interwiki-kk"><a href="http://kk.wikipedia.org/wiki/Ассемблерлеу_тілі" title="Ассемблерлеу тілі – Kazakh" lang="kk" hreflang="kk">Қазақша</a></li>
			<li class="interlanguage-link interwiki-ku"><a href="http://ku.wikipedia.org/wiki/Assembly" title="Assembly – Kurdish" lang="ku" hreflang="ku">Kurdî</a></li>
			<li class="interlanguage-link interwiki-lv"><a href="http://lv.wikipedia.org/wiki/Asamblervaloda" title="Asamblervaloda – Latvian" lang="lv" hreflang="lv">Latviešu</a></li>
			<li class="interlanguage-link interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Asemblerio_kalba" title="Asemblerio kalba – Lithuanian" lang="lt" hreflang="lt">Lietuvių</a></li>
			<li class="interlanguage-link interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Assembly" title="Assembly – Hungarian" lang="hu" hreflang="hu">Magyar</a></li>
			<li class="interlanguage-link interwiki-ml"><a href="http://ml.wikipedia.org/wiki/അസെംബ്ലി_ഭാഷ" title="അസെംബ്ലി ഭാഷ – Malayalam" lang="ml" hreflang="ml">മലയാളം</a></li>
			<li class="interlanguage-link interwiki-ms"><a href="http://ms.wikipedia.org/wiki/Bahasa_himpunan" title="Bahasa himpunan – Malay" lang="ms" hreflang="ms">Bahasa Melayu</a></li>
			<li class="interlanguage-link interwiki-mn"><a href="http://mn.wikipedia.org/wiki/Ассемблер_хэл" title="Ассемблер хэл – Mongolian" lang="mn" hreflang="mn">Монгол</a></li>
			<li class="interlanguage-link interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Assembleertaal" title="Assembleertaal – Dutch" lang="nl" hreflang="nl">Nederlands</a></li>
			<li class="interlanguage-link interwiki-ja"><a href="http://ja.wikipedia.org/wiki/アセンブリ言語" title="アセンブリ言語 – Japanese" lang="ja" hreflang="ja">日本語</a></li>
			<li class="interlanguage-link interwiki-no"><a href="http://no.wikipedia.org/wiki/Assembler" title="Assembler – Norwegian (bokmål)" lang="no" hreflang="no">Norsk bokmål</a></li>
			<li class="interlanguage-link interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Asembler#J.C4.99zyk_asemblera" title="Asembler – Polish" lang="pl" hreflang="pl">Polski</a></li>
			<li class="interlanguage-link interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Assembly" title="Assembly – Portuguese" lang="pt" hreflang="pt">Português</a></li>
			<li class="interlanguage-link interwiki-ro"><a href="http://ro.wikipedia.org/wiki/Limbaj_de_asamblare" title="Limbaj de asamblare – Romanian" lang="ro" hreflang="ro">Română</a></li>
			<li class="interlanguage-link interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Язык_ассемблера" title="Язык ассемблера – Russian" lang="ru" hreflang="ru">Русский</a></li>
			<li class="interlanguage-link interwiki-sq"><a href="http://sq.wikipedia.org/wiki/Assembly" title="Assembly – Albanian" lang="sq" hreflang="sq">Shqip</a></li>
			<li class="interlanguage-link interwiki-si"><a href="http://si.wikipedia.org/wiki/ඇසෙම්බ්ලි_භාෂාව" title="ඇසෙම්බ්ලි භාෂාව – Sinhala" lang="si" hreflang="si">සිංහල</a></li>
			<li class="interlanguage-link interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Assembly_language" title="Assembly language – Simple English" lang="simple" hreflang="simple">Simple English</a></li>
			<li class="interlanguage-link interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Jazyk_symbolických_inštrukcií" title="Jazyk symbolických inštrukcií – Slovak" lang="sk" hreflang="sk">Slovenčina</a></li>
			<li class="interlanguage-link interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Zbirni_jezik" title="Zbirni jezik – Slovenian" lang="sl" hreflang="sl">Slovenščina</a></li>
			<li class="interlanguage-link interwiki-sr"><a href="http://sr.wikipedia.org/wiki/Асемблер" title="Асемблер – Serbian" lang="sr" hreflang="sr">Српски / srpski</a></li>
			<li class="interlanguage-link interwiki-sh"><a href="http://sh.wikipedia.org/wiki/Asemblerski_jezik" title="Asemblerski jezik – Serbo-Croatian" lang="sh" hreflang="sh">Srpskohrvatski / српскохрватски</a></li>
			<li class="interlanguage-link interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Assembly_(ohjelmointikieli)" title="Assembly (ohjelmointikieli) – Finnish" lang="fi" hreflang="fi">Suomi</a></li>
			<li class="interlanguage-link interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Assembler" title="Assembler – Swedish" lang="sv" hreflang="sv">Svenska</a></li>
			<li class="interlanguage-link interwiki-th"><a href="http://th.wikipedia.org/wiki/ภาษาแอสเซมบลี" title="ภาษาแอสเซมบลี – Thai" lang="th" hreflang="th">ไทย</a></li>
			<li class="interlanguage-link interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Çevirici_diller" title="Çevirici diller – Turkish" lang="tr" hreflang="tr">Türkçe</a></li>
			<li class="interlanguage-link interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Мова_асемблера" title="Мова асемблера – Ukrainian" lang="uk" hreflang="uk">Українська</a></li>
			<li class="interlanguage-link interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Hợp_ngữ" title="Hợp ngữ – Vietnamese" lang="vi" hreflang="vi">Tiếng Việt</a></li>
			<li class="interlanguage-link interwiki-zh"><a href="http://zh.wikipedia.org/wiki/汇编语言" title="汇编语言 – Chinese" lang="zh" hreflang="zh">中文</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q165436#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 10 March 2014 at 21:19.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Assembly_language" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf18/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["ext.cite","mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.wikimediaShopLink.core","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1087 in 0.277 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Assembly_language by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:56:46 GMT -->
</html>
