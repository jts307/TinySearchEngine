http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Lisp_(programming_language).html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Lisp_(programming_language) by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:58:25 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Lisp (programming language) - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf18" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Lisp_(programming_language)" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="Lisp_(programming_language).html" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.rtlcite%2Cwikihiero%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Lisp_(programming_language)","wgTitle":"Lisp (programming language)","wgCurRevisionId":600841667,"wgRevisionId":600841667,"wgArticleId":18016,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages using citations with old-style implicit et al.","CS1 errors: dates","All articles with unsourced statements","Articles with unsourced statements from October 2010","Articles with unsourced statements from May 2011","Articles with unsourced statements from March 2010","All accuracy disputes","Articles with disputed statements from April 2013","Articles with unsourced statements from November 2008","Pages containing cite templates with deprecated parameters","All articles with dead external links","Articles with dead external links from May 2013","Articles with Open Directory Project links","1958 in computer science","Academic programming languages","American inventions","Articles with example Lisp code","Dynamically typed programming languages","Functional languages","Lisp programming language","Lisp programming language family","Programming languages created in 1958","Programming languages created in the 1950s","Extensible syntax programming languages"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Lisp_(programming_language)","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf18/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["en-gb"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q132874"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-enable-mwmath":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":
false,"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:0378eace27e3aee431624f77f4809281 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-lisp {line-height: normal;}
.source-lisp li, .source-lisp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for lisp
 * CSS class: source-lisp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.lisp.source-lisp .de1, .lisp.source-lisp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.lisp.source-lisp  {font-family:monospace;}
.lisp.source-lisp .imp {font-weight: bold; color: red;}
.lisp.source-lisp li, .lisp.source-lisp .li1 {font-weight: normal; vertical-align:top;}
.lisp.source-lisp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.lisp.source-lisp .li2 {font-weight: bold; vertical-align:top;}
.lisp.source-lisp .kw1 {color: #b1b100;}
.lisp.source-lisp .co1 {color: #808080; font-style: italic;}
.lisp.source-lisp .coMULTI {color: #808080; font-style: italic;}
.lisp.source-lisp .es0 {color: #000099; font-weight: bold;}
.lisp.source-lisp .br0 {color: #66cc66;}
.lisp.source-lisp .sy0 {color: #66cc66;}
.lisp.source-lisp .st0 {color: #ff0000;}
.lisp.source-lisp .nu0 {color: #cc66cc;}
.lisp.source-lisp .me0 {color: #555;}
.lisp.source-lisp .me1 {color: #555;}
.lisp.source-lisp .ln-xtra, .lisp.source-lisp li.ln-xtra, .lisp.source-lisp div.ln-xtra {background-color: #ffc;}
.lisp.source-lisp span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf18/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Lisp_programming_language skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Lisp (programming language)</span></h1>
			<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="dablink">"LISP" redirects here. For the Internet protocol, see <a href="http://en.wikipedia.org/wiki/Locator/Identifier_Separation_Protocol" title="Locator/Identifier Separation Protocol">Locator/Identifier Separation Protocol</a>.  For Lisp, see <a href="http://en.wikipedia.org/wiki/Lisp_(disambiguation)" title="Lisp (disambiguation)">Lisp (disambiguation)</a>.</div>
<table class="infobox vevent" cellspacing="3" style="border-spacing:3px;width:22em;">
<caption class="summary">Lisp</caption>
<tr>
<th scope="row" style="text-align:left;"><a href="Programming_paradigm.html" title="Programming paradigm">Paradigm(s)</a></th>
<td><a href="http://en.wikipedia.org/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language" class="mw-redirect">Multi-paradigm</a>: <a href="Functional_programming.html" title="Functional programming">functional</a>, <a href="Procedural_programming.html" title="Procedural programming">procedural</a>, <a href="http://en.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflective</a>, <a href="http://en.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">meta</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Software_design.html" title="Software design">Designed by</a></th>
<td><a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Software_developer.html" title="Software developer">Developer</a></th>
<td class="organiser"><a href="http://en.wikipedia.org/wiki/Steve_Russell" title="Steve Russell">Steve Russell</a>, Timothy P. Hart, and Mike Levin</td>
</tr>
<tr>
<th scope="row" style="text-align:left;">Appeared in</th>
<td>1958</td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Type_system.html" title="Type system">Typing discipline</a></th>
<td><a href="Type_system.html" title="Type system">Dynamic</a>, <a href="http://en.wikipedia.org/wiki/Strongly_typed_programming_language" title="Strongly typed programming language" class="mw-redirect">strong</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Dialect_(computing).html" title="Dialect (computing)">Dialects</a></th>
<td><a href="http://en.wikipedia.org/wiki/Arc_(programming_language)" title="Arc (programming language)">Arc</a>, <a href="http://en.wikipedia.org/wiki/AutoLISP" title="AutoLISP">AutoLISP</a>, <a href="http://en.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, <a href="http://en.wikipedia.org/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a>, <a href="http://en.wikipedia.org/wiki/EuLisp" title="EuLisp">EuLisp</a>, <a href="http://en.wikipedia.org/wiki/Franz_Lisp" title="Franz Lisp">Franz Lisp</a>, <a href="http://en.wikipedia.org/wiki/Interlisp" title="Interlisp">Interlisp</a>, <a href="http://en.wikipedia.org/wiki/ISLISP" title="ISLISP">ISLISP</a>, <a href="http://en.wikipedia.org/wiki/LeLisp" title="LeLisp" class="mw-redirect">LeLisp</a>, <a href="http://en.wikipedia.org/wiki/LFE_(programming_language)" title="LFE (programming language)">LFE</a>, <a href="http://en.wikipedia.org/wiki/Maclisp" title="Maclisp">Maclisp</a>, <a href="http://en.wikipedia.org/wiki/MDL_(programming_language)" title="MDL (programming language)">MDL</a>, <a href="http://en.wikipedia.org/wiki/Newlisp" title="Newlisp" class="mw-redirect">Newlisp</a>, <a href="http://en.wikipedia.org/wiki/NIL_(programming_language)" title="NIL (programming language)">NIL</a>, <a href="http://en.wikipedia.org/wiki/Picolisp" title="Picolisp">Picolisp</a>, <a href="http://en.wikipedia.org/wiki/Portable_Standard_Lisp" title="Portable Standard Lisp">Portable Standard Lisp</a>, <a href="http://en.wikipedia.org/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a>, <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, <a href="http://en.wikipedia.org/wiki/Cadence_SKILL" title="Cadence SKILL">SKILL</a>, <a href="http://en.wikipedia.org/wiki/Spice_Lisp" title="Spice Lisp">Spice Lisp</a>, <a href="http://en.wikipedia.org/wiki/T_(programming_language)" title="T (programming language)">T</a>, <a href="http://en.wikipedia.org/wiki/XLISP" title="XLISP">XLISP</a>, <a href="http://en.wikipedia.org/wiki/Zetalisp" title="Zetalisp" class="mw-redirect">Zetalisp</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;">Influenced by</th>
<td><a href="Information_Processing_Language.html" title="Information Processing Language">IPL</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;">Influenced</th>
<td><a href="http://en.wikipedia.org/wiki/CLIPS" title="CLIPS">CLIPS</a>, <a href="http://en.wikipedia.org/wiki/CLU_(programming_language)" title="CLU (programming language)">CLU</a>, <a href="http://en.wikipedia.org/wiki/COWSEL" title="COWSEL">COWSEL</a>, <a href="http://en.wikipedia.org/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a>, <a href="http://en.wikipedia.org/wiki/Falcon_(programming_language)" title="Falcon (programming language)">Falcon</a>, <a href="http://en.wikipedia.org/wiki/Forth_(programming_language)" title="Forth (programming language)">Forth</a>, <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="http://en.wikipedia.org/wiki/Io_(programming_language)" title="Io (programming language)">Io</a>, <a href="http://en.wikipedia.org/wiki/Ioke_(programming_language)" title="Ioke (programming language)">Ioke</a>, <a href="JavaScript.html" title="JavaScript">JavaScript</a>, <a href="http://en.wikipedia.org/wiki/Julia_(programming_language)" title="Julia (programming language)">Julia</a>, <a href="http://en.wikipedia.org/wiki/Logo_(programming_language)" title="Logo (programming language)">Logo</a>, <a href="http://en.wikipedia.org/wiki/Lua_(programming_language)" title="Lua (programming language)">Lua</a>, <a href="http://en.wikipedia.org/wiki/Mathematica" title="Mathematica">Mathematica</a>, <a href="http://en.wikipedia.org/wiki/MDL_(programming_language)" title="MDL (programming language)">MDL</a>, <a href="http://en.wikipedia.org/wiki/ML_(programming_language)" title="ML (programming language)">ML</a>, <a href="http://en.wikipedia.org/wiki/Nu_(programming_language)" title="Nu (programming language)">Nu</a>, <a href="http://en.wikipedia.org/wiki/OPS5" title="OPS5">OPS5</a>, <a href="Perl.html" title="Perl">Perl</a>, <a href="http://en.wikipedia.org/wiki/POP-2" title="POP-2">POP-2</a>/<a href="http://en.wikipedia.org/wiki/POP-11" title="POP-11">11</a>, <a href="Python_(programming_language).html" title="Python (programming language)">Python</a>, <a href="http://en.wikipedia.org/wiki/Qi_(programming_language)" title="Qi (programming language)">Qi</a>, <a href="http://en.wikipedia.org/wiki/R_(programming_language)" title="R (programming language)">R</a>, <a href="http://en.wikipedia.org/wiki/Shen_(programming_language)" title="Shen (programming language)">Shen</a>, <a href="http://en.wikipedia.org/wiki/Rebol" title="Rebol">Rebol</a>, <a href="http://en.wikipedia.org/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a>, <a href="Ruby_(programming_language).html" title="Ruby (programming language)">Ruby</a>, <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a>, <a href="http://en.wikipedia.org/wiki/Tcl" title="Tcl">Tcl</a></td>
</tr>
</table>
<p><b>Lisp</b> (historically, <b>LISP</b>) is a family of <a href="Computer.html" title="Computer">computer</a> <a href="Programming_language.html" title="Programming language">programming languages</a> with a long history and a distinctive, fully parenthesized <a href="http://en.wikipedia.org/wiki/Polish_notation" title="Polish notation">Polish prefix</a> notation.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>1<span>]</span></a></sup> Originally specified in 1958, Lisp is the second-oldest <a href="High-level_programming_language.html" title="High-level programming language">high-level programming language</a> in widespread use today; only <a href="Fortran-2.html" title="Fortran">Fortran</a> is older (by one year). Like Fortran, Lisp has changed a great deal since its early days, and a number of <a href="http://en.wikipedia.org/wiki/Programming_language_dialect" title="Programming language dialect" class="mw-redirect">dialects</a> have existed over its history. Today, the most widely known general-purpose Lisp dialects are <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> and <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>.</p>
<p>Lisp was originally created as a practical mathematical notation for computer programs, influenced by the notation of <a href="http://en.wikipedia.org/wiki/Alonzo_Church" title="Alonzo Church">Alonzo Church</a>'s <a href="http://en.wikipedia.org/wiki/Lambda_calculus" title="Lambda calculus">lambda calculus</a>. It quickly became the favored programming language for <a href="Artificial_intelligence.html" title="Artificial intelligence">artificial intelligence</a> (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in <a href="Computer_science.html" title="Computer science">computer science</a>, including <a href="http://en.wikipedia.org/wiki/Tree_data_structure" title="Tree data structure" class="mw-redirect">tree data structures</a>, <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">automatic storage management</a>, <a href="http://en.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a>, <a href="http://en.wikipedia.org/wiki/Conditional_(computer_programming)" title="Conditional (computer programming)">conditionals</a>, <a href="Higher-order_function.html" title="Higher-order function">higher-order functions</a>, <a href="Recursion.html" title="Recursion">recursion</a>, and the <a href="http://en.wikipedia.org/wiki/Self-hosting" title="Self-hosting">self-hosting</a> <a href="Compiler.html" title="Compiler">compiler</a>.<sup id="cite_ref-GRAHAM_2-0" class="reference"><a href="#cite_note-GRAHAM-2"><span>[</span>2<span>]</span></a></sup></p>
<p>The name <i>LISP</i> derives from "LISt Processing". <a href="Linked_list.html" title="Linked list">Linked lists</a> are one of Lisp language's major <a href="Data_structure.html" title="Data structure">data structures</a>, and Lisp <a href="Source_code.html" title="Source code">source code</a> is itself made up of lists. As a result, Lisp programs can manipulate source code as a data structure, giving rise to the <a href="http://en.wikipedia.org/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> systems that allow programmers to create new syntax or even new <a href="http://en.wikipedia.org/wiki/Domain-specific_language" title="Domain-specific language">domain-specific languages</a> embedded in Lisp.</p>
<p>The interchangeability of code and data also gives Lisp its instantly recognizable syntax. All program code is written as <i><a href="S-expression.html" title="S-expression">s-expressions</a></i>, or parenthesized lists. A function call or syntactic form is written as a list with the function or operator's name first, and the arguments following; for instance, a function f that takes three arguments might be called using <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>f arg1 arg2 arg3<span class="br0">)</span></span>.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Connection_to_artificial_intelligence"><span class="tocnumber">1.1</span> <span class="toctext">Connection to artificial intelligence</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Genealogy_and_variants"><span class="tocnumber">1.2</span> <span class="toctext">Genealogy and variants</span></a>
<ul>
<li class="toclevel-3 tocsection-4"><a href="#Historically_significant_dialects"><span class="tocnumber">1.2.1</span> <span class="toctext">Historically significant dialects</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-5"><a href="#2000-present"><span class="tocnumber">1.3</span> <span class="toctext">2000-present</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-6"><a href="#Major_dialects"><span class="tocnumber">2</span> <span class="toctext">Major dialects</span></a></li>
<li class="toclevel-1 tocsection-7"><a href="#Language_innovations"><span class="tocnumber">3</span> <span class="toctext">Language innovations</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Syntax_and_semantics"><span class="tocnumber">4</span> <span class="toctext">Syntax and semantics</span></a>
<ul>
<li class="toclevel-2 tocsection-9"><a href="#Symbolic_expressions_.28S-expressions.29"><span class="tocnumber">4.1</span> <span class="toctext">Symbolic expressions (S-expressions)</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Lists"><span class="tocnumber">4.2</span> <span class="toctext">Lists</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Operators"><span class="tocnumber">4.3</span> <span class="toctext">Operators</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="#Lambda_expressions_and_function_definition"><span class="tocnumber">4.4</span> <span class="toctext">Lambda expressions and function definition</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="#Atoms"><span class="tocnumber">4.5</span> <span class="toctext">Atoms</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="#Conses_and_lists"><span class="tocnumber">4.6</span> <span class="toctext">Conses and lists</span></a>
<ul>
<li class="toclevel-3 tocsection-15"><a href="#S-expressions_represent_lists"><span class="tocnumber">4.6.1</span> <span class="toctext">S-expressions represent lists</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#List-processing_procedures"><span class="tocnumber">4.6.2</span> <span class="toctext">List-processing procedures</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="#Shared_structure"><span class="tocnumber">4.6.3</span> <span class="toctext">Shared structure</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-18"><a href="#Self-evaluating_forms_and_quoting"><span class="tocnumber">4.7</span> <span class="toctext">Self-evaluating forms and quoting</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#Scope_and_closure"><span class="tocnumber">4.8</span> <span class="toctext">Scope and closure</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#List_structure_of_program_code.3B_exploitation_by_macros_and_compilers"><span class="tocnumber">4.9</span> <span class="toctext">List structure of program code; exploitation by macros and compilers</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#Evaluation_and_the_read.E2.80.93eval.E2.80.93print_loop"><span class="tocnumber">4.10</span> <span class="toctext">Evaluation and the read–eval–print loop</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#Control_structures"><span class="tocnumber">4.11</span> <span class="toctext">Control structures</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-23"><a href="#Examples"><span class="tocnumber">5</span> <span class="toctext">Examples</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="#Object_systems"><span class="tocnumber">6</span> <span class="toctext">Object systems</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1 tocsection-28"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=1" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="thumb tleft" style="width: 212px;">
<div class="thumbinner">
<div style="margin: 1px; width: 202px">
<div class="thumbimage"><a href="http://en.wikipedia.org/wiki/File:John_McCarthy_Stanford.jpg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/49/John_McCarthy_Stanford.jpg/200px-John_McCarthy_Stanford.jpg" width="200" height="133" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/49/John_McCarthy_Stanford.jpg/300px-John_McCarthy_Stanford.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/49/John_McCarthy_Stanford.jpg/400px-John_McCarthy_Stanford.jpg 2x" /></a></div>
</div>
<div style="margin: 1px; width: 202px">
<div class="thumbimage"><a href="http://en.wikipedia.org/wiki/File:Steve_Russell.jpg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Steve_Russell.jpg/200px-Steve_Russell.jpg" width="200" height="331" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Steve_Russell.jpg/300px-Steve_Russell.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/7b/Steve_Russell.jpg/400px-Steve_Russell.jpg 2x" /></a></div>
</div>
<div class="thumbcaption" style="clear: left; text-align: left; background: transparent">John McCarthy and Steve Russell</div>
</div>
</div>
<p>Lisp was invented by <a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a> in 1958 while he was at the <a href="http://en.wikipedia.org/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">Massachusetts Institute of Technology</a> (MIT). McCarthy published its design in a paper in <i><a href="Communications_of_the_ACM.html" title="Communications of the ACM">Communications of the ACM</a></i> in 1960, entitled "Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I"<sup id="cite_ref-MCCARTHY_3-0" class="reference"><a href="#cite_note-MCCARTHY-3"><span>[</span>3<span>]</span></a></sup> ("Part II" was never published). He showed that with a few simple operators and a notation for functions, one can build a <a href="http://en.wikipedia.org/wiki/Turing-complete" title="Turing-complete" class="mw-redirect">Turing-complete</a> language for algorithms.</p>
<p><a href="Information_Processing_Language.html" title="Information Processing Language">Information Processing Language</a> was the first AI language, from 1955 or 1956, and already included many of the concepts, such as list-processing and recursion, which came to be used in Lisp.</p>
<p>McCarthy's original notation used bracketed "<a href="http://en.wikipedia.org/wiki/M-expression" title="M-expression">M-expressions</a>" that would be translated into <a href="S-expression.html" title="S-expression">S-expressions</a>. As an example, the M-expression <span class="mw-geshi lisp source-lisp">car[cons[A,B]]</span> is equivalent to the S-expression <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="kw1">car</span> <span class="br0">(</span><span class="kw1">cons</span> A B<span class="br0">)</span><span class="br0">)</span></span>. Once Lisp was implemented, programmers rapidly chose to use S-expressions, and M-expressions were abandoned. M-expressions surfaced again with short-lived attempts of <a href="http://en.wikipedia.org/wiki/MLISP" title="MLISP" class="mw-redirect">MLISP</a><sup id="cite_ref-SMITH_4-0" class="reference"><a href="#cite_note-SMITH-4"><span>[</span>4<span>]</span></a></sup> by <a href="http://en.wikipedia.org/w/index.php?title=Horace_Enea&amp;action=edit&amp;redlink=1" class="new" title="Horace Enea (page does not exist)">Horace Enea</a> and <a href="http://en.wikipedia.org/wiki/CGOL" title="CGOL">CGOL</a> by <a href="http://en.wikipedia.org/wiki/Vaughan_Pratt" title="Vaughan Pratt">Vaughan Pratt</a>.</p>
<p>Lisp was first implemented by <a href="http://en.wikipedia.org/wiki/Steve_Russell" title="Steve Russell">Steve Russell</a> on an <a href="http://en.wikipedia.org/wiki/IBM_704" title="IBM 704">IBM 704</a> computer. Russell had read McCarthy's paper, and realized (to McCarthy's surprise) that the Lisp <i>eval</i> function could be implemented in <a href="http://en.wikipedia.org/wiki/Machine_code" title="Machine code">machine code</a>.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup> The result was a working Lisp interpreter which could be used to run Lisp programs, or more properly, 'evaluate Lisp expressions.'</p>
<p>Two assembly language macros for the <a href="http://en.wikipedia.org/wiki/IBM_704" title="IBM 704">IBM 704</a> became the primitive operations for decomposing lists: <a href="Car_and_cdr-2.html" title="Car and cdr" class="mw-redirect"><span class="mw-geshi lisp source-lisp"><span class="kw1">car</span></span></a> (Contents of the Address part of Register number) and <a href="Car_and_cdr-2.html" title="Car and cdr" class="mw-redirect"><span class="mw-geshi lisp source-lisp"><span class="kw1">cdr</span></span></a> (Contents of the Decrement part of Register number).<sup id="cite_ref-PREHISTORY_6-0" class="reference"><a href="#cite_note-PREHISTORY-6"><span>[</span>6<span>]</span></a></sup> From the context, it is clear that the term "Register" is used here to mean "Memory Register", nowadays called "Memory Location". Lisp dialects still use <span class="mw-geshi lisp source-lisp"><span class="kw1">car</span></span> and <span class="mw-geshi lisp source-lisp"><span class="kw1">cdr</span></span> (<span class="nowrap"><span title="Representation in the International Phonetic Alphabet (IPA)" class="IPA"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English" title="Help:IPA for English">/</a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="/ˈ/ primary stress follows" style="border-bottom:1px dotted">ˈ</span></a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="'k' in 'kind'" style="border-bottom:1px dotted">k</span></a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="/ɑr/ 'ar' in 'bard'" style="border-bottom:1px dotted">ɑr</span></a></span><span title="Representation in the International Phonetic Alphabet (IPA)" class="IPA"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English" title="Help:IPA for English">/</a></span></span> and <span class="nowrap"><span title="Representation in the International Phonetic Alphabet (IPA)" class="IPA"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English" title="Help:IPA for English">/</a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="/ˈ/ primary stress follows" style="border-bottom:1px dotted">ˈ</span></a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="'k' in 'kind'" style="border-bottom:1px dotted">k</span></a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="/ʊ/ short 'oo' in 'foot'" style="border-bottom:1px dotted">ʊ</span></a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="'d' in 'dye'" style="border-bottom:1px dotted">d</span></a></span><span class="IPA nopopups"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English#Key" title="Help:IPA for English"><span title="/ər/ 'er' in 'finger'" style="border-bottom:1px dotted">ər</span></a></span><span title="Representation in the International Phonetic Alphabet (IPA)" class="IPA"><a href="http://en.wikipedia.org/wiki/Help:IPA_for_English" title="Help:IPA for English">/</a></span></span>) for the operations that return the first item in a list and the rest of the list respectively.</p>
<p>The first complete Lisp compiler, written in Lisp, was implemented in 1962 by Tim Hart and Mike Levin at MIT.<sup id="cite_ref-LEVIN_7-0" class="reference"><a href="#cite_note-LEVIN-7"><span>[</span>7<span>]</span></a></sup> This compiler introduced the Lisp model of incremental compilation, in which compiled and interpreted functions can intermix freely. The language used in Hart and Levin's memo is much closer to modern Lisp style than McCarthy's earlier code.</p>
<p>Lisp was a difficult system to implement with the compiler techniques and stock hardware of the 1970s. <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">Garbage collection</a> routines, developed by then-<a href="http://en.wikipedia.org/wiki/MIT" title="MIT" class="mw-redirect">MIT</a> graduate student <a href="http://en.wikipedia.org/w/index.php?title=Daniel_Edwards_(programmer)&amp;action=edit&amp;redlink=1" class="new" title="Daniel Edwards (programmer) (page does not exist)">Daniel Edwards</a>, made it practical to run Lisp on general-purpose computing systems, but efficiency was still a problem.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (October 2010)">citation needed</span></a></i>]</sup> This led to the creation of <a href="http://en.wikipedia.org/wiki/Lisp_machine" title="Lisp machine">Lisp machines</a>: dedicated hardware for running Lisp environments and programs. Advances in both computer hardware and compiler technology soon made Lisp machines obsolete.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (May 2011)">citation needed</span></a></i>]</sup></p>
<p>During the 1980s and 1990s, a great effort was made to unify the work on new Lisp dialects (mostly successors to <a href="http://en.wikipedia.org/wiki/Maclisp" title="Maclisp">Maclisp</a> like <a href="http://en.wikipedia.org/wiki/ZetaLisp" title="ZetaLisp" class="mw-redirect">ZetaLisp</a> and NIL (New Implementation of Lisp)) into a single language. The new language, <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, was somewhat compatible with the dialects it replaced (the book <a href="http://en.wikipedia.org/wiki/Common_Lisp_the_Language" title="Common Lisp the Language">Common Lisp the Language</a> notes the compatibility of various constructs). In 1994, <a href="http://en.wikipedia.org/wiki/ANSI" title="ANSI" class="mw-redirect">ANSI</a> published the Common Lisp standard, "ANSI X3.226-1994 Information Technology Programming Language Common Lisp."</p>
<p><map name="timeline_71b23fdea3320ea89f55ced33e678ab2" id="timeline_71b23fdea3320ea89f55ced33e678ab2">
<area shape="rect" href="http://en.wikipedia.org/wiki/Clojure" coords="671,152,756,175" title="Clojure" alt="Clojure" />
<area shape="rect" href="http://en.wikipedia.org/wiki/ISLISP" coords="388,134,466,157" title="ISLISP" alt="ISLISP" />
<area shape="rect" href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" coords="239,115,317,139" title="Scheme (programming language)" alt="Scheme (programming language)" />
<area shape="rect" href="http://en.wikipedia.org/wiki/Common_Lisp" coords="361,97,472,121" title="Common Lisp" alt="Common Lisp" />
<area shape="rect" href="http://en.wikipedia.org/wiki/Interlisp" coords="172,79,270,103" title="Interlisp" alt="Interlisp" />
<area shape="rect" href="http://en.wikipedia.org/wiki/NIL_(programming_language)" coords="172,61,230,85" title="NIL (programming language)" alt="NIL (programming language)" />
<area shape="rect" href="http://en.wikipedia.org/wiki/ZetaLisp" coords="172,43,263,67" title="ZetaLisp" alt="ZetaLisp" />
<area shape="rect" href="http://en.wikipedia.org/wiki/Maclisp" coords="104,25,189,49" title="Maclisp" alt="Maclisp" /></map><img usemap="#timeline_71b23fdea3320ea89f55ced33e678ab2" src="http://upload.wikimedia.org/wikipedia/en/timeline/71b23fdea3320ea89f55ced33e678ab2.png" /></p>
<h3><span class="mw-headline" id="Connection_to_artificial_intelligence">Connection to artificial intelligence</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=2" title="Edit section: Connection to artificial intelligence">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Since its inception, Lisp was closely connected with the <a href="Artificial_intelligence.html" title="Artificial intelligence">artificial intelligence</a> research community, especially on <a href="http://en.wikipedia.org/wiki/PDP-10" title="PDP-10">PDP-10</a><sup id="cite_ref-8" class="reference"><a href="#cite_note-8"><span>[</span>8<span>]</span></a></sup> systems. Lisp was used as the implementation of the programming language <a href="http://en.wikipedia.org/wiki/Planner_programming_language" title="Planner programming language" class="mw-redirect">Micro Planner</a> which was used in the famous AI system <a href="http://en.wikipedia.org/wiki/SHRDLU" title="SHRDLU">SHRDLU</a>. In the 1970s, as AI research spawned commercial offshoots, the performance of existing Lisp systems became a growing issue.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2010)">citation needed</span></a></i>]</sup></p>
<h3><span class="mw-headline" id="Genealogy_and_variants">Genealogy and variants</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=3" title="Edit section: Genealogy and variants">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Over its fifty-year history, Lisp has spawned many variations on the core theme of an S-expression language. Moreover, each given dialect may have several implementations—for instance, there are more than a dozen implementations of <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>.</p>
<p>Differences between dialects may be quite visible—for instance, Common Lisp uses the keyword <code>defun</code> to name a function, but Scheme uses <code>define</code>.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9"><span>[</span>9<span>]</span></a></sup> Within a dialect that is standardized, however, conforming implementations support the same core language, but with different extensions and libraries.</p>
<h4><span class="mw-headline" id="Historically_significant_dialects">Historically significant dialects</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=4" title="Edit section: Historically significant dialects">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div class="thumb tright">
<div class="thumbinner" style="width:222px;"><a href="http://en.wikipedia.org/wiki/File:LISP_machine.jpg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/16/LISP_machine.jpg/220px-LISP_machine.jpg" width="220" height="291" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/16/LISP_machine.jpg/330px-LISP_machine.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/16/LISP_machine.jpg/440px-LISP_machine.jpg 2x" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="http://en.wikipedia.org/wiki/File:LISP_machine.jpg" class="internal" title="Enlarge"><img src="http://bits.wikimedia.org/static-1.23wmf18/skins/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
A Lisp machine in the <a href="http://en.wikipedia.org/wiki/MIT_Museum" title="MIT Museum">MIT Museum</a></div>
</div>
</div>
<div class="thumb tright">
<div class="thumbinner" style="width:222px;"><a href="http://en.wikipedia.org/wiki/File:4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png/220px-4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png" width="220" height="140" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png/330px-4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png/440px-4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png 2x" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="http://en.wikipedia.org/wiki/File:4.3_BSD_UWisc_VAX_Emulation_Lisp_Manual.png" class="internal" title="Enlarge"><img src="http://bits.wikimedia.org/static-1.23wmf18/skins/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
<a href="http://en.wikipedia.org/wiki/4.3BSD" title="4.3BSD" class="mw-redirect">4.3 BSD</a> from the <a href="http://en.wikipedia.org/wiki/University_of_Wisconsin" title="University of Wisconsin" class="mw-redirect">University of Wisconsin</a>, displaying the <a href="Man_page.html" title="Man page">man page</a> for <a href="http://en.wikipedia.org/wiki/Franz_Lisp" title="Franz Lisp">Franz Lisp</a></div>
</div>
</div>
<ul>
<li>LISP 1<sup id="cite_ref-10" class="reference"><a href="#cite_note-10"><span>[</span>10<span>]</span></a></sup> – First implementation.</li>
<li>LISP 1.5<sup id="cite_ref-11" class="reference"><a href="#cite_note-11"><span>[</span>11<span>]</span></a></sup> – First widely distributed version, developed by McCarthy and others at MIT. So named because it contained several improvements on the original "LISP 1" interpreter, but was not a major restructuring as the planned <a href="http://en.wikipedia.org/wiki/LISP_2" title="LISP 2">LISP 2</a> would be.</li>
<li><a href="http://en.wikipedia.org/w/index.php?title=Stanford_LISP&amp;action=edit&amp;redlink=1" class="new" title="Stanford LISP (page does not exist)">Stanford LISP</a> 1.6<sup id="cite_ref-12" class="reference"><a href="#cite_note-12"><span>[</span>12<span>]</span></a></sup> – This was a successor to LISP 1.5 developed at the <a href="http://en.wikipedia.org/wiki/Stanford_AI_Lab" title="Stanford AI Lab" class="mw-redirect">Stanford AI Lab</a>, and widely distributed to <a href="http://en.wikipedia.org/wiki/PDP-10" title="PDP-10">PDP-10</a> systems running the <a href="http://en.wikipedia.org/wiki/TOPS-10" title="TOPS-10">TOPS-10</a> operating system. It was rendered obsolete by Maclisp and InterLisp.</li>
<li><a href="http://en.wikipedia.org/wiki/Maclisp" title="Maclisp">MACLISP</a><sup id="cite_ref-13" class="reference"><a href="#cite_note-13"><span>[</span>13<span>]</span></a></sup> – developed for MIT's <a href="http://en.wikipedia.org/wiki/Project_MAC" title="Project MAC" class="mw-redirect">Project MAC</a> (no relation to Apple's <a href="http://en.wikipedia.org/wiki/Macintosh" title="Macintosh">Macintosh</a>, nor to <a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">McCarthy</a>), direct descendant of LISP 1.5. It ran on the PDP-10 and <a href="Multics.html" title="Multics">Multics</a> systems. (MACLISP would later come to be called Maclisp, and is often referred to as MacLisp.)</li>
<li><a href="http://en.wikipedia.org/wiki/InterLisp" title="InterLisp" class="mw-redirect">InterLisp</a><sup id="cite_ref-14" class="reference"><a href="#cite_note-14"><span>[</span>14<span>]</span></a></sup> – developed at <a href="http://en.wikipedia.org/wiki/BBN_Technologies" title="BBN Technologies">BBN Technologies</a> for PDP-10 systems running the <a href="http://en.wikipedia.org/wiki/TOPS-20" title="TOPS-20">Tenex</a> operating system, later adopted as a "West coast" Lisp for the Xerox Lisp machines as <a href="http://en.wikipedia.org/w/index.php?title=InterLisp-D&amp;action=edit&amp;redlink=1" class="new" title="InterLisp-D (page does not exist)">InterLisp-D</a>. A small version called "InterLISP 65" was published for <a href="http://en.wikipedia.org/wiki/Atari" title="Atari">Atari</a>'s <a href="http://en.wikipedia.org/wiki/MOS_Technology_6502" title="MOS Technology 6502">6502</a>-based computer line. For quite some time Maclisp and InterLisp were strong competitors.</li>
<li><a href="http://en.wikipedia.org/wiki/Franz_Lisp" title="Franz Lisp">Franz Lisp</a> – originally a <a href="http://en.wikipedia.org/wiki/University_of_California,_Berkeley" title="University of California, Berkeley">Berkeley</a> project; later developed by Franz Inc. The name is a humorous deformation of the name "<a href="http://en.wikipedia.org/wiki/Franz_Liszt" title="Franz Liszt">Franz Liszt</a>", and does not refer to <a href="http://en.wikipedia.org/wiki/Allegro_Common_Lisp" title="Allegro Common Lisp">Allegro Common Lisp</a>, the dialect of Common Lisp sold by Franz Inc., in more recent years.</li>
<li><a href="http://en.wikipedia.org/wiki/XLISP" title="XLISP">XLISP</a>, which <a href="http://en.wikipedia.org/wiki/AutoLISP" title="AutoLISP">AutoLISP</a> was based on.</li>
<li><a href="http://en.wikipedia.org/w/index.php?title=Standard_Lisp&amp;action=edit&amp;redlink=1" class="new" title="Standard Lisp (page does not exist)">Standard Lisp</a> and <a href="http://en.wikipedia.org/wiki/Portable_Standard_Lisp" title="Portable Standard Lisp">Portable Standard Lisp</a> were widely used and ported, especially with the Computer Algebra System REDUCE.</li>
<li><a href="http://en.wikipedia.org/wiki/ZetaLisp" title="ZetaLisp" class="mw-redirect">ZetaLisp</a>, also known as Lisp Machine Lisp – used on the <a href="http://en.wikipedia.org/wiki/Lisp_machine" title="Lisp machine">Lisp machines</a>, direct descendant of Maclisp. ZetaLisp had big influence on Common Lisp.</li>
<li><a href="http://en.wikipedia.org/wiki/LeLisp" title="LeLisp" class="mw-redirect">LeLisp</a> is a French Lisp dialect. One of the first Interface Builders was written in LeLisp.</li>
<li><a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> (1984), as described by <i><a href="http://en.wikipedia.org/wiki/Common_Lisp_the_Language" title="Common Lisp the Language">Common Lisp the Language</a></i> – a consolidation of several divergent attempts (ZetaLisp, <a href="http://en.wikipedia.org/wiki/Spice_Lisp" title="Spice Lisp">Spice Lisp</a>, <a href="http://en.wikipedia.org/wiki/NIL_(programming_language)" title="NIL (programming language)">NIL</a>, and <a href="http://en.wikipedia.org/wiki/S-1_Lisp" title="S-1 Lisp">S-1 Lisp</a>) to create successor dialects<sup id="cite_ref-15" class="reference"><a href="#cite_note-15"><span>[</span>15<span>]</span></a></sup> to Maclisp, with substantive influences from the Scheme dialect as well. This version of Common Lisp was available for wide-ranging platforms and was accepted by many as a <a href="http://en.wikipedia.org/wiki/De_facto_standard" title="De facto standard">de facto standard</a><sup id="cite_ref-16" class="reference"><a href="#cite_note-16"><span>[</span>16<span>]</span></a></sup> until the publication of ANSI Common Lisp (ANSI X3.226-1994).</li>
<li><a href="http://en.wikipedia.org/wiki/Dylan_(programming_language)" title="Dylan (programming language)">Dylan</a> was in its first version a mix of Scheme with the Common Lisp Object System.</li>
<li><a href="http://en.wikipedia.org/wiki/EuLisp" title="EuLisp">EuLisp</a> – attempt to develop a new efficient and cleaned-up Lisp.</li>
<li><a href="http://en.wikipedia.org/wiki/ISLISP" title="ISLISP">ISLISP</a> – attempt to develop a new efficient and cleaned-up Lisp. Standardized as ISO/IEC 13816:1997<sup id="cite_ref-17" class="reference"><a href="#cite_note-17"><span>[</span>17<span>]</span></a></sup> and later revised as ISO/IEC 13816:2007:<sup id="cite_ref-18" class="reference"><a href="#cite_note-18"><span>[</span>18<span>]</span></a></sup> <i>Information technology – Programming languages, their environments and system software interfaces – Programming language ISLISP</i>.</li>
<li>IEEE <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> – IEEE standard, 1178–1990 (R1995)</li>
<li>ANSI <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> – an <a href="American_National_Standards_Institute.html" title="American National Standards Institute">American National Standards Institute</a> (ANSI) <a href="http://en.wikipedia.org/wiki/Standardization" title="Standardization">standard</a> for Common Lisp, created by subcommittee <a href="http://en.wikipedia.org/wiki/X3J13" title="X3J13">X3J13</a>, chartered<sup id="cite_ref-19" class="reference"><a href="#cite_note-19"><span>[</span>19<span>]</span></a></sup> to begin with <i>Common Lisp: The Language</i> as a base document and to work through a public <a href="http://en.wikipedia.org/wiki/Consensus_decision-making" title="Consensus decision-making">consensus</a> process to find solutions to shared issues of <a href="http://en.wikipedia.org/wiki/Portability_(software)" title="Portability (software)" class="mw-redirect">portability</a> of programs and <a href="http://en.wikipedia.org/wiki/Computer_compatibility" title="Computer compatibility">compatibility</a> of Common Lisp implementations. Although formally an ANSI standard, the implementation, sale, use, and influence of ANSI Common Lisp has been and continues to be seen worldwide.</li>
<li><a href="http://en.wikipedia.org/wiki/ACL2" title="ACL2">ACL2</a> or "A Computational Logic for Applicative Common Lisp", an applicative (side-effect free) variant of Common LISP. ACL2 is both a programming language in which you can model computer systems and a tool to help proving properties of those models.</li>
<li><a href="http://en.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, a modern dialect of Lisp which compiles to the <a href="Java_virtual_machine.html" title="Java virtual machine">Java virtual machine</a> and handles <a href="http://en.wikipedia.org/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrency</a> very well.</li>
</ul>
<h3><span class="mw-headline" id="2000-present">2000-present</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=5" title="Edit section: 2000-present">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>After having declined somewhat in the 1990s, Lisp has recently experienced a resurgence of interest. Most new activity is focused around <a href="Open_source.html" title="Open source">open source</a> implementations of <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, and includes the development of new portable libraries and applications. A new print edition of <i><a href="http://en.wikipedia.org/wiki/Practical_Common_Lisp" title="Practical Common Lisp">Practical Common Lisp</a></i> by Peter Seibel, a tutorial for new Lisp programmers, was published in 2005.<sup id="cite_ref-20" class="reference"><a href="#cite_note-20"><span>[</span>20<span>]</span></a></sup></p>
<p>Many new Lisp programmers were inspired by writers such as <a href="http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)" title="Paul Graham (computer programmer)">Paul Graham</a> and <a href="Eric_S.html" title="Eric S. Raymond">Eric S. Raymond</a> to pursue a language others considered antiquated. New Lisp programmers often describe the language as an eye-opening experience and claim to be substantially more productive than in other languages.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21"><span>[</span>21<span>]</span></a></sup> This increase in awareness may be contrasted to the "<a href="http://en.wikipedia.org/wiki/AI_winter" title="AI winter">AI winter</a>" and Lisp's brief gain in the mid-1990s.<sup id="cite_ref-22" class="reference"><a href="#cite_note-22"><span>[</span>22<span>]</span></a></sup></p>
<p>Dan Weinreb lists in his survey of Common Lisp implementations<sup id="cite_ref-23" class="reference"><a href="#cite_note-23"><span>[</span>23<span>]</span></a></sup> eleven actively maintained Common Lisp implementations. Scieneer Common Lisp is a new commercial implementation forked from CMUCL with a first release in 2002.</p>
<p>The open source community has created new supporting infrastructure: <a href="http://en.wikipedia.org/wiki/CLiki" title="CLiki">CLiki</a> is a wiki that collects Common Lisp related information, the <a href="http://en.wikipedia.org/w/index.php?title=Common_Lisp_directory&amp;action=edit&amp;redlink=1" class="new" title="Common Lisp directory (page does not exist)">Common Lisp directory</a> lists resources, #lisp is a popular IRC channel (with support by a Lisp-written Bot), <a href="http://en.wikipedia.org/w/index.php?title=Lisppaste&amp;action=edit&amp;redlink=1" class="new" title="Lisppaste (page does not exist)">lisppaste</a> supports the sharing and commenting of code snippets, <a href="http://en.wikipedia.org/w/index.php?title=Planet_Lisp&amp;action=edit&amp;redlink=1" class="new" title="Planet Lisp (page does not exist)">Planet Lisp</a> collects the contents of various Lisp-related blogs, on <a href="http://en.wikipedia.org/w/index.php?title=LispForum&amp;action=edit&amp;redlink=1" class="new" title="LispForum (page does not exist)">LispForum</a> users discuss Lisp topics, <a href="http://en.wikipedia.org/w/index.php?title=Lispjobs&amp;action=edit&amp;redlink=1" class="new" title="Lispjobs (page does not exist)">Lispjobs</a> is a service for announcing job offers and there is a weekly news service, <i><a href="http://en.wikipedia.org/w/index.php?title=Weekly_Lisp_News&amp;action=edit&amp;redlink=1" class="new" title="Weekly Lisp News (page does not exist)">Weekly Lisp News</a></i>. <i>Common-lisp.net</i> is a hosting site for open source Common Lisp projects.</p>
<p>50 years of Lisp (1958–2008) has been celebrated at LISP50@OOPSLA.<sup id="cite_ref-24" class="reference"><a href="#cite_note-24"><span>[</span>24<span>]</span></a></sup> There are regular local user meetings in Boston, Vancouver, and Hamburg. Other events include the European Common Lisp Meeting, the European Lisp Symposium and an International Lisp Conference.</p>
<p>The Scheme community actively maintains <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)#Implementations" title="Scheme (programming language)">over twenty implementations</a>. Several significant new implementations (Chicken, Gambit, Gauche, Ikarus, Larceny, Ypsilon) have been developed in the last few years. The Revised<sup>5</sup> Report on the Algorithmic Language Scheme<sup id="cite_ref-25" class="reference"><a href="#cite_note-25"><span>[</span>25<span>]</span></a></sup> standard of Scheme was widely accepted in the Scheme community. The <a href="http://en.wikipedia.org/wiki/Scheme_Requests_for_Implementation" title="Scheme Requests for Implementation">Scheme Requests for Implementation</a> process has created a lot of quasi standard libraries and extensions for Scheme. User communities of individual Scheme implementations continue to grow. A new language standardization process was started in 2003 and led to the R<sup>6</sup>RS Scheme standard in 2007. Academic use of Scheme for teaching computer science seems to have declined somewhat. Some universities, such as MIT, are no longer using Scheme in their computer science introductory courses.<sup id="cite_ref-26" class="reference"><a href="#cite_note-26"><span>[</span>26<span>]</span></a></sup><sup id="cite_ref-27" class="reference"><a href="#cite_note-27"><span>[</span>27<span>]</span></a></sup></p>
<p>There are several new dialects of Lisp: <a href="http://en.wikipedia.org/wiki/Arc_(programming_language)" title="Arc (programming language)">Arc</a>, <a href="http://en.wikipedia.org/wiki/Nu_(programming_language)" title="Nu (programming language)">Nu</a>, <a href="http://en.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, <a href="http://en.wikipedia.org/w/index.php?title=Liskell&amp;action=edit&amp;redlink=1" class="new" title="Liskell (page does not exist)">Liskell</a>, <a href="http://en.wikipedia.org/wiki/LFE_(programming_language)" title="LFE (programming language)">LFE</a> (Lisp Flavored Erlang), and <a href="http://en.wikipedia.org/wiki/Shen_(programming_language)" title="Shen (programming language)">Shen</a>.</p>
<h2><span class="mw-headline" id="Major_dialects">Major dialects</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=6" title="Edit section: Major dialects">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The two major dialects of Lisp used for general-purpose programming today are <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> and <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>. These languages represent significantly different design choices.</p>
<p><a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> is a successor to <a href="http://en.wikipedia.org/wiki/MacLisp" title="MacLisp" class="mw-redirect">MacLisp</a>. The primary influences were <a href="http://en.wikipedia.org/wiki/Lisp_Machine_Lisp" title="Lisp Machine Lisp">Lisp Machine Lisp</a>, <a href="http://en.wikipedia.org/wiki/MacLisp" title="MacLisp" class="mw-redirect">MacLisp</a>, <a href="http://en.wikipedia.org/wiki/NIL_(programming_language)" title="NIL (programming language)">NIL</a>, <a href="http://en.wikipedia.org/wiki/S-1_Lisp" title="S-1 Lisp">S-1 Lisp</a>, <a href="http://en.wikipedia.org/wiki/Spice_Lisp" title="Spice Lisp">Spice Lisp</a>, and Scheme.<sup id="cite_ref-28" class="reference"><a href="#cite_note-28"><span>[</span>28<span>]</span></a></sup> It has many of the features of Lisp Machine Lisp (a large Lisp dialect used to program <a href="http://en.wikipedia.org/wiki/Lisp_Machine" title="Lisp Machine" class="mw-redirect">Lisp Machines</a>), but was designed to be efficiently implementable on any personal computer or workstation. Common Lisp has a large language standard including many built-in data types, functions, macros and other language elements, as well as an object system (<a href="http://en.wikipedia.org/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a> or shorter CLOS). Common Lisp also borrowed certain features from Scheme such as <a href="http://en.wikipedia.org/wiki/Lexical_scoping" title="Lexical scoping" class="mw-redirect">lexical scoping</a> and <a href="http://en.wikipedia.org/wiki/Lexical_closure" title="Lexical closure" class="mw-redirect">lexical closures</a>.</p>
<p>Scheme (designed earlier) is a more minimalist design, with a much smaller set of standard features but with certain implementation features (such as <a href="http://en.wikipedia.org/wiki/Tail-call_optimization" title="Tail-call optimization" class="mw-redirect">tail-call optimization</a> and full <a href="http://en.wikipedia.org/wiki/Continuation" title="Continuation">continuations</a>) not necessarily found in Common Lisp.</p>
<p><a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> is a statically scoped and properly tail-recursive dialect of the Lisp programming language invented by <a href="Guy_L._Steele%2c_Jr.html" title="Guy L. Steele, Jr.">Guy Lewis Steele Jr.</a> and <a href="http://en.wikipedia.org/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a>. It was designed to have exceptionally clear and simple semantics and few different ways to form expressions. A wide variety of programming paradigms, including imperative, functional, and message passing styles, find convenient expression in Scheme. Scheme continues to evolve with a series of standards (Revised<sup>n</sup> Report on the Algorithmic Language Scheme) and a series of <a href="http://en.wikipedia.org/wiki/Scheme_Requests_for_Implementation" title="Scheme Requests for Implementation">Scheme Requests for Implementation</a>.</p>
<p><a href="http://en.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a> is a recent dialect of Lisp that principally targets the <a href="http://en.wikipedia.org/wiki/Java_Virtual_Machine" title="Java Virtual Machine" class="mw-redirect">Java Virtual Machine</a>, as well as the <a href="http://en.wikipedia.org/wiki/Common_Language_Runtime" title="Common Language Runtime">CLR</a>, the <a href="Python_(programming_language).html" title="Python (programming language)">Python VM</a>, the Ruby VM <a href="http://en.wikipedia.org/wiki/YARV" title="YARV">YARV</a>, and compiling to <a href="JavaScript.html" title="JavaScript">JavaScript</a>. It is designed to be a pragmatic general-purpose language. Clojure draws considerable influences from <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> and places a very strong emphasis on immutability.<sup id="cite_ref-clojure-immutability_29-0" class="reference"><a href="#cite_note-clojure-immutability-29"><span>[</span>29<span>]</span></a></sup> Clojure is a compiled language, as it compiles directly to JVM bytecode, yet remains completely dynamic. Every feature supported by Clojure is supported at runtime. Clojure provides access to Java frameworks and libraries, with optional type hints and <a href="http://en.wikipedia.org/wiki/Type_inference" title="Type inference">type inference</a>, so that calls to Java can avoid reflection and enable fast primitive operations.</p>
<p>In addition, Lisp dialects are used as <a href="http://en.wikipedia.org/wiki/Scripting_language" title="Scripting language">scripting languages</a> in a number of applications, with the most well-known being <a href="http://en.wikipedia.org/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a> in the <a href="http://en.wikipedia.org/wiki/Emacs" title="Emacs">Emacs</a> editor, <a href="http://en.wikipedia.org/wiki/AutoLisp" title="AutoLisp" class="mw-redirect">AutoLisp</a> and later <a href="http://en.wikipedia.org/wiki/Visual_Lisp" title="Visual Lisp" class="mw-redirect">Visual Lisp</a> in <a href="http://en.wikipedia.org/wiki/AutoCAD" title="AutoCAD">AutoCAD</a>, Nyquist in <a href="http://en.wikipedia.org/wiki/Audacity_(audio_editor)" title="Audacity (audio editor)">Audacity</a>. The small size of a minimal but useful Scheme interpreter makes it particularly popular for embedded scripting. Examples include <a href="http://en.wikipedia.org/wiki/SIOD" title="SIOD">SIOD</a> and <a href="http://en.wikipedia.org/wiki/TinyScheme" title="TinyScheme">TinyScheme</a>, both of which have been successfully embedded in the <a href="http://en.wikipedia.org/wiki/GIMP" title="GIMP">GIMP</a> image processor under the generic name "Script-fu".<sup id="cite_ref-script-fu_30-0" class="reference"><a href="#cite_note-script-fu-30"><span>[</span>30<span>]</span></a></sup> LIBREP, a Lisp interpreter by John Harper originally based on the <a href="http://en.wikipedia.org/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a> language, has been embedded in the <a href="http://en.wikipedia.org/wiki/Sawfish_(window_manager)" title="Sawfish (window manager)">Sawfish</a> <a href="http://en.wikipedia.org/wiki/Window_manager" title="Window manager">window manager</a>.<sup id="cite_ref-librep_31-0" class="reference"><a href="#cite_note-librep-31"><span>[</span>31<span>]</span></a></sup></p>
<h2><span class="mw-headline" id="Language_innovations">Language innovations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=7" title="Edit section: Language innovations">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Lisp was the first <a href="http://en.wikipedia.org/wiki/Homoiconicity" title="Homoiconicity">homoiconic</a> programming language: the primary representation of program code is the same type of list structure that is also used for the main data structures. As a result, Lisp functions can be manipulated, altered or even created within a Lisp program without extensive parsing or manipulation of binary machine code. This is generally considered one of the primary advantages of the language with regard to its expressive power, and makes the language amenable to <a href="http://en.wikipedia.org/wiki/Metacircular_evaluation" title="Metacircular evaluation" class="mw-redirect">metacircular evaluation</a>.</p>
<p>The ubiquitous <i>if-then-else</i> structure, now taken for granted as an essential element of any programming language, was invented by McCarthy for use in Lisp, where it saw its first appearance in a more general form (the cond structure). It was inherited by <a href="ALGOL.html" title="ALGOL">ALGOL</a>, which popularized it.</p>
<p>Lisp deeply influenced <a href="http://en.wikipedia.org/wiki/Alan_Kay" title="Alan Kay">Alan Kay</a>, the leader of the research on <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a>, and then in turn Lisp was influenced by Smalltalk, by adopting object-oriented programming features (classes, instances, etc.) in the late 1970s. The Flavours object system (later CLOS) introduced multiple inheritance.</p>
<p>Lisp introduced the concept of <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">automatic garbage collection</a>, in which the system walks the heap looking for unused memory. Most of the modern sophisticated garbage collection algorithms such as generational garbage collection were developed for Lisp.<sup id="cite_ref-32" class="reference"><a href="#cite_note-32"><span>[</span>32<span>]</span></a></sup></p>
<p><a href="http://en.wikipedia.org/wiki/Edsger_W._Dijkstra" title="Edsger W. Dijkstra">Edsger W. Dijkstra</a> in his 1972 <a href="Turing_Award.html" title="Turing Award">Turing Award</a> lecture said,</p>
<dl>
<dd>"With a few very basic principles at its foundation, it [LISP] has shown a remarkable stability. Besides that, LISP has been the carrier for a considerable number of in a sense our most sophisticated computer applications. LISP has jokingly been described as “the most intelligent way to misuse a computer”. I think that description a great compliment because it transmits the full flavour of liberation: it has assisted a number of our most gifted fellow humans in thinking previously impossible thoughts."<sup id="cite_ref-33" class="reference"><a href="#cite_note-33"><span>[</span>33<span>]</span></a></sup></dd>
</dl>
<p>Largely because of its resource requirements with respect to early computing hardware (including early microprocessors), Lisp did not become as popular outside of the <a href="http://en.wikipedia.org/wiki/AI" title="AI" class="mw-redirect">AI</a> community as <a href="Fortran-2.html" title="Fortran">Fortran</a> and the <a href="ALGOL.html" title="ALGOL">ALGOL</a>-descended <a href="C_(programming_language).html" title="C (programming language)">C</a> language. Because of its suitability to complex and dynamic applications, Lisp is currently enjoying some resurgence of popular interest.</p>
<h2><span class="mw-headline" id="Syntax_and_semantics">Syntax and semantics</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=8" title="Edit section: Syntax and semantics">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<dl>
<dd><i><b>Note</b>: This article's examples are written in <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> (though most are also valid in <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>).</i></dd>
</dl>
<h3><span class="mw-headline" id="Symbolic_expressions_.28S-expressions.29">Symbolic expressions (S-expressions)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=9" title="Edit section: Symbolic expressions (S-expressions)">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Lisp is an <a href="http://en.wikipedia.org/wiki/Expression_(computer_science)" title="Expression (computer science)">expression</a>-oriented language. Unlike most other languages, no distinction is made between "expressions" and <a href="Statement_(programming).html" title="Statement (programming)" class="mw-redirect">"statements"</a>;<sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Disputed_statement" title="Wikipedia:Disputed statement" class="mw-redirect"><span title="The material near this tag is possibly inaccurate or nonfactual. (April 2013)">dubious</span></a> <span class="metadata">– <a href="http://en.wikipedia.org/wiki/Talk:Lisp_(programming_language)#Dubious" title="Talk:Lisp (programming language)">discuss</a></span></i>]</sup> all code and data are written as expressions. When an expression is <i>evaluated</i>, it produces a value (in Common Lisp, possibly multiple values), which then can be embedded into other expressions. Each value can be any data type.</p>
<p>McCarthy's 1958 paper introduced two types of syntax: <a href="S-expression.html" title="S-expression">S-expressions</a> (Symbolic expressions, also called "sexps"), which mirror the internal representation of code and data; and <a href="http://en.wikipedia.org/wiki/M-expression" title="M-expression">M-expressions</a> (Meta Expressions), which express functions of S-expressions. M-expressions never found favor, and almost all Lisps today use S-expressions to manipulate both code and data.</p>
<p>The use of parentheses is Lisp's most immediately obvious difference from other programming language families. As a result, students have long given Lisp nicknames such as <i>Lost In Stupid Parentheses</i>, or <i>Lots of Irritating Superfluous Parentheses</i>.<sup id="cite_ref-LEVIN2_34-0" class="reference"><a href="#cite_note-LEVIN2-34"><span>[</span>34<span>]</span></a></sup> However, the S-expression syntax is also responsible for much of Lisp's power: the syntax is extremely regular, which facilitates manipulation by computer. However, the syntax of Lisp is not limited to traditional parentheses notation. It can be extended to include alternative notations. <a href="http://en.wikipedia.org/w/index.php?title=XMLisp&amp;action=edit&amp;redlink=1" class="new" title="XMLisp (page does not exist)">XMLisp</a>, for instance, is a Common Lisp extension that employs the <a href="http://en.wikipedia.org/wiki/Meta-object_protocol" title="Meta-object protocol" class="mw-redirect">metaobject-protocol</a> to integrate S-expressions with the <a href="http://en.wikipedia.org/wiki/Xml" title="Xml" class="mw-redirect">Extensible Markup Language (XML)</a>.</p>
<p>The reliance on expressions gives the language great flexibility. Because Lisp <a href="http://en.wikipedia.org/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">functions</a> are themselves written as lists, they can be processed exactly like data. This allows easy writing of programs which manipulate other programs (<a href="http://en.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a>). Many Lisp dialects exploit this feature using macro systems, which enables extension of the language almost without limit.</p>
<h3><span class="mw-headline" id="Lists">Lists</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=10" title="Edit section: Lists">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A Lisp list is written with its elements separated by whitespace, and surrounded by parentheses. For example, <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> foo<span class="br0">)</span></span> is a list whose elements are three <i>atoms</i>: the values <span class="mw-geshi lisp source-lisp"><span class="nu0">1</span></span>, <span class="mw-geshi lisp source-lisp"><span class="nu0">2</span></span>, and <a href="http://en.wikipedia.org/wiki/Foo" title="Foo" class="mw-redirect"><span class="mw-geshi lisp source-lisp">foo</span></a>. These values are implicitly typed: they are respectively two integers and a Lisp-specific data type called a "symbolic atom", and do not have to be declared as such.</p>
<p>The empty list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="br0">)</span></span> is also represented as the special atom <span class="mw-geshi lisp source-lisp"><span class="kw1">nil</span></span>. This is the only entity in Lisp which is both an atom and a list.</p>
<p>Expressions are written as lists, using <a href="http://en.wikipedia.org/wiki/Polish_notation" title="Polish notation">prefix notation</a>. The first element in the list is the name of a <i>form</i>, i.e., a function, operator, macro, or "special operator" (see below). The remainder of the list are the arguments. For example, the function <span class="mw-geshi lisp source-lisp"><span class="kw1">list</span></span> returns its arguments as a list, so the expression</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">list</span> '<span class="nu0">1</span> '<span class="nu0">2</span> 'foo<span class="br0">)</span>
</pre></div>
</div>
<p>evaluates to the list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> foo<span class="br0">)</span></span>. The "quote" before the arguments in the preceding example is a "special operator" which prevents the quoted arguments from being evaluated (not strictly necessary for the numbers, since 1 evaluates to 1, etc.). Any unquoted expressions are recursively evaluated before the enclosing expression is evaluated. For example,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>evaluates to the list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="br0">(</span><span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span></span>. Note that the third argument is a list; lists can be nested.</p>
<h3><span class="mw-headline" id="Operators">Operators</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=11" title="Edit section: Operators">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Arithmetic operators are treated similarly. The expression</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span>+ <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span>
</pre></div>
</div>
<p>evaluates to 10. The equivalent under <a href="http://en.wikipedia.org/wiki/Infix_notation" title="Infix notation">infix notation</a> would be "<span class="mw-geshi lisp source-lisp"><span class="nu0">1</span> <span class="sy0">+</span> <span class="nu0">2</span> <span class="sy0">+</span> <span class="nu0">3</span> <span class="sy0">+</span> <span class="nu0">4</span></span>". Arithmetic operators in Lisp are <a href="http://en.wikipedia.org/wiki/Variadic_function" title="Variadic function">variadic</a> (or <i><a href="http://en.wikipedia.org/wiki/N-ary" title="N-ary" class="mw-redirect">n-ary</a></i>), able to take any number of arguments.</p>
<p>"Special operators" (sometimes called "special forms") provide Lisp's control structure. For example, the special operator <span class="mw-geshi lisp source-lisp"><span class="kw1">if</span></span> takes three arguments. If the first argument is non-nil, it evaluates to the second argument; otherwise, it evaluates to the third argument. Thus, the expression</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">if</span> <span class="kw1">nil</span>
     <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="st0">"foo"</span><span class="br0">)</span>
     <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="st0">"bar"</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>evaluates to <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="nu0">3</span> <span class="nu0">4</span> <span class="st0">"bar"</span><span class="br0">)</span></span>. Of course, this would be more useful if a non-trivial expression had been substituted in place of <span class="mw-geshi lisp source-lisp"><span class="kw1">nil</span></span>.</p>
<h3><span class="mw-headline" id="Lambda_expressions_and_function_definition">Lambda expressions and function definition</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=12" title="Edit section: Lambda expressions and function definition">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Another special operator, <span class="mw-geshi lisp source-lisp"><span class="kw1">lambda</span></span>, is used to bind variables to values which are then evaluated within an expression. This operator is also used to create functions: the arguments to <span class="mw-geshi lisp source-lisp"><span class="kw1">lambda</span></span> are a list of arguments, and the expression or expressions to which the function evaluates (the returned value is the value of the last expression that is evaluated). The expression</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>arg<span class="br0">)</span> <span class="br0">(</span>+ arg <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>evaluates to a function that, when applied, takes one argument, binds it to <span class="mw-geshi lisp source-lisp">arg</span> and returns the number one greater than that argument. Lambda expressions are treated no differently from named functions; they are invoked the same way. Therefore, the expression</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>arg<span class="br0">)</span> <span class="br0">(</span>+ arg <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="nu0">5</span><span class="br0">)</span>
</pre></div>
</div>
<p>evaluates to <span class="mw-geshi lisp source-lisp"><span class="nu0">6</span></span>.</p>
<p>Named functions are created by storing a lambda expression in a symbol using the <a href="http://en.wikipedia.org/wiki/Defun" title="Defun">defun</a> macro.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">defun</span> foo <span class="br0">(</span>a b c d<span class="br0">)</span> <span class="br0">(</span>+ a b c d<span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p><span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="kw1">defun</span> f <span class="br0">(</span>a<span class="br0">)</span> b<span class="sy0">...</span><span class="br0">)</span></span> defines a new function named <span class="mw-geshi lisp source-lisp">f</span> in the global environment. It is a shorthand for the expression:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span>place-in-function-definition-slot-of-<span class="kw1">symbol</span> 'f #'<span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>a<span class="br0">)</span> b<span class="sy0">...</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="Atoms">Atoms</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=13" title="Edit section: Atoms">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In the original <b>LISP</b> there were two fundamental <a href="Data_type.html" title="Data type">data types</a>: atoms and lists. A list was a finite ordered sequence of elements, where each element is in itself either an atom or a list, and an atom was a <a href="http://en.wikipedia.org/wiki/Number" title="Number">number</a> or a symbol. A symbol was essentially a unique named item, written as an <a href="http://en.wikipedia.org/wiki/Alphanumeric" title="Alphanumeric">alphanumeric</a> string in <a href="Source_code.html" title="Source code">source code</a>, and used either as a variable name or as a data item in <a href="http://en.wikipedia.org/wiki/Symbolic_processing" title="Symbolic processing" class="mw-redirect">symbolic processing</a>. For example, the list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>FOO <span class="br0">(</span>BAR <span class="nu0">1</span><span class="br0">)</span> <span class="nu0">2</span><span class="br0">)</span></span> contains three elements: the symbol FOO, the list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>BAR <span class="nu0">1</span><span class="br0">)</span></span>, and the number 2.</p>
<p>The essential difference between atoms and lists was that atoms were immutable and unique. Two atoms that appeared in different places in source code but were written in exactly the same way represented the same object,<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2008)">citation needed</span></a></i>]</sup> whereas each list was a separate object that could be altered independently of other lists and could be distinguished from other lists by comparison operators.</p>
<p>As more data types were introduced in later Lisp dialects, and <a href="http://en.wikipedia.org/wiki/Programming_style" title="Programming style">programming styles</a> evolved, the concept of an atom lost importance.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2008)">citation needed</span></a></i>]</sup> Many dialects still retained the predicate <i>atom</i> for <a href="http://en.wikipedia.org/wiki/Legacy_compatibility" title="Legacy compatibility" class="mw-redirect">legacy compatibility</a>,<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2008)">citation needed</span></a></i>]</sup> defining it true for any object which is not a cons.</p>
<h3><span class="mw-headline" id="Conses_and_lists">Conses and lists</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=14" title="Edit section: Conses and lists">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="Cons.html" title="Cons">Cons</a></div>
<div class="thumb tright">
<div class="thumbinner" style="width:302px;"><a href="http://en.wikipedia.org/wiki/File:Cons-cells.svg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Cons-cells.svg/300px-Cons-cells.svg.png" width="300" height="73" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Cons-cells.svg/450px-Cons-cells.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Cons-cells.svg/600px-Cons-cells.svg.png 2x" /></a>
<div class="thumbcaption">
<div class="magnify"><a href="http://en.wikipedia.org/wiki/File:Cons-cells.svg" class="internal" title="Enlarge"><img src="http://bits.wikimedia.org/static-1.23wmf18/skins/common/images/magnify-clip.png" width="15" height="11" alt="" /></a></div>
Box-and-pointer diagram for the list (42 69 613)</div>
</div>
</div>
<p>A Lisp list is a <a href="http://en.wikipedia.org/wiki/Singly_linked_list" title="Singly linked list" class="mw-redirect">singly linked list</a>. Each cell of this list is called a <i>cons</i> (in Scheme, a <i>pair</i>), and is composed of two <a href="Pointer_(computer_programming).html" title="Pointer (computer programming)">pointers</a>, called the <i>car</i> and <i>cdr</i>. These are respectively equivalent to the <span class="mw-geshi lisp source-lisp">data</span> and <span class="mw-geshi lisp source-lisp">next</span> fields discussed in the article <i><a href="Linked_list.html" title="Linked list">linked list</a></i>.</p>
<p>Of the many data structures that can be built out of cons cells, one of the most basic is called a <i>proper list</i>. A proper list is either the special <span class="mw-geshi lisp source-lisp"><span class="kw1">nil</span></span> (empty list) symbol, or a cons in which the <span class="mw-geshi lisp source-lisp"><span class="kw1">car</span></span> points to a datum (which may be another cons structure, such as a list), and the <span class="mw-geshi lisp source-lisp"><span class="kw1">cdr</span></span> points to another proper list.</p>
<p>If a given cons is taken to be the head of a linked list, then its car points to the first element of the list, and its cdr points to the rest of the list. For this reason, the <span class="mw-geshi lisp source-lisp"><span class="kw1">car</span></span> and <span class="mw-geshi lisp source-lisp"><span class="kw1">cdr</span></span> functions are also called <span class="mw-geshi lisp source-lisp">first</span> and <span class="mw-geshi lisp source-lisp">rest</span> when referring to conses which are part of a linked list (rather than, say, a tree).</p>
<p>Thus, a Lisp list is not an atomic object, as an instance of a container class in C++ or Java would be. A list is nothing more than an aggregate of linked conses. A variable which refers to a given list is simply a pointer to the first cons in the list. Traversal of a list can be done by "cdring down" the list; that is, taking successive cdrs to visit each cons of the list; or by using any of a number of <a href="Higher-order_function.html" title="Higher-order function">higher-order functions</a> to map a function over a list.</p>
<p>Because conses and lists are so universal in Lisp systems, it is a common misconception that they are Lisp's only data structures. In fact, all but the most simplistic Lisps have other data structures – such as vectors (<a href="Array_data_type.html" title="Array data type">arrays</a>), hash tables, structures, and so forth.</p>
<h4><span class="mw-headline" id="S-expressions_represent_lists">S-expressions represent lists</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=15" title="Edit section: S-expressions represent lists">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Parenthesized S-expressions represent linked list structures. There are several ways to represent the same list as an S-expression. A cons can be written in <i>dotted-pair notation</i> as <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>a <span class="sy0">.</span> b<span class="br0">)</span></span>, where <span class="mw-geshi lisp source-lisp">a</span> is the car and <span class="mw-geshi lisp source-lisp">b</span> the cdr. A longer proper list might be written <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>a <span class="sy0">.</span> <span class="br0">(</span>b <span class="sy0">.</span> <span class="br0">(</span>c <span class="sy0">.</span> <span class="br0">(</span>d <span class="sy0">.</span> <span class="kw1">nil</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></span> in dotted-pair notation. This is conventionally abbreviated as <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>a b c d<span class="br0">)</span></span> in <i>list notation</i>. An improper list<sup id="cite_ref-35" class="reference"><a href="#cite_note-35"><span>[</span>35<span>]</span></a></sup> may be written in a combination of the two – as <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>a b c <span class="sy0">.</span> d<span class="br0">)</span></span> for the list of three conses whose last cdr is <span class="mw-geshi lisp source-lisp">d</span> (i.e., the list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>a <span class="sy0">.</span> <span class="br0">(</span>b <span class="sy0">.</span> <span class="br0">(</span>c <span class="sy0">.</span> d<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></span> in fully specified form).</p>
<h4><span class="mw-headline" id="List-processing_procedures">List-processing procedures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=16" title="Edit section: List-processing procedures">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Lisp provides many built-in procedures for accessing and controlling lists. Lists can be created directly with the <span class="mw-geshi lisp source-lisp"><span class="kw1">list</span></span> procedure, which takes any number of arguments, and returns the list of these arguments.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> <span class="nu0">2</span> 'a <span class="nu0">3</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 a 3)</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">list</span> <span class="nu0">1</span> '<span class="br0">(</span><span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span> <span class="nu0">4</span><span class="br0">)</span>
 <span class="co1">;Output: (1 (2 3) 4)</span>
</pre></div>
</div>
<p>Because of the way that lists are constructed from <a href="http://en.wikipedia.org/wiki/Cons_pair" title="Cons pair" class="mw-redirect">cons pairs</a>, the <span class="mw-geshi lisp source-lisp"><span class="kw1">cons</span></span> procedure can be used to add an element to the front of a list. Note that the <span class="mw-geshi lisp source-lisp"><span class="kw1">cons</span></span> procedure is asymmetric in how it handles list arguments, because of how lists are constructed.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">cons</span> <span class="nu0">1</span> '<span class="br0">(</span><span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 3)</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">cons</span> '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span><span class="br0">)</span> '<span class="br0">(</span><span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: ((1 2) 3 4)</span>
</pre></div>
</div>
<p>The <span class="mw-geshi lisp source-lisp"><span class="kw1">append</span></span> procedure appends two (or more) lists to one another. Because Lisp lists are linked lists, appending two lists has <a href="Big_O_notation.html" title="Big O notation">asymptotic time complexity</a> <img class="tex" alt="O(n)" src="http://upload.wikimedia.org/math/7/b/a/7ba55e7c64a9405a0b39a1107e90ca94.png" /></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">append</span> '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span><span class="br0">)</span> '<span class="br0">(</span><span class="nu0">3</span> <span class="nu0">4</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 3 4)</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">append</span> '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span> '<span class="br0">(</span><span class="br0">)</span> '<span class="br0">(</span>a<span class="br0">)</span> '<span class="br0">(</span><span class="nu0">5</span> <span class="nu0">6</span><span class="br0">)</span><span class="br0">)</span>
 <span class="co1">;Output: (1 2 3 a 5 6)</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Shared_structure">Shared structure</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=17" title="Edit section: Shared structure">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Lisp lists, being simple linked lists, can share structure with one another. That is to say, two lists can have the same <i>tail</i>, or final sequence of conses. For instance, after the execution of the following Common Lisp code:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
<span class="br0">(</span><span class="kw1">setf</span> foo <span class="br0">(</span><span class="kw1">list</span> 'a 'b 'c<span class="br0">)</span><span class="br0">)</span>
<span class="br0">(</span><span class="kw1">setf</span> bar <span class="br0">(</span><span class="kw1">cons</span> 'x <span class="br0">(</span><span class="kw1">cdr</span> foo<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>the lists <span class="mw-geshi lisp source-lisp">foo</span> and <span class="mw-geshi lisp source-lisp">bar</span> are <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>a b c<span class="br0">)</span></span> and <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>x b c<span class="br0">)</span></span> respectively. However, the tail <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>b c<span class="br0">)</span></span> is the same structure in both lists. It is not a copy; the cons cells pointing to <span class="mw-geshi lisp source-lisp">b</span> and <span class="mw-geshi lisp source-lisp">c</span> are in the same memory locations for both lists.</p>
<p>Sharing structure rather than copying can give a dramatic performance improvement. However, this technique can interact in undesired ways with functions that alter lists passed to them as arguments. Altering one list, such as by replacing the <span class="mw-geshi lisp source-lisp">c</span> with a <span class="mw-geshi lisp source-lisp">goose</span>, will affect the other:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>third foo<span class="br0">)</span> 'goose<span class="br0">)</span>
</pre></div>
</div>
<p>This changes <span class="mw-geshi lisp source-lisp">foo</span> to <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>a b goose<span class="br0">)</span></span>, but thereby also changes <span class="mw-geshi lisp source-lisp">bar</span> to <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>x b goose<span class="br0">)</span></span> – a possibly unexpected result. This can be a source of bugs, and functions which alter their arguments are documented as <i>destructive</i> for this very reason.</p>
<p>Aficionados of <a href="Functional_programming.html" title="Functional programming">functional programming</a> avoid destructive functions. In the Scheme dialect, which favors the functional style, the names of destructive functions are marked with a cautionary exclamation point, or "bang"—such as <span class="mw-geshi lisp source-lisp">set-<span class="kw1">car</span><span class="sy0">!</span></span> (read <i>set car bang</i>), which replaces the car of a cons. In the Common Lisp dialect, destructive functions are commonplace; the equivalent of <span class="mw-geshi lisp source-lisp">set-<span class="kw1">car</span><span class="sy0">!</span></span> is named <span class="mw-geshi lisp source-lisp"><span class="kw1">rplaca</span></span> for "replace car." This function is rarely seen however as Common Lisp includes a special facility, <span class="mw-geshi lisp source-lisp"><span class="kw1">setf</span></span>, to make it easier to define and use destructive functions. A frequent style in Common Lisp is to write code functionally (without destructive calls) when prototyping, then to add destructive calls as an optimization where it is safe to do so.</p>
<h3><span class="mw-headline" id="Self-evaluating_forms_and_quoting">Self-evaluating forms and quoting</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=18" title="Edit section: Self-evaluating forms and quoting">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Lisp evaluates expressions which are entered by the user. Symbols and lists evaluate to some other (usually, simpler) expression – for instance, a symbol evaluates to the value of the variable it names; <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>+ <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span></span> evaluates to <span class="mw-geshi lisp source-lisp"><span class="nu0">5</span></span>. However, most other forms evaluate to themselves: if you enter <span class="mw-geshi lisp source-lisp"><span class="nu0">5</span></span> into Lisp, it returns <span class="mw-geshi lisp source-lisp"><span class="nu0">5</span></span>.</p>
<p>Any expression can also be marked to prevent it from being evaluated (as is necessary for symbols and lists). This is the role of the <span class="mw-geshi lisp source-lisp"><span class="kw1">quote</span></span> special operator, or its abbreviation <span class="mw-geshi lisp source-lisp">'</span> (a single quotation mark). For instance, usually if you enter the symbol <span class="mw-geshi lisp source-lisp">foo</span> you will get back the value of the corresponding variable (or an error, if there is no such variable). If you wish to refer to the literal symbol, you enter <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="kw1">quote</span> foo<span class="br0">)</span></span> or, usually, <span class="mw-geshi lisp source-lisp">'foo</span>.</p>
<p><span id="Backquote"></span>Both Common Lisp and Scheme also support the <i>backquote</i> operator (known as <i><a href="http://en.wikipedia.org/wiki/Quasiquote" title="Quasiquote" class="mw-redirect">quasiquote</a></i> in Scheme), entered with the <span class="mw-geshi lisp source-lisp">`</span> character (<a href="http://en.wikipedia.org/wiki/Grave_accent#Use_in_programming" title="Grave accent">grave accent</a>). This is almost the same as the plain quote, except it allows expressions to be evaluated and their values interpolated into a quoted list with the comma <span class="mw-geshi lisp source-lisp"><span class="sy0">,</span></span> <i>unquote</i> and comma-at <span class="mw-geshi lisp source-lisp"><span class="sy0">,</span>@</span> <i>splice</i> operators. If the variable <span class="mw-geshi lisp source-lisp">snue</span> has the value <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>bar baz<span class="br0">)</span></span> then <span class="mw-geshi lisp source-lisp">`<span class="br0">(</span>foo <span class="sy0">,</span>snue<span class="br0">)</span></span> evaluates to <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>foo <span class="br0">(</span>bar baz<span class="br0">)</span><span class="br0">)</span></span>, while <span class="mw-geshi lisp source-lisp">`<span class="br0">(</span>foo <span class="sy0">,</span>@snue<span class="br0">)</span></span> evaluates to <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>foo bar baz<span class="br0">)</span></span>. The backquote is most frequently used in defining macro expansions.<sup id="cite_ref-36" class="reference"><a href="#cite_note-36"><span>[</span>36<span>]</span></a></sup><sup id="cite_ref-37" class="reference"><a href="#cite_note-37"><span>[</span>37<span>]</span></a></sup></p>
<p>Self-evaluating forms and quoted forms are Lisp's equivalent of literals. It may be possible to modify the values of (mutable) literals in program code. For instance, if a function returns a quoted form, and the code that calls the function modifies the form, this may alter the behavior of the function on subsequent iterations.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
<span class="br0">(</span><span class="kw1">defun</span> should-be-constant <span class="br0">(</span><span class="br0">)</span>
  '<span class="br0">(</span>one two three<span class="br0">)</span><span class="br0">)</span>
 
<span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>stuff <span class="br0">(</span>should-be-constant<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">setf</span> <span class="br0">(</span>third stuff<span class="br0">)</span> 'bizarre<span class="br0">)</span><span class="br0">)</span>   <span class="co1">; bad!</span>
 
<span class="br0">(</span>should-be-constant<span class="br0">)</span>   <span class="co1">; returns (one two bizarre)</span>
</pre></div>
</div>
<p>Modifying a quoted form like this is generally considered bad style, and is defined by ANSI Common Lisp as erroneous (resulting in "undefined" behavior in compiled files, because the file-compiler can coalesce similar constants, put them in write-protected memory, etc.).</p>
<p>Lisp's formalization of quotation has been noted by <a href="http://en.wikipedia.org/wiki/Douglas_Hofstadter" title="Douglas Hofstadter">Douglas Hofstadter</a> (in <i><a href="http://en.wikipedia.org/wiki/Gödel,_Escher,_Bach" title="Gödel, Escher, Bach">Gödel, Escher, Bach</a></i>) and others as an example of the <a href="Philosophy.html" title="Philosophy">philosophical</a> idea of <a href="http://en.wikipedia.org/wiki/Self-reference" title="Self-reference">self-reference</a>.</p>
<h3><span class="mw-headline" id="Scope_and_closure">Scope and closure</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=19" title="Edit section: Scope and closure">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The modern Lisp family splits over the use of dynamic or static (aka lexical) <a href="Scope_(programming).html" title="Scope (programming)" class="mw-redirect">scope</a>. Clojure, Common Lisp and Scheme make use of static scoping by default, while <a href="http://en.wikipedia.org/wiki/Newlisp" title="Newlisp" class="mw-redirect">Newlisp</a>, <a href="http://en.wikipedia.org/wiki/Picolisp" title="Picolisp">Picolisp</a> and the embedded languages in <a href="http://en.wikipedia.org/wiki/Emacs" title="Emacs">Emacs</a> and <a href="http://en.wikipedia.org/wiki/AutoCAD" title="AutoCAD">AutoCAD</a> use dynamic scoping.</p>
<h3><span class="mw-headline" id="List_structure_of_program_code.3B_exploitation_by_macros_and_compilers">List structure of program code; exploitation by macros and compilers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=20" title="Edit section: List structure of program code; exploitation by macros and compilers">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A fundamental distinction between Lisp and other languages is that in Lisp, the textual representation of a program is simply a human-readable description of the same internal data structures (linked lists, symbols, number, characters, etc.) as would be used by the underlying Lisp system.</p>
<p>Lisp uses this to implement a very powerful macro system. Like other macro languages such as <a href="C_(programming_language).html" title="C (programming language)">C</a>, a macro returns code that can then be compiled. However, unlike C macros, the macros are Lisp functions and so can exploit the full power of Lisp.</p>
<p>Further, because Lisp code has the same structure as lists, macros can be built with any of the list-processing functions in the language. In short, anything that Lisp can do to a data structure, Lisp macros can do to code. In contrast, in most other languages, the parser's output is purely internal to the language implementation and cannot be manipulated by the programmer.</p>
<p>This feature makes it easy to develop <i>efficient</i> languages within languages. For example, the Common Lisp Object System can be implemented cleanly as a language extension using macros. This means that if an application requires a different inheritance mechanism, it can use a different object system. This is in stark contrast to most other languages; for example, Java does not support multiple inheritance and there is no reasonable way to add it.</p>
<p>In simplistic Lisp implementations, this list structure is directly <a href="Interpreter_(computing).html" title="Interpreter (computing)">interpreted</a> to run the program; a function is literally a piece of list structure which is traversed by the interpreter in executing it. However, most substantial Lisp systems also include a compiler. The compiler translates list structure into machine code or <a href="http://en.wikipedia.org/wiki/Bytecode" title="Bytecode">bytecode</a> for execution. This code can run as fast as code compiled in conventional languages such as C.</p>
<p>Macros expand before the compilation step, and thus offer some interesting options. If a program needs a precomputed table, then a macro might create the table at compile time, so the compiler need only output the table and need not call code to create the table at run time. Some Lisp implementations even have a mechanism, <code>eval-when</code>, that allows code to be present during compile time (when a macro would need it), but not present in the emitted module.<sup id="cite_ref-38" class="reference"><a href="#cite_note-38"><span>[</span>38<span>]</span></a></sup></p>
<h3><span class="mw-headline" id="Evaluation_and_the_read.E2.80.93eval.E2.80.93print_loop">Evaluation and the read–eval–print loop</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=21" title="Edit section: Evaluation and the read–eval–print loop">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Lisp languages are frequently used with an interactive <a href="http://en.wikipedia.org/wiki/Command_line" title="Command line" class="mw-redirect">command line</a>, which may be combined with an <a href="Integrated_development_environment.html" title="Integrated development environment">integrated development environment</a>. The user types in expressions at the command line, or directs the IDE to transmit them to the Lisp system. Lisp <i>reads</i> the entered expressions, <i>evaluates</i> them, and <i>prints</i> the result. For this reason, the Lisp command line is called a "<a href="http://en.wikipedia.org/wiki/Read–eval–print_loop" title="Read–eval–print loop">read–eval–print loop</a>", or <i><a href="http://en.wikipedia.org/wiki/REPL" title="REPL" class="mw-redirect">REPL</a></i>.</p>
<p>The basic operation of the REPL is as follows. This is a simplistic description which omits many elements of a real Lisp, such as quoting and macros.</p>
<p>The <span class="mw-geshi lisp source-lisp">read</span> function accepts textual S-expressions as input, and parses them into an internal data structure. For instance, if you type the text <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>+ <span class="nu0">1</span> <span class="nu0">2</span><span class="br0">)</span></span> at the prompt, <span class="mw-geshi lisp source-lisp">read</span> translates this into a linked list with three elements: the symbol <span class="mw-geshi lisp source-lisp">+</span>, the number 1, and the number 2. It so happens that this list is also a valid piece of Lisp code; that is, it can be evaluated. This is because the car of the list names a function—the addition operation.</p>
<p>Note that a <span class="mw-geshi lisp source-lisp">foo</span> will be read as a single symbol. <span class="mw-geshi lisp source-lisp"><span class="nu0">123</span></span> will be read as the number one hundred and twenty-three. <span class="mw-geshi lisp source-lisp"><span class="st0">"123"</span></span> will be read as the string "123".</p>
<p>The <span class="mw-geshi lisp source-lisp"><span class="kw1">eval</span></span> function evaluates the data, returning zero or more other Lisp data as a result. Evaluation does not have to mean interpretation; some Lisp systems compile every expression to native machine code. It is simple, however, to describe evaluation as interpretation: To evaluate a list whose car names a function, <span class="mw-geshi lisp source-lisp"><span class="kw1">eval</span></span> first evaluates each of the arguments given in its cdr, then applies the function to the arguments. In this case, the function is addition, and applying it to the argument list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span><span class="br0">)</span></span> yields the answer <span class="mw-geshi lisp source-lisp"><span class="nu0">3</span></span>. This is the result of the evaluation.</p>
<p>The symbol <span class="mw-geshi lisp source-lisp">foo</span> evaluates to the value of the symbol foo. Data like the string "123" evaluates to the same string. The list <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="kw1">quote</span> <span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">)</span></span> evaluates to the list (1 2 3).</p>
<p>It is the job of the <span class="mw-geshi lisp source-lisp"><span class="kw1">print</span></span> function to represent output to the user. For a simple result such as <span class="mw-geshi lisp source-lisp"><span class="nu0">3</span></span> this is trivial. An expression which evaluated to a piece of list structure would require that <span class="mw-geshi lisp source-lisp"><span class="kw1">print</span></span> traverse the list and print it out as an S-expression.</p>
<p>To implement a Lisp REPL, it is necessary only to implement these three functions and an infinite-loop function. (Naturally, the implementation of <span class="mw-geshi lisp source-lisp"><span class="kw1">eval</span></span> will be complicated, since it must also implement all special operators like <span class="mw-geshi lisp source-lisp"><span class="kw1">if</span></span> or <span class="mw-geshi lisp source-lisp"><span class="kw1">lambda</span></span>.) This done, a basic REPL itself is but a single line of code: <span class="mw-geshi lisp source-lisp"><span class="br0">(</span>loop <span class="br0">(</span><span class="kw1">print</span> <span class="br0">(</span><span class="kw1">eval</span> <span class="br0">(</span>read<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></span>.</p>
<p>The Lisp REPL typically also provides input editing, an input history, error handling and an interface to the debugger.</p>
<p>Lisp is usually evaluated <a href="http://en.wikipedia.org/wiki/Eager_evaluation" title="Eager evaluation">eagerly</a>. In <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, arguments are evaluated in <a href="http://en.wikipedia.org/wiki/Applicative_order" title="Applicative order" class="mw-redirect">applicative order</a> ('leftmost innermost'), while in <a href="http://en.wikipedia.org/wiki/Scheme_programming_language" title="Scheme programming language" class="mw-redirect">Scheme</a> order of arguments is undefined, leaving room for optimization by a compiler.</p>
<h3><span class="mw-headline" id="Control_structures">Control structures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=22" title="Edit section: Control structures">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Lisp originally had very few control structures, but many more were added during the language's evolution. (Lisp's original conditional operator, <span class="mw-geshi lisp source-lisp"><span class="kw1">cond</span></span>, is the precursor to later <span class="mw-geshi lisp source-lisp">if-then-else</span> structures.)</p>
<p>Programmers in the Scheme dialect often express loops using <a href="http://en.wikipedia.org/wiki/Tail_recursion" title="Tail recursion" class="mw-redirect">tail recursion</a>. Scheme's commonality in academic computer science has led some students to believe that tail recursion is the only, or the most common, way to write iterations in Lisp, but this is incorrect. All frequently seen Lisp dialects have imperative-style iteration constructs, from Scheme's <span class="mw-geshi lisp source-lisp"><span class="kw1">do</span></span> loop to <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>'s complex <span class="mw-geshi lisp source-lisp">loop</span> expressions. Moreover, the key issue that makes this an objective rather than subjective matter is that Scheme makes specific requirements for the handling of <a href="http://en.wikipedia.org/wiki/Tail_call" title="Tail call">tail calls</a>, and consequently the reason that the use of tail recursion is generally encouraged for Scheme is that the practice is expressly supported by the language definition itself. By contrast, ANSI Common Lisp does not require<sup id="cite_ref-39" class="reference"><a href="#cite_note-39"><span>[</span>39<span>]</span></a></sup> the optimization commonly referred to as tail call elimination. Consequently, the fact that tail recursive style as a casual replacement for the use of more traditional <a href="Iteration.html" title="Iteration">iteration</a> constructs (such as <span class="mw-geshi lisp source-lisp"><span class="kw1">do</span></span>, <span class="mw-geshi lisp source-lisp"><span class="kw1">dolist</span></span> or <span class="mw-geshi lisp source-lisp">loop</span>) is discouraged<sup id="cite_ref-40" class="reference"><a href="#cite_note-40"><span>[</span>40<span>]</span></a></sup> in Common Lisp is not just a matter of stylistic preference, but potentially one of efficiency (since an apparent tail call in Common Lisp may not compile as a simple <a href="http://en.wikipedia.org/wiki/Branch_(computer_science)" title="Branch (computer science)">jump</a>) and program correctness (since tail recursion may increase stack use in Common Lisp, risking <a href="http://en.wikipedia.org/wiki/Stack_overflow" title="Stack overflow">stack overflow</a>).</p>
<p>Some Lisp control structures are <i>special operators</i>, equivalent to other languages' syntactic keywords. Expressions using these operators have the same surface appearance as function calls, but differ in that the arguments are not necessarily evaluated—or, in the case of an iteration expression, may be evaluated more than once.</p>
<p>In contrast to most other major programming languages, Lisp allows the programmer to implement control structures using the language itself. Several control structures are implemented as Lisp macros, and can even be macro-expanded by the programmer who wants to know how they work.</p>
<p>Both Common Lisp and Scheme have operators for non-local control flow. The differences in these operators are some of the deepest differences between the two dialects. Scheme supports <i>re-entrant <a href="http://en.wikipedia.org/wiki/Continuation" title="Continuation">continuations</a></i> using the <span class="mw-geshi lisp source-lisp">call/cc</span> procedure, which allows a program to save (and later restore) a particular place in execution. Common Lisp does not support re-entrant continuations, but does support several ways of handling escape continuations.</p>
<p>Frequently, the same algorithm can be expressed in Lisp in either an imperative or a functional style. As noted above, Scheme tends to favor the functional style, using tail recursion and continuations to express control flow. However, imperative style is still quite possible. The style preferred by many Common Lisp programmers may seem more familiar to programmers used to structured languages such as C, while that preferred by Schemers more closely resembles pure-functional languages such as <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>.</p>
<p>Because of Lisp's early heritage in list processing, it has a wide array of higher-order functions relating to iteration over sequences. In many cases where an explicit loop would be needed in other languages (like a <span class="mw-geshi lisp source-lisp">for</span> loop in C) in Lisp the same task can be accomplished with a higher-order function. (The same is true of many functional programming languages.)</p>
<p>A good example is a function which in Scheme is called <span class="mw-geshi lisp source-lisp">map</span> and in Common Lisp is called <span class="mw-geshi lisp source-lisp"><span class="kw1">mapcar</span></span>. Given a function and one or more lists, <span class="mw-geshi lisp source-lisp"><span class="kw1">mapcar</span></span> applies the function successively to the lists' elements in order, collecting the results in a new list:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">mapcar</span> #'+ '<span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span><span class="br0">)</span> '<span class="br0">(</span><span class="nu0">10</span> <span class="nu0">20</span> <span class="nu0">30</span> <span class="nu0">40</span> <span class="nu0">50</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>This applies the <span class="mw-geshi lisp source-lisp">+</span> function to each corresponding pair of list elements, yielding the result <span class="mw-geshi lisp source-lisp"><span class="br0">(</span><span class="nu0">11</span> <span class="nu0">22</span> <span class="nu0">33</span> <span class="nu0">44</span> <span class="nu0">55</span><span class="br0">)</span></span>.</p>
<h2><span class="mw-headline" id="Examples">Examples</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=23" title="Edit section: Examples">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Here are examples of Common Lisp code.</p>
<p>The basic "<a href="http://en.wikipedia.org/wiki/Hello_world" title="Hello world" class="mw-redirect">Hello world</a>" program:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
  <span class="br0">(</span><span class="kw1">print</span> <span class="st0">"Hello world"</span><span class="br0">)</span>
</pre></div>
</div>
<p>Lisp syntax lends itself naturally to recursion. Mathematical problems such as the enumeration of recursively defined sets are simple to express in this notation.</p>
<p>Evaluate a number's <a href="http://en.wikipedia.org/wiki/Factorial" title="Factorial">factorial</a>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">defun</span> factorial <span class="br0">(</span>n<span class="br0">)</span>
   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&lt;=</span> n <span class="nu0">1</span><span class="br0">)</span>
       <span class="nu0">1</span>
       <span class="br0">(</span>* n <span class="br0">(</span>factorial <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>An alternative implementation, often faster than the previous version if the Lisp system has <a href="http://en.wikipedia.org/wiki/Tail_recursion" title="Tail recursion" class="mw-redirect">tail recursion</a> optimization:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">defun</span> factorial <span class="br0">(</span>n <span class="sy0">&amp;</span>optional <span class="br0">(</span>acc <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span>
   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&lt;=</span> n <span class="nu0">1</span><span class="br0">)</span>
       acc
       <span class="br0">(</span>factorial <span class="br0">(</span>- n <span class="nu0">1</span><span class="br0">)</span> <span class="br0">(</span>* acc n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>Contrast with an iterative version which uses <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp's</a> <span class="mw-geshi lisp source-lisp">loop</span> macro:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
 <span class="br0">(</span><span class="kw1">defun</span> factorial <span class="br0">(</span>n<span class="br0">)</span>
   <span class="br0">(</span>loop for i from <span class="nu0">1</span> to n
         for fac <span class="sy0">=</span> <span class="nu0">1</span> then <span class="br0">(</span>* fac i<span class="br0">)</span>
         finally <span class="br0">(</span><span class="kw1">return</span> fac<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<p>The following function reverses a list. (Lisp's built-in <i>reverse</i> function does the same thing.)</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="lisp source-lisp">
<pre class="de1">
<span class="br0">(</span><span class="kw1">defun</span> -<span class="kw1">reverse</span> <span class="br0">(</span><span class="kw1">list</span><span class="br0">)</span>
  <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>return-<span class="kw1">value</span> '<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>
    <span class="br0">(</span><span class="kw1">dolist</span> <span class="br0">(</span>e <span class="kw1">list</span><span class="br0">)</span> <span class="br0">(</span>push e return-<span class="kw1">value</span><span class="br0">)</span><span class="br0">)</span>
    return-<span class="kw1">value</span><span class="br0">)</span><span class="br0">)</span>
</pre></div>
</div>
<h2><span class="mw-headline" id="Object_systems">Object systems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=24" title="Edit section: Object systems">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Various object systems and models have been built on top of, alongside, or into Lisp, including:</p>
<ul>
<li>The <a href="http://en.wikipedia.org/wiki/Common_Lisp_Object_System" title="Common Lisp Object System">Common Lisp Object System</a>, CLOS, is an integral part of ANSI Common Lisp. CLOS descended from New Flavors and CommonLOOPS. ANSI Common Lisp was the first standardized object-oriented programming language (1994, ANSI X3J13).</li>
<li>ObjectLisp<sup id="cite_ref-41" class="reference"><a href="#cite_note-41"><span>[</span>41<span>]</span></a></sup> or <a href="http://en.wikipedia.org/wiki/Object_Lisp" title="Object Lisp">Object Lisp</a>, used by <a href="http://en.wikipedia.org/wiki/Lisp_Machines_Incorporated" title="Lisp Machines Incorporated" class="mw-redirect">Lisp Machines Incorporated</a> and early versions of Macintosh Common Lisp</li>
<li>LOOPS (Lisp Object-Oriented Programming System) and the later <a href="http://en.wikipedia.org/wiki/CommonLOOPS" title="CommonLOOPS" class="mw-redirect">CommonLOOPS</a></li>
<li><a href="http://en.wikipedia.org/wiki/Flavors_(computer_science)" title="Flavors (computer science)" class="mw-redirect">Flavors</a>, built at <a href="http://en.wikipedia.org/wiki/Massachusetts_Institute_of_Technology" title="Massachusetts Institute of Technology">MIT</a>, and its descendant New Flavors (developed by <a href="http://en.wikipedia.org/wiki/Symbolics" title="Symbolics">Symbolics</a>).</li>
<li>KR (short for Knowledge Representation), a <a href="http://en.wikipedia.org/wiki/Constraint_satisfaction" title="Constraint satisfaction">constraints</a>-based object system developed to aid the writing of Garnet, a GUI library for <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>.</li>
<li><a href="http://en.wikipedia.org/wiki/Knowledge_Engineering_Environment" title="Knowledge Engineering Environment">KEE</a> used an object system called UNITS and integrated it with an <a href="http://en.wikipedia.org/wiki/Inference_engine" title="Inference engine">inference engine</a><sup id="cite_ref-42" class="reference"><a href="#cite_note-42"><span>[</span>42<span>]</span></a></sup> and a <a href="http://en.wikipedia.org/wiki/Truth_maintenance_systems" title="Truth maintenance systems" class="mw-redirect">truth maintenance system</a> (ATMS).</li>
</ul>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=25" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Fexpr" title="Fexpr">Fexpr</a></li>
<li><a href="http://en.wikipedia.org/wiki/Maxima_(software)" title="Maxima (software)">Maxima</a></li>
<li><a href="http://en.wikipedia.org/wiki/Mod_lisp" title="Mod lisp">mod_lisp</a></li>
<li><a href="http://en.wikipedia.org/wiki/P_convention" title="P convention">P convention</a></li>
<li><a href="http://en.wikipedia.org/wiki/Prolog" title="Prolog">Prolog</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=26" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist columns references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation book">Edwin D. Reilly (2003). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=JTYPKxug49IC&amp;pg=PA157"><i>Milestones in computer science and information technology</i></a>. Greenwood Publishing Group. pp.&#160;156–157. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/978-1-57356-521-9" title="Special:BookSources/978-1-57356-521-9">978-1-57356-521-9</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=Edwin+D.+Reilly&amp;rft.aulast=Edwin+D.+Reilly&amp;rft.btitle=Milestones+in+computer+science+and+information+technology&amp;rft.date=2003&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DJTYPKxug49IC%26pg%3DPA157&amp;rft.isbn=978-1-57356-521-9&amp;rft.pages=156%E2%80%93157&amp;rft.pub=Greenwood+Publishing+Group&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-GRAHAM-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-GRAHAM_2-0">^</a></b></span> <span class="reference-text"><span class="citation web">Paul Graham. <a rel="nofollow" class="external text" href="http://www.paulgraham.com/icad.html">"Revenge of the Nerds"</a><span class="reference-accessdate">. Retrieved 2013-03-14</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.aulast=Paul+Graham&amp;rft.au=Paul+Graham&amp;rft.btitle=Revenge+of+the+Nerds&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.paulgraham.com%2Ficad.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-MCCARTHY-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-MCCARTHY_3-0">^</a></b></span> <span class="reference-text"><span class="citation web">John McCarthy. <a rel="nofollow" class="external text" href="http://www-formal.stanford.edu/jmc/recursive.html">"Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I"</a><span class="reference-accessdate">. Retrieved 2006-10-13</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=John+McCarthy&amp;rft.aulast=John+McCarthy&amp;rft.btitle=Recursive+Functions+of+Symbolic+Expressions+and+Their+Computation+by+Machine%2C+Part+I&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww-formal.stanford.edu%2Fjmc%2Frecursive.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-SMITH-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-SMITH_4-0">^</a></b></span> <span class="reference-text"><span class="citation web">David Canfield Smith. <a rel="nofollow" class="external text" href="http://www.softwarepreservation.org/projects/LISP/stanford/Smith-MLISP-AIM-84.pdf">"MLISP Users Manual"</a><span class="reference-accessdate">. Retrieved 2006-10-13</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=David+Canfield+Smith&amp;rft.aulast=David+Canfield+Smith&amp;rft.btitle=MLISP+Users+Manual&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.softwarepreservation.org%2Fprojects%2FLISP%2Fstanford%2FSmith-MLISP-AIM-84.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text">According to what reported by <a href="http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)" title="Paul Graham (computer programmer)">Paul Graham</a> in <i><a href="http://en.wikipedia.org/wiki/Hackers_%26_Painters" title="Hackers &amp; Painters">Hackers &amp; Painters</a></i>, p. 185, McCarthy said: "Steve Russell said, look, why don't I program this <i>eval</i>..., and I said to him, ho, ho, you're confusing theory with practice, this <i>eval</i> is intended for reading, not for computing. But he went ahead and did it. That is, he compiled the <i>eval</i> in my paper into <a href="http://en.wikipedia.org/wiki/IBM_704" title="IBM 704">IBM 704</a> machine code, fixing <a href="http://en.wikipedia.org/wiki/Software_bug" title="Software bug">bug</a>, and then advertised this as a Lisp interpreter, which it certainly was. So at that point Lisp had essentially the form that it has today..."</span></li>
<li id="cite_note-PREHISTORY-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-PREHISTORY_6-0">^</a></b></span> <span class="reference-text"><span class="citation web">John McCarthy. <a rel="nofollow" class="external text" href="http://www-formal.stanford.edu/jmc/history/lisp/node2.html">"LISP prehistory - Summer 1956 through Summer 1958"</a><span class="reference-accessdate">. Retrieved 2010-03-14</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=John+McCarthy&amp;rft.aulast=John+McCarthy&amp;rft.btitle=LISP+prehistory+-+Summer+1956+through+Summer+1958&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww-formal.stanford.edu%2Fjmc%2Fhistory%2Flisp%2Fnode2.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-LEVIN-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-LEVIN_7-0">^</a></b></span> <span class="reference-text"><span class="citation web">Tim Hart and Mike Levin. <a rel="nofollow" class="external text" href="ftp://publications.ai.mit.edu/ai-publications/pdf/AIM-039.pdf">"AI Memo 39-The new compiler"</a><span class="reference-accessdate">. Retrieved 2006-10-13</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.aulast=Tim+Hart+and+Mike+Levin&amp;rft.au=Tim+Hart+and+Mike+Levin&amp;rft.btitle=AI+Memo+39-The+new+compiler&amp;rft.genre=book&amp;rft_id=ftp%3A%2F%2Fpublications.ai.mit.edu%2Fai-publications%2Fpdf%2FAIM-039.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text">The 36-bit word size of the <a href="http://en.wikipedia.org/wiki/PDP-6" title="PDP-6">PDP-6</a>/<a href="http://en.wikipedia.org/wiki/PDP-10" title="PDP-10">PDP-10</a> was influenced by the usefulness of having two Lisp 18-bit pointers in a single word. <span class="citation newsgroup">Peter J. Hurley (18 October 1990). "<a rel="nofollow" class="external text" href="news:84950@tut.cis.ohio-state.edu">The History of TOPS or Life in the Fast ACs</a>". <a rel="nofollow" class="external text" href="news:alt.folklore.computers">alt.folklore.computers</a>. <a rel="nofollow" class="external text" href="http://groups.google.com/group/alt.folklore.computers/browse_thread/thread/6e5602ce733d0ec/17597705ae289112">Web link</a>. "The PDP-6 project started in early 1963, as a 24-bit machine. It grew to 36 bits for LISP, a design goal.".</span></span></li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text">Common Lisp: <code>(defun f (x) x)</code><br />
Scheme: <code>(define f (lambda (x) x))</code> or <code>(define (f x) x)</code></span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><span class="citation journal"><a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">McCarthy, J.</a>; <a href="http://en.wikipedia.org/w/index.php?title=Robert_Brayton_(computer_scientist)&amp;action=edit&amp;redlink=1" class="new" title="Robert Brayton (computer scientist) (page does not exist)">Brayton, R.</a>; <a href="http://en.wikipedia.org/w/index.php?title=Daniel_Edwards_(programmer)&amp;action=edit&amp;redlink=1" class="new" title="Daniel Edwards (programmer) (page does not exist)">Edwards, D.</a>; <a href="http://en.wikipedia.org/wiki/Phyllis_Fox" title="Phyllis Fox">Fox, P.</a>; <a href="http://en.wikipedia.org/wiki/Louis_Hodes" title="Louis Hodes">Hodes, L.</a>; <a href="http://en.wikipedia.org/wiki/David_Luckham" title="David Luckham">Luckham, D.</a>; <a href="http://en.wikipedia.org/w/index.php?title=Klim_Maling_(programmer)&amp;action=edit&amp;redlink=1" class="new" title="Klim Maling (programmer) (page does not exist)">Maling, K.</a>; <a href="http://en.wikipedia.org/wiki/David_Park_(computer_scientist)" title="David Park (computer scientist)">Park, D.</a> et al. (March 1960). <a rel="nofollow" class="external text" href="http://history.siam.org/sup/Fox_1960_LISP.pdf"><i>LISP I Programmers Manual</i></a>. <a href="http://en.wikipedia.org/wiki/Boston" title="Boston">Boston</a>, <a href="http://en.wikipedia.org/wiki/Massachusetts" title="Massachusetts">Massachusetts</a>: Artificial Intelligence Group, <a href="http://en.wikipedia.org/wiki/M.I.T._Computation_Center" title="M.I.T. Computation Center">M.I.T. Computation Center</a> and <a href="http://en.wikipedia.org/wiki/Research_Laboratory_of_Electronics_at_MIT" title="Research Laboratory of Electronics at MIT">Research Laboratory</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=Brayton%2C+R.&amp;rft.au=Edwards%2C+D.&amp;rft.aufirst=J.&amp;rft.au=Fox%2C+P.&amp;rft.au=Hodes%2C+L.&amp;rft.aulast=McCarthy&amp;rft.au=Luckham%2C+D.&amp;rft.au=Maling%2C+K.&amp;rft.au=McCarthy%2C+J.&amp;rft.au=Park%2C+D.&amp;rft.au=Russell%2C+S.&amp;rft.btitle=LISP+I+Programmers+Manual&amp;rft.date=March+1960&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fhistory.siam.org%2Fsup%2FFox_1960_LISP.pdf&amp;rft.place=Boston%2C+Massachusetts&amp;rft.pub=Artificial+Intelligence+Group%2C+M.I.T.+Computation+Center+and+Research+Laboratory&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment"><code>|displayauthors=</code> suggested (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#displayauthors" title="Help:CS1 errors">help</a>)</span> Accessed May 11, 2010.</span></li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><span class="citation book">McCarthy, John; Abrahams, Paul W.; Edwards, Daniel J.; Hart, Timothy P.; Levin, Michael I. (1962; 2nd Edition, 15th printing, 1985). <a rel="nofollow" class="external text" href="http://www.softwarepreservation.org/projects/LISP/book/LISP 1.5 Programmers Manual.pdf"><i>LISP 1.5 Programmer's Manual</i></a>. <a href="http://en.wikipedia.org/wiki/MIT_Press" title="MIT Press">MIT Press</a>. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-262-13011-4" title="Special:BookSources/0-262-13011-4">0-262-13011-4</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=Abrahams%2C+Paul+W.&amp;rft.au=Edwards%2C+Daniel+J.&amp;rft.aufirst=John&amp;rft.au=Hart%2C+Timothy+P.&amp;rft.aulast=McCarthy&amp;rft.au=Levin%2C+Michael+I.&amp;rft.au=McCarthy%2C+John&amp;rft.btitle=LISP+1.5+Programmer%27s+Manual&amp;rft.date=1962%3B+2nd+Edition%2C+15th+printing%2C+1985&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.softwarepreservation.org%2Fprojects%2FLISP%2Fbook%2FLISP%25201.5%2520Programmers%2520Manual.pdf&amp;rft.isbn=0-262-13011-4&amp;rft.pub=MIT+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment">Check date values in: <code>|date=</code> (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><span class="citation book">Quam, Lynn H.; Diffle, Whitfield. <a rel="nofollow" class="external text" href="http://www.softwarepreservation.org/projects/LISP/stanford/SAILON-28.6.pdf"><i>Stanford LISP 1.6 Manual</i></a> (PDF).</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=Diffle%2C+Whitfield&amp;rft.aufirst=Lynn+H.&amp;rft.aulast=Quam&amp;rft.au=Quam%2C+Lynn+H.&amp;rft.btitle=Stanford+LISP+1.6+Manual&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.softwarepreservation.org%2Fprojects%2FLISP%2Fstanford%2FSAILON-28.6.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://web.archive.org/web/20071214064433/http://zane.brouhaha.com/~healyzh/doc/lisp.doc.txt">"Maclisp Reference Manual"</a>. March 3, 1979. Archived from <a rel="nofollow" class="external text" href="http://zane.brouhaha.com/~healyzh/doc/lisp.doc.txt">the original</a> on 2007-12-14.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=Maclisp+Reference+Manual&amp;rft.date=March+3%2C+1979&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fzane.brouhaha.com%2F~healyzh%2Fdoc%2Flisp.doc.txt&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><span class="citation book">Teitelman, Warren (1974). <a rel="nofollow" class="external text" href="http://www.bitsavers.org/pdf/xerox/interlisp/1974_InterlispRefMan.pdf"><i>InterLisp Reference Manual</i></a> (PDF).</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.aufirst=Warren&amp;rft.aulast=Teitelman&amp;rft.au=Teitelman%2C+Warren&amp;rft.btitle=InterLisp+Reference+Manual&amp;rft.date=1974&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.bitsavers.org%2Fpdf%2Fxerox%2Finterlisp%2F1974_InterlispRefMan.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><span class="citation book">Steele, Guy L., Jr. <a rel="nofollow" class="external text" href="http://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node6.html">"Purpose"</a>. <i>Common Lisp the Language</i> (2nd ed.). <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-13-152414-3" title="Special:BookSources/0-13-152414-3">0-13-152414-3</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=Common+Lisp+the+Language&amp;rft.aufirst=Guy+L.%2C+Jr.&amp;rft.aulast=Steele&amp;rft.au=Steele%2C+Guy+L.%2C+Jr.&amp;rft.btitle=Purpose&amp;rft.edition=2nd&amp;rft.genre=bookitem&amp;rft_id=http%3A%2F%2Fwww.cs.cmu.edu%2FGroups%2FAI%2Fhtml%2Fcltl%2Fclm%2Fnode6.html&amp;rft.isbn=0-13-152414-3&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><span class="citation web">Kantrowitz, Mark; Margolin, Barry (20 February 1996). <a rel="nofollow" class="external text" href="http://www.cs.cmu.edu/Groups/AI/html/faqs/lang/lisp/part2/faq-doc-13.html">"History: Where did Lisp come from?"</a>. <i>FAQ: Lisp Frequently Asked Questions 2/7</i>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=History%3A+Where+did+Lisp+come+from%3F&amp;rft.aufirst=Mark&amp;rft.au=Kantrowitz%2C+Mark&amp;rft.aulast=Kantrowitz&amp;rft.au=Margolin%2C+Barry&amp;rft.date=20+February+1996&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.cs.cmu.edu%2FGroups%2FAI%2Fhtml%2Ffaqs%2Flang%2Flisp%2Fpart2%2Ffaq-doc-13.html&amp;rft.jtitle=FAQ%3A+Lisp+Frequently+Asked+Questions+2%2F7&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-17">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=22987">"ISO/IEC 13816:1997"</a>. Iso.org. 2007-10-01<span class="reference-accessdate">. Retrieved 2013-11-15</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=ISO%2FIEC+13816%3A1997&amp;rft.date=2007-10-01&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.iso.org%2Fiso%2Fiso_catalogue%2Fcatalogue_tc%2Fcatalogue_detail.htm%3Fcsnumber%3D22987&amp;rft.pub=Iso.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=44338">"ISO/IEC 13816:2007"</a>. Iso.org. 2013-10-30<span class="reference-accessdate">. Retrieved 2013-11-15</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=ISO%2FIEC+13816%3A2007&amp;rft.date=2013-10-30&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.iso.org%2Fiso%2Fiso_catalogue%2Fcatalogue_tc%2Fcatalogue_detail.htm%3Fcsnumber%3D44338&amp;rft.pub=Iso.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-19">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.nhplace.com/kent/CL/x3j13-86-020.html">"X3J13 Charter"</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=X3J13+Charter&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.nhplace.com%2Fkent%2FCL%2Fx3j13-86-020.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><span class="citation book">Siebel, Peter (2005). <a rel="nofollow" class="external text" href="http://gigamonkeys.com/book/"><i>Practical Common Lisp</i></a>. Apress. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/978-1-59059-239-7" title="Special:BookSources/978-1-59059-239-7">978-1-59059-239-7</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.aufirst=Peter&amp;rft.aulast=Siebel&amp;rft.au=Siebel%2C+Peter&amp;rft.btitle=Practical+Common+Lisp&amp;rft.date=2005&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fgigamonkeys.com%2Fbook%2F&amp;rft.isbn=978-1-59059-239-7&amp;rft.pub=Apress&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-21">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://wiki.alu.org/The_Road_To_Lisp_Survey">"The Road To Lisp Survey"</a><span class="reference-accessdate">. Retrieved 2006-10-13</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=The+Road+To+Lisp+Survey&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwiki.alu.org%2FThe_Road_To_Lisp_Survey&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-22">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.faqs.org/docs/artu/ch14s05.html">"Trends for the Future"</a>. Faqs.org<span class="reference-accessdate">. Retrieved 2013-11-15</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=Trends+for+the+Future&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.faqs.org%2Fdocs%2Fartu%2Fch14s05.html&amp;rft.pub=Faqs.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-23"><span class="mw-cite-backlink"><b><a href="#cite_ref-23">^</a></b></span> <span class="reference-text"><span class="citation web">Weinreb, Daniel. <a rel="nofollow" class="external text" href="http://common-lisp.net/~dlw/LispSurvey.html">"Common Lisp Implementations: A Survey"</a><span class="reference-accessdate">. Retrieved 4 April 2012</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.aufirst=Daniel&amp;rft.aulast=Weinreb&amp;rft.au=Weinreb%2C+Daniel&amp;rft.btitle=Common+Lisp+Implementations%3A+A+Survey&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fcommon-lisp.net%2F~dlw%2FLispSurvey.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-24">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.lisp50.org/">"LISP50@OOPSLA"</a>. Lisp50.org<span class="reference-accessdate">. Retrieved 2013-11-15</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=LISP50%40OOPSLA&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.lisp50.org%2F&amp;rft.pub=Lisp50.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-25">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.schemers.org/Documents/Standards/R5RS/">Documents: Standards: R5RS</a>. schemers.org (2012-01-11). Retrieved on 2013-07-17.</span></li>
<li id="cite_note-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-26">^</a></b></span> <span class="reference-text"><span class="citation news"><a rel="nofollow" class="external text" href="http://cemerick.com/2009/03/24/why-mit-now-uses-python-instead-of-scheme-for-its-undergraduate-cs-program/">"Why MIT now uses python instead of scheme for its undergraduate CS program"</a>. <i>cemerick.com</i>. March 24, 2009<span class="reference-accessdate">. Retrieved November 10, 2013</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=Why+MIT+now+uses+python+instead+of+scheme+for+its+undergraduate+CS+program&amp;rft.date=March+24%2C+2009&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fcemerick.com%2F2009%2F03%2F24%2Fwhy-mit-now-uses-python-instead-of-scheme-for-its-undergraduate-cs-program%2F&amp;rft.jtitle=cemerick.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-27"><span class="mw-cite-backlink"><b><a href="#cite_ref-27">^</a></b></span> <span class="reference-text"><span class="citation news">Broder, Evan (January 8, 2008). <a rel="nofollow" class="external text" href="http://mitadmissions.org/blogs/entry/the_end_of_an_era_1">"The End of an Era"</a>. <i>mitadmissions.org</i><span class="reference-accessdate">. Retrieved November 10, 2013</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=The+End+of+an+Era&amp;rft.au=Broder%2C+Evan&amp;rft.aufirst=Evan&amp;rft.aulast=Broder&amp;rft.date=January+8%2C+2008&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fmitadmissions.org%2Fblogs%2Fentry%2Fthe_end_of_an_era_1&amp;rft.jtitle=mitadmissions.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-28"><span class="mw-cite-backlink"><b><a href="#cite_ref-28">^</a></b></span> <span class="reference-text">Chapter 1.1.2, History, ANSI CL Standard</span></li>
<li id="cite_note-clojure-immutability-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-clojure-immutability_29-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.infoq.com/articles/in-depth-look-clojure-collections">An In-Depth Look at Clojure Collections</a>, Retrieved 2012-06-24</span></li>
<li id="cite_note-script-fu-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-script-fu_30-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.gimp.org/docs/script-fu-update.html">Script-fu In GIMP 2.4</a>, Retrieved 2009-10-29</span></li>
<li id="cite_note-librep-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-librep_31-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://sawfish.wikia.com/wiki/Librep">librep</a> at Sawfish Wikia, retrieved 2009-10-29</span></li>
<li id="cite_note-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-32">^</a></b></span> <span class="reference-text"><span id="CITEREFLiebermanHewitt1983" class="citation">Lieberman, Henry; Hewitt, Carl (June 1983), <a rel="nofollow" class="external text" href="http://web.media.mit.edu/~lieber/Lieberary/GC/Realtime/Realtime.html">"A Real-Time Garbage Collector Based on the Lifetimes of Objects"</a>, <i>CACM</i> <b>26</b> (6): 419–429, <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F358141.358147">10.1145/358141.358147</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=A+Real-Time+Garbage+Collector+Based+on+the+Lifetimes+of+Objects&amp;rft.aufirst=Henry&amp;rft.au=Hewitt%2C+Carl&amp;rft.aulast=Lieberman&amp;rft.au=Lieberman%2C+Henry&amp;rft.date=June+1983&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fweb.media.mit.edu%2F~lieber%2FLieberary%2FGC%2FRealtime%2FRealtime.html&amp;rft_id=info%3Adoi%2F10.1145%2F358141.358147&amp;rft.issue=6&amp;rft.jtitle=CACM&amp;rft.pages=419%E2%80%93429&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=26" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-33"><span class="mw-cite-backlink"><b><a href="#cite_ref-33">^</a></b></span> <span class="reference-text"><span id="CITEREFEdsger_W._Dijkstra1972" class="citation">Edsger W. Dijkstra (1972), <a rel="nofollow" class="external text" href="http://www.cs.utexas.edu/~EWD/transcriptions/EWD03xx/EWD340.html"><i>The Humble Programmer (EWD 340)</i></a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=Edsger+W.+Dijkstra&amp;rft.aulast=Edsger+W.+Dijkstra&amp;rft.btitle=The+Humble+Programmer+%28EWD+340%29&amp;rft.date=1972&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.cs.utexas.edu%2F~EWD%2Ftranscriptions%2FEWD03xx%2FEWD340.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> (ACM Turing Award lecture).</span></li>
<li id="cite_note-LEVIN2-34"><span class="mw-cite-backlink"><b><a href="#cite_ref-LEVIN2_34-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.catb.org/~esr/jargon/html/L/LISP.html">"The Jargon File - Lisp"</a><span class="reference-accessdate">. Retrieved 2006-10-13</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=The+Jargon+File+-+Lisp&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.catb.org%2F~esr%2Fjargon%2Fhtml%2FL%2FLISP.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-35"><span class="mw-cite-backlink"><b><a href="#cite_ref-35">^</a></b></span> <span class="reference-text">NB: a so-called "dotted list" is only one kind of "improper list". The other kind is the "circular list" where the cons cells form a loop. Typically this is represented using #n=(...) to represent the target cons cell that will have multiple references, and #n# is used to refer to this cons. For instance, (#1=(a b) . #1#) would normally be printed as ((a b) a b) (without circular structure printing enabled), but makes the reuse of the cons cell clear. #1=(a . #1#) cannot normally be printed as it is circular, the CDR of the cons cell defined by #1= is itself.</span></li>
<li id="cite_note-36"><span class="mw-cite-backlink"><b><a href="#cite_ref-36">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.cs.washington.edu/education/courses/cse341/04wi/lectures/14-scheme-quote.html">"CSE 341: Scheme: Quote, Quasiquote, and Metaprogramming"</a>. Cs.washington.edu. 1999-02-22<span class="reference-accessdate">. Retrieved 2013-11-15</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=CSE+341%3A+Scheme%3A+Quote%2C+Quasiquote%2C+and+Metaprogramming&amp;rft.date=1999-02-22&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.cs.washington.edu%2Feducation%2Fcourses%2Fcse341%2F04wi%2Flectures%2F14-scheme-quote.html&amp;rft.pub=Cs.washington.edu&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-37"><span class="mw-cite-backlink"><b><a href="#cite_ref-37">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://repository.readscheme.org/ftp/papers/pepm99/bawden.pdf">Quasiquotation in Lisp</a>, Alan Bawden</span></li>
<li id="cite_note-38"><span class="mw-cite-backlink"><b><a href="#cite_ref-38">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.gnu.org/software/emacs/manual/html_node/cl/Time-of-Evaluation.html">Time of Evaluation - Common Lisp Extensions</a>. Gnu.org. Retrieved on 2013-07-17.</span></li>
<li id="cite_note-39"><span class="mw-cite-backlink"><b><a href="#cite_ref-39">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.lispworks.com/documentation/HyperSpec/Body/03_bbc.htm">3.2.2.3 Semantic Constraints</a> in <a rel="nofollow" class="external text" href="http://www.lispworks.com/documentation/HyperSpec/Front/index.htm"><i>Common Lisp HyperSpec</i></a></span></li>
<li id="cite_note-40"><span class="mw-cite-backlink"><b><a href="#cite_ref-40">^</a></b></span> <span class="reference-text">4.3. Control Abstraction (Recursion vs. Iteration) in <a rel="nofollow" class="external text" href="http://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf">Tutorial on Good Lisp Programming Style</a> by <a href="http://en.wikipedia.org/wiki/Kent_Pitman" title="Kent Pitman">Pitman</a> and <a href="http://en.wikipedia.org/wiki/Peter_Norvig" title="Peter Norvig">Norvig</a>, August, 1993.</span></li>
<li id="cite_note-41"><span class="mw-cite-backlink"><b><a href="#cite_ref-41">^</a></b></span> <span class="reference-text">pg 17 of Bobrow 1986</span></li>
<li id="cite_note-42"><span class="mw-cite-backlink"><b><a href="#cite_ref-42">^</a></b></span> <span class="reference-text">Veitch, p 108, 1988</span></li>
</ol>
</div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=27" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="refbegin" style="">
<ul>
<li><span class="citation web">McCarthy, John (1979-02-12). <a rel="nofollow" class="external text" href="http://www-formal.stanford.edu/jmc/history/lisp/node3.html">"The implementation of Lisp"</a>. <i>History of Lisp</i>. Stanford University<span class="reference-accessdate">. Retrieved 2008-10-17</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=The+implementation+of+Lisp&amp;rft.aufirst=John&amp;rft.aulast=McCarthy&amp;rft.au=McCarthy%2C+John&amp;rft.date=1979-02-12&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww-formal.stanford.edu%2Fjmc%2Fhistory%2Flisp%2Fnode3.html&amp;rft.jtitle=History+of+Lisp&amp;rft.pub=Stanford+University&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><span class="citation conference">Steele, Jr., Guy L.; Richard P. Gabriel (1993). <a rel="nofollow" class="external text" href="http://www.dreamsongs.com/NewFiles/HOPL2-Uncut.pdf">"The evolution of Lisp"</a>. <i>The second ACM SIGPLAN conference on History of programming languages</i>. New York, NY: ACM, <a href="http://en.wikipedia.org/wiki/Special:BookSources/0897915704" class="internal mw-magiclink-isbn">ISBN 0-89791-570-4</a>. pp.&#160;231–270. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-89791-570-4" title="Special:BookSources/0-89791-570-4">0-89791-570-4</a><span class="reference-accessdate">. Retrieved 2008-10-17</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=The+second+ACM+SIGPLAN+conference+on+History+of+programming+languages&amp;rft.aufirst=Guy+L.&amp;rft.aulast=Steele%2C+Jr.&amp;rft.au=Steele%2C+Jr.%2C+Guy+L.&amp;rft.btitle=The+evolution+of+Lisp&amp;rft.date=1993&amp;rft.genre=bookitem&amp;rft_id=http%3A%2F%2Fwww.dreamsongs.com%2FNewFiles%2FHOPL2-Uncut.pdf&amp;rft.isbn=0-89791-570-4&amp;rft.pages=231%E2%80%93270&amp;rft.place=New+York%2C+NY&amp;rft.pub=ACM%2C+ISBN+0-89791-570-4&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment">Cite uses deprecated parameters (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#deprecated_params" title="Help:CS1 errors">help</a>)</span></li>
<li><span class="citation book">Veitch, Jim (1998). "A history and description of CLOS". In Salus, Peter H. <i>Handbook of programming languages</i>. Volume IV, Functional and logic programming languages (first ed.). Indianapolis, IN: Macmillan Technical Publishing. pp.&#160;107–158. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/1-57870-011-6" title="Special:BookSources/1-57870-011-6">1-57870-011-6</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.atitle=Handbook+of+programming+languages&amp;rft.aufirst=Jim&amp;rft.aulast=Veitch&amp;rft.au=Veitch%2C+Jim&amp;rft.btitle=A+history+and+description+of+CLOS&amp;rft.date=1998&amp;rft.edition=first&amp;rft.genre=bookitem&amp;rft.isbn=1-57870-011-6&amp;rft.pages=107%E2%80%93158&amp;rft.place=Indianapolis%2C+IN&amp;rft.pub=Macmillan+Technical+Publishing&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.volume=Volume+IV%2C+Functional+and+logic+programming+languages" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><span class="citation book"><a href="http://en.wikipedia.org/wiki/Harold_Abelson" title="Harold Abelson" class="mw-redirect">Abelson, Harold</a>; <a href="http://en.wikipedia.org/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Sussman, Gerald Jay</a>; <a href="http://en.wikipedia.org/w/index.php?title=Julie_Sussman&amp;action=edit&amp;redlink=1" class="new" title="Julie Sussman (page does not exist)">Sussman, Julie</a> (1996). <i><a href="http://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i> (2nd ed.). MIT Press. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-262-01153-0" title="Special:BookSources/0-262-01153-0">0-262-01153-0</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.au=Abelson%2C+Harold&amp;rft.aufirst=Harold&amp;rft.aulast=Abelson&amp;rft.au=Sussman%2C+Gerald+Jay&amp;rft.au=Sussman%2C+Julie&amp;rft.btitle=Structure+and+Interpretation+of+Computer+Programs&amp;rft.date=1996&amp;rft.edition=2nd&amp;rft.genre=book&amp;rft.isbn=0-262-01153-0&amp;rft.pub=MIT+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><a rel="nofollow" class="external text" href="http://www.gnu.org/gnu/rms-lisp.html">My Lisp Experiences and the Development of GNU Emacs</a>, <a href="http://en.wikipedia.org/wiki/Transcription_(linguistics)" title="Transcription (linguistics)">transcript</a> of <a href="Richard_Stallman.html" title="Richard Stallman">Richard Stallman</a>'s speech, 28 October 2002, at the <a href="http://en.wikipedia.org/w/index.php?title=International_Lisp_Conference&amp;action=edit&amp;redlink=1" class="new" title="International Lisp Conference (page does not exist)">International Lisp Conference</a></li>
<li><span class="citation book"><a href="http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)" title="Paul Graham (computer programmer)">Graham, Paul</a> (2004). <i><a href="http://en.wikipedia.org/wiki/Hackers_%26_Painters" title="Hackers &amp; Painters">Hackers &amp; Painters. Big Ideas from the Computer Age</a></i>. O'Reilly. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-596-00662-4" title="Special:BookSources/0-596-00662-4">0-596-00662-4</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.aufirst=Paul&amp;rft.au=Graham%2C+Paul&amp;rft.aulast=Graham&amp;rft.btitle=Hackers+%26+Painters.+Big+Ideas+from+the+Computer+Age&amp;rft.date=2004&amp;rft.genre=book&amp;rft.isbn=0-596-00662-4&amp;rft.pub=O%27Reilly&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><span class="citation book"><a href="http://en.wikipedia.org/wiki/Edmund_Berkeley" title="Edmund Berkeley">Berkeley, Edmund C.</a>; <a href="http://en.wikipedia.org/wiki/Daniel_G._Bobrow" title="Daniel G. Bobrow">Bobrow, Daniel G.</a>, eds. (March 1964). <a rel="nofollow" class="external text" href="http://www.softwarepreservation.org/projects/LISP/book/III_LispBook_Apr66.pdf"><i>The Programming Language LISP: Its Operation and Applications</i></a>. Cambridge, Massachusetts: MIT Press.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.btitle=The+Programming+Language+LISP%3A+Its+Operation+and+Applications&amp;rft.date=March+1964&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.softwarepreservation.org%2Fprojects%2FLISP%2Fbook%2FIII_LispBook_Apr66.pdf&amp;rft.place=Cambridge%2C+Massachusetts&amp;rft.pub=MIT+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><span class="citation book">Weissman, Clark (1967). <a rel="nofollow" class="external text" href="http://www.softwarepreservation.org/projects/LISP/book/Weismann_LISP1.5_Primer_1967.pdf"><i>LISP 1.5 Primer</i></a>. Belmont, California: Dickenson Publishing Company Inc.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ALisp+%28programming+language%29&amp;rft.aufirst=Clark&amp;rft.aulast=Weissman&amp;rft.au=Weissman%2C+Clark&amp;rft.btitle=LISP+1.5+Primer&amp;rft.date=1967&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.softwarepreservation.org%2Fprojects%2FLISP%2Fbook%2FWeismann_LISP1.5_Primer_1967.pdf&amp;rft.place=Belmont%2C+California&amp;rft.pub=Dickenson+Publishing+Company+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
</ul>
</div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit&amp;section=28" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks mbox-small" style="padding:0.25em 0.5em 0.5em 0.75em;border:1px solid #aaa;background:#f9f9f9;">
<tr style="height:25px;">
<td colspan="2" style="padding-bottom:0.5em;border-bottom:1px solid #aaa;margin:auto;text-align:center;">Find more about <b>Lisp (programming language)</b> at Wikipedia's <a href="http://en.wikipedia.org/wiki/Wikipedia:Wikimedia_sister_projects" title="Wikipedia:Wikimedia sister projects">sister projects</a></td>
</tr>
<tr style="height:25px;">
<td style="padding-top:0.75em;"><a href="http://en.wiktionary.org/wiki/Lisp" title="Search Wiktionary"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/23px-Wiktionary-logo-en.svg.png" width="23" height="25" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/35px-Wiktionary-logo-en.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f8/Wiktionary-logo-en.svg/46px-Wiktionary-logo-en.svg.png 2x" /></a></td>
<td style="padding-top:0.75em;"><a href="http://en.wiktionary.org/wiki/Lisp" class="extiw" title="wikt:Lisp">Definitions and translations</a> from Wiktionary</td>
</tr>
<tr style="height:25px;">
<td><a href="http://commons.wikimedia.org/wiki/Category:Lisp_(programming_language)" title="Search Commons"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/18px-Commons-logo.svg.png" width="18" height="25" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/28px-Commons-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/4a/Commons-logo.svg/37px-Commons-logo.svg.png 2x" /></a></td>
<td><a href="http://commons.wikimedia.org/wiki/Category:Lisp_(programming_language)" class="extiw" title="commons:Category:Lisp (programming language)">Media</a> from Commons</td>
</tr>
<tr style="height:25px;">
<td><a href="http://en.wikiquote.org/wiki/Lisp_programming_language" title="Search Wikiquote"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikiquote-logo.svg/21px-Wikiquote-logo.svg.png" width="21" height="25" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikiquote-logo.svg/32px-Wikiquote-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikiquote-logo.svg/42px-Wikiquote-logo.svg.png 2x" /></a></td>
<td><a href="http://en.wikiquote.org/wiki/Lisp_programming_language" class="extiw" title="q:Lisp programming language">Quotations</a> from Wikiquote</td>
</tr>
<tr style="height:25px;">
<td><a href="http://en.wikisource.org/wiki/Lambda_Papers" title="Search Wikisource"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/24px-Wikisource-logo.svg.png" width="24" height="25" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/36px-Wikisource-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Wikisource-logo.svg/48px-Wikisource-logo.svg.png 2x" /></a></td>
<td><a href="http://en.wikisource.org/wiki/Lambda_Papers" class="extiw" title="s:Lambda Papers">Source texts</a> from Wikisource</td>
</tr>
<tr style="height:25px;">
<td><a href="http://en.wikibooks.org/wiki/Subject:Lisp_programming_language" title="Search Wikibooks"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikibooks-logo.svg/25px-Wikibooks-logo.svg.png" width="25" height="25" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikibooks-logo.svg/38px-Wikibooks-logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fa/Wikibooks-logo.svg/50px-Wikibooks-logo.svg.png 2x" /></a></td>
<td><a href="http://en.wikibooks.org/wiki/Subject:Lisp_programming_language" class="extiw" title="b:Subject:Lisp programming language">Textbooks</a> from Wikibooks</td>
</tr>
<tr style="height:25px;">
<td><a href="http://en.wikiversity.org/wiki/Topic:Lisp" title="Search Wikiversity"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Wikiversity-logo-en.svg/25px-Wikiversity-logo-en.svg.png" width="25" height="23" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Wikiversity-logo-en.svg/38px-Wikiversity-logo-en.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1b/Wikiversity-logo-en.svg/50px-Wikiversity-logo-en.svg.png 2x" /></a></td>
<td><a href="http://en.wikiversity.org/wiki/Topic:Lisp" class="extiw" title="v:Topic:Lisp">Learning resources</a> from Wikiversity</td>
</tr>
</table>
<dl>
<dt>History</dt>
</dl>
<ul>
<li><a rel="nofollow" class="external text" href="http://www-formal.stanford.edu/jmc/history/lisp/lisp.html">History of Lisp</a> – <a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a>'s history of 12 February 1979</li>
<li><a rel="nofollow" class="external text" href="http://www8.informatik.uni-erlangen.de/html/lisp-enter.html">Lisp History</a><sup class="noprint Inline-Template"><span style="white-space: nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Link_rot" title="Wikipedia:Link rot"><span title="&#160;since May 2013">dead link</span></a></i>]</span></sup> – Herbert Stoyan's history compiled from the documents (acknowledged by McCarthy as more complete than his own, see: <a rel="nofollow" class="external text" href="http://www-formal.stanford.edu/jmc/history/">McCarthy's history links</a>)</li>
<li><a rel="nofollow" class="external text" href="http://www.softwarepreservation.org/projects/LISP/">History of LISP at the Computer History Museum</a></li>
</ul>
<dl>
<dt>Associations and meetings</dt>
</dl>
<ul>
<li><a rel="nofollow" class="external text" href="http://www.alu.org/">Association of Lisp Users</a></li>
<li><a rel="nofollow" class="external text" href="http://www.weitz.de/eclm2009/">European Common Lisp Meeting</a></li>
<li><a rel="nofollow" class="external text" href="http://european-lisp-symposium.org/">European Lisp Symposium</a></li>
<li><a rel="nofollow" class="external text" href="http://www.international-lisp-conference.org/">International Lisp Conference</a></li>
</ul>
<dl>
<dt>Books and tutorials</dt>
</dl>
<ul>
<li><i><a rel="nofollow" class="external text" href="http://www.lisperati.com/casting.html">Casting SPELs in Lisp</a></i>, a comic-book style introductory tutorial</li>
<li><i><a rel="nofollow" class="external text" href="http://paulgraham.com/onlisptext.html">On Lisp</a></i>, a free book by <a href="http://en.wikipedia.org/wiki/Paul_Graham_(computer_programmer)" title="Paul Graham (computer programmer)">Paul Graham</a></li>
<li><i><a rel="nofollow" class="external text" href="http://www.gigamonkeys.com/book/">Practical Common Lisp</a></i>, freeware edition by Peter Seibel</li>
<li><a rel="nofollow" class="external text" href="https://leanpub.com/lispweb">Lisp for the web</a></li>
<li><a rel="nofollow" class="external text" href="http://landoflisp.com/">Land of Lisp</a></li>
<li><a rel="nofollow" class="external text" href="http://letoverlambda.com/">Let over Lambda</a></li>
</ul>
<dl>
<dt>Interviews</dt>
</dl>
<ul>
<li><a rel="nofollow" class="external text" href="http://purl.umn.edu/107476">Oral history interview with John McCarthy</a> at <a href="http://en.wikipedia.org/wiki/Charles_Babbage_Institute" title="Charles Babbage Institute">Charles Babbage Institute</a>, University of Minnesota, Minneapolis. McCarthy discusses his role in the development of time-sharing at the Massachusetts Institute of Technology. He also describes his work in artificial intelligence (AI) funded by the Advanced Research Projects Agency, including logic-based AI (LISP) and robotics.</li>
<li><a rel="nofollow" class="external text" href="http://www.se-radio.net/2008/01/episode-84-dick-gabriel-on-lisp/">Interview</a> with <a href="http://en.wikipedia.org/wiki/Richard_P._Gabriel" title="Richard P. Gabriel">Richard P. Gabriel</a> (Podcast)</li>
</ul>
<dl>
<dt>Resources</dt>
</dl>
<ul>
<li><a rel="nofollow" class="external text" href="http://www.cliki.net/">CLiki: the common lisp wiki</a></li>
<li><a rel="nofollow" class="external text" href="http://www.cl-user.net/">Common Lisp directory</a></li>
<li><a rel="nofollow" class="external text" href="http://www.faqs.org/faqs/lisp-faq/">Lisp FAQ Index</a></li>
<li><a rel="nofollow" class="external text" href="http://paste.lisp.org/">lisppaste</a></li>
<li><a rel="nofollow" class="external text" href="http://planet.lisp.org/">Planet Lisp</a></li>
<li><a rel="nofollow" class="external text" href="http://lispnews.wordpress.com/">Weekly Lisp News</a></li>
<li><a rel="nofollow" class="external text" href="http://www.dmoz.org/Computers/Programming/Languages/Lisp">Lisp</a> on the <a href="Open_Directory_Project.html" title="Open Directory Project">Open Directory Project</a></li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:John_McCarthy_navbox" title="Template:John McCarthy navbox"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:John_McCarthy_navbox" title="Template talk:John McCarthy navbox"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:John_McCarthy_navbox&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td colspan="2" class="navbox-list navbox-odd" style="width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Artificial_intelligence.html" title="Artificial intelligence">Artificial intelligence</a></li>
<li><a href="http://en.wikipedia.org/wiki/Circumscription_(logic)" title="Circumscription (logic)">Circumscription</a></li>
<li><a href="Dartmouth_Conferences.html" title="Dartmouth Conferences">Dartmouth Conferences</a></li>
<li><a href="http://en.wikipedia.org/wiki/Frame_problem" title="Frame problem">Frame problem</a></li>
<li><a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">Garbage collection</a></li>
<li><strong class="selflink">Lisp</strong></li>
<li><a href="http://en.wikipedia.org/wiki/McCarthy_91_function" title="McCarthy 91 function">McCarthy 91 function</a></li>
<li><a href="http://en.wikipedia.org/wiki/Situation_calculus" title="Situation calculus">Situation calculus</a></li>
<li><a href="http://en.wikipedia.org/wiki/Space_fountain" title="Space fountain">Space fountain</a></li>
<li><a href="http://en.wikipedia.org/w/index.php?title=Vera_Watson&amp;action=edit&amp;redlink=1" class="new" title="Vera Watson (page does not exist)">Vera Watson</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1071
CPU time usage: 3.332 seconds
Real time usage: 3.683 seconds
Preprocessor visited node count: 7933/1000000
Preprocessor generated node count: 36595/1500000
Post‐expand include size: 107435/2048000 bytes
Template argument size: 11306/2048000 bytes
Highest expansion depth: 11/40
Expensive parser function count: 11/500
Lua time usage: 0.235/10.000 seconds
Lua memory usage: 3.44 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:18016-0!*!0!!en!4!*!math=0 and timestamp 20140326235610
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;oldid=600841667">http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;oldid=600841667</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:1958_in_computer_science" title="Category:1958 in computer science">1958 in computer science</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Academic_programming_languages" title="Category:Academic programming languages">Academic programming languages</a></li><li><a href="http://en.wikipedia.org/wiki/Category:American_inventions" title="Category:American inventions">American inventions</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_example_Lisp_code" title="Category:Articles with example Lisp code">Articles with example Lisp code</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Dynamically_typed_programming_languages" title="Category:Dynamically typed programming languages">Dynamically typed programming languages</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Functional_languages" title="Category:Functional languages">Functional languages</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Lisp_programming_language" title="Category:Lisp programming language">Lisp programming language</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Lisp_programming_language_family" title="Category:Lisp programming language family">Lisp programming language family</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Programming_languages_created_in_1958" title="Category:Programming languages created in 1958">Programming languages created in 1958</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Programming_languages_created_in_the_1950s" title="Category:Programming languages created in the 1950s">Programming languages created in the 1950s</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Extensible_syntax_programming_languages" title="Category:Extensible syntax programming languages">Extensible syntax programming languages</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Pages_using_citations_with_old-style_implicit_et_al." title="Category:Pages using citations with old-style implicit et al.">Pages using citations with old-style implicit et al.</a></li><li><a href="http://en.wikipedia.org/wiki/Category:CS1_errors:_dates" title="Category:CS1 errors: dates">CS1 errors: dates</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_October_2010" title="Category:Articles with unsourced statements from October 2010">Articles with unsourced statements from October 2010</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_May_2011" title="Category:Articles with unsourced statements from May 2011">Articles with unsourced statements from May 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_March_2010" title="Category:Articles with unsourced statements from March 2010">Articles with unsourced statements from March 2010</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_accuracy_disputes" title="Category:All accuracy disputes">All accuracy disputes</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_disputed_statements_from_April_2013" title="Category:Articles with disputed statements from April 2013">Articles with disputed statements from April 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_November_2008" title="Category:Articles with unsourced statements from November 2008">Articles with unsourced statements from November 2008</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Pages_containing_cite_templates_with_deprecated_parameters" title="Category:Pages containing cite templates with deprecated parameters">Pages containing cite templates with deprecated parameters</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_dead_external_links" title="Category:All articles with dead external links">All articles with dead external links</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_dead_external_links_from_May_2013" title="Category:Articles with dead external links from May 2013">Articles with dead external links from May 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_Open_Directory_Project_links" title="Category:Articles with Open Directory Project links">Articles with Open Directory Project links</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Lisp+%28programming+language%29&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Lisp+%28programming+language%29" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Lisp_(programming_language).html"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Lisp_(programming_language)"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Lisp_(programming_language).html" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Lisp_(programming_language)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Lisp_(programming_language)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;oldid=600841667" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q132874" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Lisp_%28programming_language%29&amp;id=600841667" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Lisp+%28programming+language%29">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Lisp+%28programming+language%29&amp;oldid=600841667&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Lisp_(programming_language)&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-ar"><a href="http://ar.wikipedia.org/wiki/ليسب" title="ليسب – Arabic" lang="ar" hreflang="ar">العربية</a></li>
			<li class="interlanguage-link interwiki-an"><a href="http://an.wikipedia.org/wiki/Lisp" title="Lisp – Aragonese" lang="an" hreflang="an">Aragonés</a></li>
			<li class="interlanguage-link interwiki-az"><a href="http://az.wikipedia.org/wiki/Lisp" title="Lisp – Azerbaijani" lang="az" hreflang="az">Azərbaycanca</a></li>
			<li class="interlanguage-link interwiki-bn"><a href="http://bn.wikipedia.org/wiki/লিস্প_(প্রোগ্রামিং_ভাষা)" title="লিস্প (প্রোগ্রামিং ভাষা) – Bengali" lang="bn" hreflang="bn">বাংলা</a></li>
			<li class="interlanguage-link interwiki-bg"><a href="http://bg.wikipedia.org/wiki/Lisp_(език_за_програмиране)" title="Lisp (език за програмиране) – Bulgarian" lang="bg" hreflang="bg">Български</a></li>
			<li class="interlanguage-link interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Lisp_(programski_jezik)" title="Lisp (programski jezik) – Bosnian" lang="bs" hreflang="bs">Bosanski</a></li>
			<li class="interlanguage-link interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Lisp" title="Lisp – Catalan" lang="ca" hreflang="ca">Català</a></li>
			<li class="interlanguage-link interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Lisp" title="Lisp – Czech" lang="cs" hreflang="cs">Čeština</a></li>
			<li class="interlanguage-link interwiki-cy"><a href="http://cy.wikipedia.org/wiki/Lisp" title="Lisp – Welsh" lang="cy" hreflang="cy">Cymraeg</a></li>
			<li class="interlanguage-link interwiki-da"><a href="http://da.wikipedia.org/wiki/Lisp" title="Lisp – Danish" lang="da" hreflang="da">Dansk</a></li>
			<li class="interlanguage-link interwiki-de"><a href="http://de.wikipedia.org/wiki/Lisp" title="Lisp – German" lang="de" hreflang="de">Deutsch</a></li>
			<li class="interlanguage-link interwiki-et"><a href="http://et.wikipedia.org/wiki/Lisp" title="Lisp – Estonian" lang="et" hreflang="et">Eesti</a></li>
			<li class="interlanguage-link interwiki-el"><a href="http://el.wikipedia.org/wiki/Lisp" title="Lisp – Greek" lang="el" hreflang="el">Ελληνικά</a></li>
			<li class="interlanguage-link interwiki-es"><a href="http://es.wikipedia.org/wiki/Lisp" title="Lisp – Spanish" lang="es" hreflang="es">Español</a></li>
			<li class="interlanguage-link interwiki-eo"><a href="http://eo.wikipedia.org/wiki/LISP_(programlingvo)" title="LISP (programlingvo) – Esperanto" lang="eo" hreflang="eo">Esperanto</a></li>
			<li class="interlanguage-link interwiki-eu"><a href="http://eu.wikipedia.org/wiki/Lisp" title="Lisp – Basque" lang="eu" hreflang="eu">Euskara</a></li>
			<li class="interlanguage-link interwiki-fa"><a href="http://fa.wikipedia.org/wiki/لیسپ" title="لیسپ – Persian" lang="fa" hreflang="fa">فارسی</a></li>
			<li class="interlanguage-link interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Lisp" title="Lisp – French" lang="fr" hreflang="fr">Français</a></li>
			<li class="interlanguage-link interwiki-ga"><a href="http://ga.wikipedia.org/wiki/LISP" title="LISP – Irish" lang="ga" hreflang="ga">Gaeilge</a></li>
			<li class="interlanguage-link interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Lisp" title="Lisp – Galician" lang="gl" hreflang="gl">Galego</a></li>
			<li class="interlanguage-link interwiki-ko"><a href="http://ko.wikipedia.org/wiki/리스프" title="리스프 – Korean" lang="ko" hreflang="ko">한국어</a></li>
			<li class="interlanguage-link interwiki-hr"><a href="http://hr.wikipedia.org/wiki/Lisp" title="Lisp – Croatian" lang="hr" hreflang="hr">Hrvatski</a></li>
			<li class="interlanguage-link interwiki-is"><a href="http://is.wikipedia.org/wiki/Lisp" title="Lisp – Icelandic" lang="is" hreflang="is">Íslenska</a></li>
			<li class="interlanguage-link interwiki-it"><a href="http://it.wikipedia.org/wiki/Lisp" title="Lisp – Italian" lang="it" hreflang="it">Italiano</a></li>
			<li class="interlanguage-link interwiki-he"><a href="http://he.wikipedia.org/wiki/LISP" title="LISP – Hebrew" lang="he" hreflang="he">עברית</a></li>
			<li class="interlanguage-link interwiki-ky"><a href="http://ky.wikipedia.org/wiki/Lisp_(программалоо_тили)" title="Lisp (программалоо тили) – Kyrgyz" lang="ky" hreflang="ky">Кыргызча</a></li>
			<li class="interlanguage-link interwiki-lv"><a href="http://lv.wikipedia.org/wiki/Lisp" title="Lisp – Latvian" lang="lv" hreflang="lv">Latviešu</a></li>
			<li class="interlanguage-link interwiki-lt"><a href="http://lt.wikipedia.org/wiki/Lisp" title="Lisp – Lithuanian" lang="lt" hreflang="lt">Lietuvių</a></li>
			<li class="interlanguage-link interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Lisp_(programozási_nyelv)" title="Lisp (programozási nyelv) – Hungarian" lang="hu" hreflang="hu">Magyar</a></li>
			<li class="interlanguage-link interwiki-ml"><a href="http://ml.wikipedia.org/wiki/ലിസ്പ്" title="ലിസ്പ് – Malayalam" lang="ml" hreflang="ml">മലയാളം</a></li>
			<li class="interlanguage-link interwiki-mr"><a href="http://mr.wikipedia.org/wiki/लिस्प" title="लिस्प – Marathi" lang="mr" hreflang="mr">मराठी</a></li>
			<li class="interlanguage-link interwiki-ms"><a href="http://ms.wikipedia.org/wiki/LISP" title="LISP – Malay" lang="ms" hreflang="ms">Bahasa Melayu</a></li>
			<li class="interlanguage-link interwiki-mn"><a href="http://mn.wikipedia.org/wiki/Lisp" title="Lisp – Mongolian" lang="mn" hreflang="mn">Монгол</a></li>
			<li class="interlanguage-link interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Lisp_(programmeertaal)" title="Lisp (programmeertaal) – Dutch" lang="nl" hreflang="nl">Nederlands</a></li>
			<li class="interlanguage-link interwiki-ja"><a href="http://ja.wikipedia.org/wiki/LISP" title="LISP – Japanese" lang="ja" hreflang="ja">日本語</a></li>
			<li class="interlanguage-link interwiki-no"><a href="http://no.wikipedia.org/wiki/Lisp" title="Lisp – Norwegian (bokmål)" lang="no" hreflang="no">Norsk bokmål</a></li>
			<li class="interlanguage-link interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Lisp" title="Lisp – Polish" lang="pl" hreflang="pl">Polski</a></li>
			<li class="interlanguage-link interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Lisp" title="Lisp – Portuguese" lang="pt" hreflang="pt">Português</a></li>
			<li class="interlanguage-link interwiki-ro"><a href="http://ro.wikipedia.org/wiki/LISP" title="LISP – Romanian" lang="ro" hreflang="ro">Română</a></li>
			<li class="interlanguage-link interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Лисп" title="Лисп – Russian" lang="ru" hreflang="ru">Русский</a></li>
			<li class="interlanguage-link interwiki-sq"><a href="http://sq.wikipedia.org/wiki/Lisp" title="Lisp – Albanian" lang="sq" hreflang="sq">Shqip</a></li>
			<li class="interlanguage-link interwiki-simple"><a href="http://simple.wikipedia.org/wiki/LISP" title="LISP – Simple English" lang="simple" hreflang="simple">Simple English</a></li>
			<li class="interlanguage-link interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Lisp" title="Lisp – Slovak" lang="sk" hreflang="sk">Slovenčina</a></li>
			<li class="interlanguage-link interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Lisp_(programski_jezik)" title="Lisp (programski jezik) – Slovenian" lang="sl" hreflang="sl">Slovenščina</a></li>
			<li class="interlanguage-link interwiki-sr"><a href="http://sr.wikipedia.org/wiki/Lisp" title="Lisp – Serbian" lang="sr" hreflang="sr">Српски / srpski</a></li>
			<li class="interlanguage-link interwiki-sh"><a href="http://sh.wikipedia.org/wiki/Lisp" title="Lisp – Serbo-Croatian" lang="sh" hreflang="sh">Srpskohrvatski / српскохрватски</a></li>
			<li class="interlanguage-link interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Lisp" title="Lisp – Finnish" lang="fi" hreflang="fi">Suomi</a></li>
			<li class="interlanguage-link interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Lisp" title="Lisp – Swedish" lang="sv" hreflang="sv">Svenska</a></li>
			<li class="interlanguage-link interwiki-ta"><a href="http://ta.wikipedia.org/wiki/லிஸ்ப்" title="லிஸ்ப் – Tamil" lang="ta" hreflang="ta">தமிழ்</a></li>
			<li class="interlanguage-link interwiki-th"><a href="http://th.wikipedia.org/wiki/ภาษาลิสป์" title="ภาษาลิสป์ – Thai" lang="th" hreflang="th">ไทย</a></li>
			<li class="interlanguage-link interwiki-tg"><a href="http://tg.wikipedia.org/wiki/Лисп" title="Лисп – Tajik" lang="tg" hreflang="tg">Тоҷикӣ</a></li>
			<li class="interlanguage-link interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Lisp" title="Lisp – Turkish" lang="tr" hreflang="tr">Türkçe</a></li>
			<li class="interlanguage-link interwiki-uk"><a href="http://uk.wikipedia.org/wiki/LISP" title="LISP – Ukrainian" lang="uk" hreflang="uk">Українська</a></li>
			<li class="interlanguage-link interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Lisp" title="Lisp – Vietnamese" lang="vi" hreflang="vi">Tiếng Việt</a></li>
			<li class="interlanguage-link interwiki-bat-smg"><a href="http://bat-smg.wikipedia.org/wiki/Lisp" title="Lisp – Samogitian" lang="bat-smg" hreflang="bat-smg">Žemaitėška</a></li>
			<li class="interlanguage-link interwiki-zh"><a href="http://zh.wikipedia.org/wiki/LISP" title="LISP – Chinese" lang="zh" hreflang="zh">中文</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q132874#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 23 March 2014 at 06:42.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Lisp_(programming_language)" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf18/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["ext.cite","mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.wikimediaShopLink.core","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1071 in 4.163 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Lisp_(programming_language) by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:58:25 GMT -->
</html>
