http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Type_checking.html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Type_checking by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:57:18 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Type system - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf19" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Type_system#Type_checking" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="Type_system.html" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.rtlcite%2Cwikihiero%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Type_system","wgTitle":"Type system","wgCurRevisionId":601064433,"wgRevisionId":601064433,"wgArticleId":199701,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles lacking in-text citations from October 2010","All articles lacking in-text citations","Articles to be merged from March 2014","All articles to be merged","All articles with unsourced statements","Articles with unsourced statements from March 2014","All pages needing factual verification","Wikipedia articles needing factual verification from March 2014","Articles with unsourced statements from January 2011","Articles with unsourced statements from December 2012","Wikipedia articles needing factual verification from June 2011","Articles using fixed number of columns in reflist","Type systems","Data types","Program analysis","Type theory"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Type_system","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Type_checking","wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf19/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["en","*"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgRedirectToFragment":"#Type_checking","wgWikibaseItemId":"Q865760"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":false,
"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:868e43d07ede2616d2d1dc3507cd8145 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.redirectToFragment","mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","skins.vector.compactPersonalBar.defaultTracking","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-text {line-height: normal;}
.source-text li, .source-text pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for text
 * CSS class: source-text, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.text.source-text .de1, .text.source-text .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.text.source-text  {font-family:monospace;}
.text.source-text .imp {font-weight: bold; color: red;}
.text.source-text li, .text.source-text .li1 {font-weight: normal; vertical-align:top;}
.text.source-text .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.text.source-text .li2 {font-weight: bold; vertical-align:top;}
.text.source-text .ln-xtra, .text.source-text li.ln-xtra, .text.source-text div.ln-xtra {background-color: #ffc;}
.text.source-text span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-java {line-height: normal;}
.source-java li, .source-java pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for java
 * CSS class: source-java, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.java.source-java .de1, .java.source-java .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.java.source-java  {font-family:monospace;}
.java.source-java .imp {font-weight: bold; color: red;}
.java.source-java li, .java.source-java .li1 {font-weight: normal; vertical-align:top;}
.java.source-java .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.java.source-java .li2 {font-weight: bold; vertical-align:top;}
.java.source-java .kw1 {color: #000000; font-weight: bold;}
.java.source-java .kw2 {color: #000066; font-weight: bold;}
.java.source-java .kw3 {color: #003399;}
.java.source-java .kw4 {color: #000066; font-weight: bold;}
.java.source-java .co1 {color: #666666; font-style: italic;}
.java.source-java .co2 {color: #006699;}
.java.source-java .co3 {color: #008000; font-style: italic; font-weight: bold;}
.java.source-java .coMULTI {color: #666666; font-style: italic;}
.java.source-java .es0 {color: #000099; font-weight: bold;}
.java.source-java .br0 {color: #009900;}
.java.source-java .sy0 {color: #339933;}
.java.source-java .st0 {color: #0000ff;}
.java.source-java .nu0 {color: #cc66cc;}
.java.source-java .me1 {color: #006633;}
.java.source-java .me2 {color: #006633;}
.java.source-java .ln-xtra, .java.source-java li.ln-xtra, .java.source-java div.ln-xtra {background-color: #ffc;}
.java.source-java span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf19/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Type_system skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Type system</span></h1>
						<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub">  (Redirected from <a href="http://en.wikipedia.org/w/index.php?title=Type_checking&amp;redirect=no" title="Type checking">Type checking</a>)</div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><div class="dablink">This article is about type systems from the point-of-view of computer programming.  For a theoretical formulation, see <a href="Type_theory.html" title="Type theory">type theory</a>.</div>
<table class="metadata plainlinks ambox ambox-style ambox-More_footnotes" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/60px-Text_document_with_red_question_mark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/80px-Text_document_with_red_question_mark.svg.png 2x" /></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article includes a <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, but <b>its sources remain unclear because it has insufficient <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a></b>. <span class="hide-when-compact">Please help to <a href="http://en.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by <a href="http://en.wikipedia.org/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">introducing</a> more precise citations.</span> <small><i>(October 2010)</i></small></span></td>
</tr>
</table>
<table class="metadata plainlinks ambox ambox-move" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Mergefrom.svg/50px-Mergefrom.svg.png" width="50" height="20" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Mergefrom.svg/75px-Mergefrom.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/0/0f/Mergefrom.svg/100px-Mergefrom.svg.png 2x" /></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">It has been suggested that <i><a href="http://en.wikipedia.org/wiki/Gradual_typing" title="Gradual typing">Gradual typing</a></i> be <a href="http://en.wikipedia.org/wiki/Wikipedia:Merging" title="Wikipedia:Merging">merged</a> into this article. (<a href="http://en.wikipedia.org/wiki/Talk:Type_system#Merger_proposal" title="Talk:Type system">Discuss</a>) <small><i>Proposed since March 2014.</i></small></span></td>
</tr>
</table>
<table class="vertical-navbox nowraplinks" cellspacing="5" cellpadding="0" style="float:right;clear:right;width:auto;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%;">
<tr>
<th class="" style=";padding:0.2em 0.4em 0.2em;;font-size:145%;line-height:1.2em;background:#CCCCFF"><strong class="selflink">Type systems</strong></th>
</tr>
<tr>
<td class="plainlist" style="padding:0 0.1em 0.4em;text-align:left;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Type_safety" title="Type safety">Type safety</a></li>
<li><a href="Type_system.html#Dynamic_type-checking_and_runtime_type_information" title="Type system">Dynamic type-checking</a></li>
<li><a href="Type_system.html#Static_type-checking" title="Type system">Static type-checking</a></li>
<li><a href="http://en.wikipedia.org/wiki/Type_inference" title="Type inference">Inferred</a> vs. <a href="Manifest_typing.html" title="Manifest typing">Manifest</a></li>
<li><a href="Nominative_type_system.html" title="Nominative type system" class="mw-redirect">Nominal</a> vs. <a href="http://en.wikipedia.org/wiki/Structural_type_system" title="Structural type system">Structural</a></li>
<li><a href="http://en.wikipedia.org/wiki/Dependent_type" title="Dependent type">Dependent typing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Duck_typing" title="Duck typing">Duck typing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Latent_typing" title="Latent typing">Latent typing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Substructural_type_system" title="Substructural type system">Substructural typing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Uniqueness_type" title="Uniqueness type">Uniqueness typing</a></li>
<li><a href="http://en.wikipedia.org/wiki/Strong_and_weak_typing" title="Strong and weak typing">Strong and weak typing</a></li>
</ul>
</td>
</tr>
<tr>
<td style="text-align:right;font-size:115%;">
<div class="plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:Type_systems" title="Template:Type systems"><span title="View this template" style="">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:Type_systems" title="Template talk:Type systems"><span title="Discuss this template" style="">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Type_systems&amp;action=edit"><span title="Edit this template" style="">e</span></a></li>
</ul>
</div>
</td>
</tr>
</table>
<p>In <a href="Programming_language.html" title="Programming language">programming languages</a>, a <b>type system</b> is a collection of rules that assign a property called a <i><a href="http://en.wikipedia.org/wiki/Type_(computer_science)" title="Type (computer science)" class="mw-redirect">type</a></i> to the various constructs—such as <a href="http://en.wikipedia.org/wiki/Variable_(computer_science)" title="Variable (computer science)">variables</a>, <a href="http://en.wikipedia.org/wiki/Expression_(computer_science)" title="Expression (computer science)">expressions</a>, <a href="http://en.wikipedia.org/wiki/Function_(computer_science)" title="Function (computer science)" class="mw-redirect">functions</a> or <a href="Modular_programming.html" title="Modular programming">modules</a>—a <a href="http://en.wikipedia.org/wiki/Computer_program" title="Computer program">computer program</a> is composed of.<sup id="cite_ref-FOOTNOTEPierce20021_1-0" class="reference"><a href="#cite_note-FOOTNOTEPierce20021-1"><span>[</span>1<span>]</span></a></sup> The main purpose of a type system is to reduce <a href="http://en.wikipedia.org/wiki/Bug_(computer_programming)" title="Bug (computer programming)" class="mw-redirect">bugs</a> in computer programs<sup id="cite_ref-FOOTNOTECardelli20041_2-0" class="reference"><a href="#cite_note-FOOTNOTECardelli20041-2"><span>[</span>2<span>]</span></a></sup> by defining interfaces between different parts of a computer program, and then checking that the parts have been connected in a consistent way. This checking can happen statically (at <a href="http://en.wikipedia.org/wiki/Compile_time" title="Compile time">compile time</a>), dynamically (at <a href="Run_time_(program_lifecycle_phase).html" title="Run time (program lifecycle phase)">run time</a>), or it can happen as a combination of static and dynamic checking. Type systems have other purposes as well, such as enabling certain compiler optimizations, allowing for <a href="http://en.wikipedia.org/wiki/Multiple_dispatch" title="Multiple dispatch">multiple dispatch</a>, providing a form of documentation, etc.</p>
<p>An example of a simple type system is that of the <a href="C_(programming_language).html" title="C (programming language)">C language</a>. The portions of a C program are the <a href="Subroutine.html" title="Subroutine">function</a> definitions. One function is invoked by another function. The interface of a function states the name of the function and a list of values that are passed to the function's code. The code of an invoking function states the name of the invoked, along with the names of variables that hold values to pass to it. During execution, the values are placed into temporary storage, then execution jumps to the code of the invoked function. The invoked function's code accesses the values and makes use of them. If the instructions inside the function are written with the assumption of receiving an integer value, but the calling code passed a floating-point value, then the wrong result will be computed by the invoked function. The C compiler checks the type declared for each variable sent, against the type declared for each variable in the interface of the invoked function. If the types do not match, the compiler throws a compile-time error.</p>
<p>In greater technical depth, a type-system associates a <i><a href="http://en.wikipedia.org/wiki/Datatype" title="Datatype" class="mw-redirect">type</a></i> with each computed value. By examining the flow of these values, a type system attempts to ensure or prove that no <i><a href="http://en.wikipedia.org/wiki/Type_error" title="Type error" class="mw-redirect">type errors</a></i> can occur. The particular type system in question determines exactly what constitutes a type error, but in general the aim is to prevent operations expecting a certain kind of value from being used with values for which that operation does not make sense (<a href="http://en.wikipedia.org/wiki/Logic_error" title="Logic error">logic errors</a>); <a href="http://en.wikipedia.org/wiki/Memory_error" title="Memory error" class="mw-redirect">memory errors</a> will also be prevented. Type systems are often specified as part of <a href="Programming_language.html" title="Programming language">programming languages</a>, and built into the interpreters and compilers for them; although the type system of a language can be extended by <a href="http://en.wikipedia.org/wiki/Extended_static_checking" title="Extended static checking">optional tools</a> that perform additional kinds of checks using the language's original type syntax and grammar.</p>
<p>A <a href="Compiler.html" title="Compiler">compiler</a> may also use the static type of a value to optimize the storage it needs and the choice of algorithms for operations on the value. In many <a href="C_(programming_language).html" title="C (programming language)">C</a> compilers the <i>float</i> <a href="Data_type.html" title="Data type">data type</a>, for example, is represented in 32 <a href="Bit.html" title="Bit">bits</a>, in accord with the <a href="http://en.wikipedia.org/wiki/IEEE_754-2008" title="IEEE 754-2008" class="mw-redirect">IEEE specification for single-precision floating point numbers</a>. They will thus use floating-point-specific <a href="http://en.wikipedia.org/wiki/Instruction_set" title="Instruction set">microprocessor operations</a> on those values (floating-point addition, multiplication, etc.).</p>
<p>The depth of type constraints and the manner of their evaluation affect the <i>typing</i> of the language. A <a href="Programming_language.html" title="Programming language">programming language</a> may further associate an operation with varying concrete algorithms on each type in the case of <a href="Type_polymorphism.html" title="Type polymorphism" class="mw-redirect">type polymorphism</a>. <a href="Type_theory.html" title="Type theory">Type theory</a> is the study of type systems, although the concrete type systems of programming languages originate from practical issues of computer architecture, compiler implementation, and language design.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Fundamentals"><span class="tocnumber">1</span> <span class="toctext">Fundamentals</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Type_checking"><span class="tocnumber">2</span> <span class="toctext">Type checking</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Static_type-checking"><span class="tocnumber">2.1</span> <span class="toctext">Static type-checking</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Dynamic_type-checking_and_runtime_type_information"><span class="tocnumber">2.2</span> <span class="toctext">Dynamic type-checking and runtime type information</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Combining_static_and_dynamic_type-checking"><span class="tocnumber">2.3</span> <span class="toctext">Combining static and dynamic type-checking</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Static_and_dynamic_type_checking_in_practice"><span class="tocnumber">2.4</span> <span class="toctext">Static and dynamic type checking in practice</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#.22Strong.22_and_.22weak.22_type_systems"><span class="tocnumber">2.5</span> <span class="toctext">"Strong" and "weak" type systems</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Type_safety_and_memory_safety"><span class="tocnumber">2.6</span> <span class="toctext">Type safety and memory safety</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Variable_levels_of_type_checking"><span class="tocnumber">2.7</span> <span class="toctext">Variable levels of type checking</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Optional_type_systems"><span class="tocnumber">2.8</span> <span class="toctext">Optional type systems</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-11"><a href="#Polymorphism_and_types"><span class="tocnumber">3</span> <span class="toctext">Polymorphism and types</span></a>
<ul>
<li class="toclevel-2 tocsection-12"><a href="#Duck_typing"><span class="tocnumber">3.1</span> <span class="toctext">Duck typing</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-13"><a href="#Specialized_type_systems"><span class="tocnumber">4</span> <span class="toctext">Specialized type systems</span></a>
<ul>
<li class="toclevel-2 tocsection-14"><a href="#Dependent_types"><span class="tocnumber">4.1</span> <span class="toctext">Dependent types</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Linear_types"><span class="tocnumber">4.2</span> <span class="toctext">Linear types</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="#Intersection_types"><span class="tocnumber">4.3</span> <span class="toctext">Intersection types</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="#Union_types"><span class="tocnumber">4.4</span> <span class="toctext">Union types</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#Existential_types"><span class="tocnumber">4.5</span> <span class="toctext">Existential types</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-19"><a href="#Explicit_or_implicit_declaration_and_inference"><span class="tocnumber">5</span> <span class="toctext">Explicit or implicit declaration and inference</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="#Types_of_types"><span class="tocnumber">6</span> <span class="toctext">Types of types</span></a></li>
<li class="toclevel-1 tocsection-21"><a href="#Unified_type_system"><span class="tocnumber">7</span> <span class="toctext">Unified type system</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="#Compatibility:_equivalence_and_subtyping"><span class="tocnumber">8</span> <span class="toctext">Compatibility: equivalence and subtyping</span></a></li>
<li class="toclevel-1 tocsection-23"><a href="#Programming_style"><span class="tocnumber">9</span> <span class="toctext">Programming style</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="#See_also"><span class="tocnumber">10</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="#References"><span class="tocnumber">11</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="#Further_reading"><span class="tocnumber">12</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="#External_links"><span class="tocnumber">13</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Fundamentals">Fundamentals</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=1" title="Edit section: Fundamentals">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Formally, <a href="Type_theory.html" title="Type theory">type theory</a> studies type systems. A programming language must have occurrence to type check using the <i>type system</i> whether at compiler time or runtime, manually annotated or automatically inferred. As <a href="http://en.wikipedia.org/w/index.php?title=Mark_Manasse&amp;action=edit&amp;redlink=1" class="new" title="Mark Manasse (page does not exist)">Mark Manasse</a> concisely put it:<sup id="cite_ref-FOOTNOTEPierce2002208_3-0" class="reference"><a href="#cite_note-FOOTNOTEPierce2002208-3"><span>[</span>3<span>]</span></a></sup></p>
<blockquote class="templatequote">
<p>The fundamental problem addressed by a type theory is to ensure that programs have meaning. The fundamental problem caused by a type theory is that meaningful programs may not have meanings ascribed to them. The quest for richer type systems results from this tension.</p>
</blockquote>
<p>Assigning a data type, what is called <i>typing</i>, gives meaning to a sequences of <a href="Bit.html" title="Bit">bits</a> such as a value in <a href="Computer_memory.html" title="Computer memory">memory</a> or some <a href="http://en.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">object</a> such as a <a href="http://en.wikipedia.org/wiki/Variable_(computer_science)" title="Variable (computer science)">variable</a>. The hardware of a <a href="http://en.wikipedia.org/wiki/General_purpose_computer" title="General purpose computer" class="mw-redirect">general purpose computer</a> is unable to discriminate between for example a <a href="http://en.wikipedia.org/wiki/Memory_address" title="Memory address">memory address</a> and an <a href="http://en.wikipedia.org/wiki/Instruction_code_(programming)" title="Instruction code (programming)" class="mw-redirect">instruction code</a>, or between a <a href="Character_(computing).html" title="Character (computing)">character</a>, an <a href="http://en.wikipedia.org/wiki/Integer" title="Integer">integer</a>, or a <a href="Floating-point_number.html" title="Floating-point number" class="mw-redirect">floating-point number</a>, because it makes no intrinsic distinction between any of the possible values that a sequence of bits might <i>mean</i>. Associating a sequence of bits with a type conveys that <a href="http://en.wiktionary.org/wiki/meaning" class="extiw" title="wikt:meaning">meaning</a> to the programmable hardware to form a <i><a href="http://en.wikipedia.org/wiki/Symbolic_system" title="Symbolic system">symbolic system</a></i> composed of that hardware and some program.</p>
<p>A program associates each value with at least one particular type, but it also can occur that one value is associated with many <a href="http://en.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">subtypes</a>. Other entities, such as <a href="http://en.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">objects</a>, <a href="http://en.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a>, communication channels, <a href="http://en.wikipedia.org/wiki/Dependency_(computer_science)" title="Dependency (computer science)" class="mw-redirect">dependencies</a> can become associated with a type. Even a type can become associated with a type. An implementation of some <i>type system</i> could in theory associate some identifications named this way:</p>
<ul>
<li><a href="Data_type.html" title="Data type">data type</a>&#160;– a type of a value</li>
<li><a href="http://en.wikipedia.org/wiki/Class_(computer_science)" title="Class (computer science)" class="mw-redirect">class</a>&#160;– a type of an object</li>
<li><a href="http://en.wikipedia.org/wiki/Kind_(type_theory)" title="Kind (type theory)">kind (type theory)</a>&#160;– a <i>type of a type</i>, or metatype</li>
</ul>
<p>These are the kinds of abstractions typing can go through on a hierarchy of levels contained in a system.</p>
<p>When a programming language evolves a more elaborate type system, it gains a more finely-grained rule set than basic type checking, but this comes at a price when the type inferences (and other properties) become <a href="Undecidable_problem.html" title="Undecidable problem">undecidable</a>, and when more attention must be paid by the programmer to annotate code or to consider computer-related operations and functioning. It is challenging to find a sufficiently expressive type system that satisfies all programming practices in a <a href="http://en.wikipedia.org/wiki/Type_safe" title="Type safe" class="mw-redirect">type safe</a> manner.</p>
<p>The more type restrictions that are imposed by the compiler, the more <i>strongly typed</i> a programming language is. Strongly typed languages often require the programmer to make explicit conversions in contexts where an implicit conversion would cause no harm. Pascal's type system has been described as "too strong" because, for example, the size of an array or string is part of its type, making some programming tasks difficult.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup> <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> is also strongly typed but its types are automatically inferred so that explicit conversions are unnecessary.</p>
<p>A programming language compiler can also implement a <i><a href="http://en.wikipedia.org/wiki/Dependent_type" title="Dependent type">dependent type</a></i> or an <i><a href="http://en.wikipedia.org/wiki/Effect_system" title="Effect system">effect system</a></i>, which enables even more program specifications to be verified by a type checker. Beyond simple value-type pairs, a virtual "region" of code is associated with an "effect" component describing <i>what</i> is being done <i>with what</i>, and enabling for example to "throw" an error report. Thus the symbolic system may be a <i>type and effect system</i>, which endows it with more safety checking than type checking alone.</p>
<p>Whether automated by the compiler or specified by a programmer, a type system makes program behavior illegal that is outside the type-system rules. Advantages provided by programmer-specified type systems include:</p>
<ul>
<li><i>Abstraction</i> (or <i>modularity</i>)&#160;– Types enable programmers to think at a higher level than the bit or byte, not bothering with low-level implementation. For example, programmers can begin to think of a string as a collection of character values instead of as a mere array of bytes. Higher still, types enable programmers to think about and express <a href="http://en.wikipedia.org/wiki/Interface_(computer_science)" title="Interface (computer science)" class="mw-redirect">interfaces</a> between two of <i>any</i>-sized subsystems. This enables more levels of localization so that the definitions required for interoperability of the subsystems remain consistent when those two subsystems communicate.</li>
<li><i>Documentation</i>&#160;– In more expressive type systems, types can serve as a form of <a href="http://en.wikipedia.org/wiki/Documentation" title="Documentation">documentation</a> clarifying the intent of the programmer. For instance, if a programmer declares a function as returning a timestamp type, this documents the function when the timestamp type can be explicitly declared deeper in the code to be integer type.</li>
</ul>
<p>Advantages provided by compiler-specified type systems include:</p>
<ul>
<li><i>Optimization</i>&#160;– Static type-checking may provide useful compile-time information. For example, if a type requires that a value must align in memory at a multiple of four bytes, the compiler may be able to use more efficient machine instructions.</li>
<li><i>Safety</i>&#160;– A type system enables the <a href="Compiler.html" title="Compiler">compiler</a> to detect meaningless or probably invalid code. For example, we can identify an expression <code>3 / "Hello, World"</code> as invalid, when the rules do not specify how to divide an <a href="http://en.wikipedia.org/wiki/Integer" title="Integer">integer</a> by a <a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">string</a>. Strong typing offers more safety, but cannot guarantee complete <i><a href="http://en.wikipedia.org/wiki/Type_safety" title="Type safety">type safety</a></i>.</li>
</ul>
<p>Type safety contributes to <a href="http://en.wikipedia.org/wiki/Program_correctness" title="Program correctness" class="mw-redirect">program correctness</a>, but can only guarantee correctness at the expense of making the type checking itself an <a href="Undecidable_problem.html" title="Undecidable problem">undecidable problem</a>. In a <i>type system</i> with automated type checking a program may prove to run incorrectly yet be safely typed, and produce no compiler errors. Division by zero is an unsafe and incorrect operation, but a type checker running only at <a href="http://en.wikipedia.org/wiki/Compile_time" title="Compile time">compile time</a> doesn't scan for <a href="http://en.wikipedia.org/wiki/Division_by_zero" title="Division by zero">division by zero</a> in most programming languages, and then it is left as a <a href="http://en.wikipedia.org/wiki/Runtime_error" title="Runtime error" class="mw-redirect">runtime error</a>. To prove the absence of these more-general-than-types defects, other kinds of <a href="http://en.wikipedia.org/wiki/Formal_method" title="Formal method" class="mw-redirect">formal methods</a>, collectively known as <a href="http://en.wikipedia.org/wiki/Program_analysis_(computer_science)" title="Program analysis (computer science)" class="mw-redirect">program analyses</a>, are in common use. In addition <a href="Software_testing.html" title="Software testing">software testing</a> is an <a href="http://en.wikipedia.org/wiki/Empirical" title="Empirical" class="mw-redirect">empirical</a> method for finding errors that the type checker cannot detect.</p>
<h2><span class="mw-headline" id="Type_checking">Type checking</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=2" title="Edit section: Type checking">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The process of verifying and enforcing the constraints of types&#160;– <i>type checking</i>&#160;– may occur either at <a href="http://en.wikipedia.org/wiki/Compile-time" title="Compile-time" class="mw-redirect">compile-time</a> (a static check) or <a href="Run_time_(program_lifecycle_phase).html" title="Run time (program lifecycle phase)">run-time</a> (a dynamic check). If a language specification requires its typing rules strongly (i.e., more or less allowing only those automatic type conversions that do not lose information), one can refer to the process as <i>strongly typed</i>, if not, as <i>weakly typed</i>. The terms are not usually used in a strict sense.</p>
<h3><span class="mw-headline" id="Static_type-checking"><span id="STATIC"></span>Static type-checking</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=3" title="Edit section: Static type-checking">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Static type-checking is the process of verifying the type safety of a program based on analysis of a program's text (source code). If a program passes a static type-checker, then the program is guaranteed to satisfy some set of type-safety properties for all possible inputs.</p>
<p>Because static type-checking operates on a program's text, it allows many bugs to be <a href="http://en.wikipedia.org/wiki/Fail-fast" title="Fail-fast">caught early</a> in the development cycle.</p>
<p>Static type-checking can be thought of as a limited form of <a href="http://en.wikipedia.org/wiki/Program_verification" title="Program verification" class="mw-redirect">program verification</a> (see <a href="http://en.wikipedia.org/wiki/Type_safety" title="Type safety">type safety</a>). In a type-safe language, static type-checking can also be thought of as an optimization. If a compiler can prove that a program is well-typed, then it does not need to emit dynamic safety checks, allowing the resulting compiled binary to run faster.</p>
<p>Static type-checking for Turing-complete languages is inherently conservative. That is, if a type system is both <i>sound</i> (meaning that it rejects all incorrect programs) and <i>decidable</i> (meaning that it is possible to write an algorithm which determines whether a program is well-typed), then it will always be possible to define a program which is well-typed but which does not satisfy the type-checker.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6"><span>[</span>6<span>]</span></a></sup> For example, consider a program containing the code:</p>
<p><code>if &lt;complex test&gt; then &lt;do something&gt; else &lt;type error&gt;</code></p>
<p>Even if the expression <code>&lt;complex test&gt;</code> always evaluates to <code>true</code> at run-time, most type-checkers will reject the program as ill-typed, because it is difficult (if not impossible) for a static analyzer to determine that the <code>else</code> branch will not be taken.<sup id="cite_ref-FOOTNOTEPierce2002_7-0" class="reference"><a href="#cite_note-FOOTNOTEPierce2002-7"><span>[</span>7<span>]</span></a></sup> Conversely, a static type-checker will quickly detect type errors in rarely-used code paths. Without static type checking, even <a href="http://en.wikipedia.org/wiki/Code_coverage" title="Code coverage">code coverage</a> tests with 100% coverage may be unable to find such type errors. The tests may fail to detect such type errors, because the combination of all places where values are created and all places where a certain value is used must be taken into account.</p>
<p>A number of useful and common programming language features cannot be checked statically, such as <a href="http://en.wikipedia.org/wiki/Downcasting" title="Downcasting">downcasting</a>. Therefore, many languages will have both static and dynamic type-checking; the static type-checker verifies what it can, and dynamic checks verify the rest.</p>
<p>Many languages with static type-checking provide a way to bypass the type checker. Some languages allow programmers to choose between static and dynamic type safety. For example, <a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a> distinguishes between "statically-typed" and "dynamically-typed" variables; uses of the former are checked statically, while uses of the latter are checked dynamically. Other languages allow users to write code which is not type-safe. For example, in <a href="C_(programming_language).html" title="C (programming language)">C</a>, programmers can freely cast a value between any two types which have the same size.</p>
<p>For a list of languages with static type-checking, see <a href="http://en.wikipedia.org/wiki/Category:Statically_typed_programming_languages" title="Category:Statically typed programming languages">the category for statically typed languages</a>.</p>
<h3><span class="mw-headline" id="Dynamic_type-checking_and_runtime_type_information"><span id="DYNAMIC"></span>Dynamic type-checking and runtime type information</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=4" title="Edit section: Dynamic type-checking and runtime type information">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Dynamic type-checking is the process of verifying the type safety of a program at runtime. Implementations of dynamically type-checked languages generally associate runtime objects with "tags" containing their type information. This runtime type information (RTTI) can also be used to implement <a href="http://en.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic dispatch</a>, <a href="http://en.wikipedia.org/wiki/Late_binding" title="Late binding">late binding</a>, <a href="http://en.wikipedia.org/wiki/Downcasting" title="Downcasting">downcasting</a>, <a href="http://en.wikipedia.org/wiki/Reflection_(computer_programming)" title="Reflection (computer programming)">reflection</a>, and similar features.</p>
<p>Most type-safe languages include some form of dynamic type-checking, even if they also have a static type checker. The reason for this is that many useful features or properties are difficult or impossible to verify statically. For example, suppose that a program defines two types, A and B, where B is a subtype of A. If the program tries to convert a value of type A to type B, then the operation is legal only if the value being converted is actually a value of type B. Therefore, a dynamic check is needed to verify that the operation is safe.</p>
<p>By definition, dynamic type-checking may cause a program to fail at runtime. In some programming languages, it is possible to anticipate and recover from these failures. In others, type-checking errors are considered fatal.</p>
<p>Programming languages which include dynamic type-checking but not static type-checking are often called "dynamically-typed programming languages". For a list of such languages, see <a href="http://en.wikipedia.org/wiki/Category:Dynamically_typed_programming_languages" title="Category:Dynamically typed programming languages">the category for dynamically typed programming languages</a>.</p>
<h3><span class="mw-headline" id="Combining_static_and_dynamic_type-checking"><span id="COMBINED"></span>Combining static and dynamic type-checking</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=5" title="Edit section: Combining static and dynamic type-checking">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The presence of static type-checking in a programming language does not necessarily imply the absence of dynamic type-checking. For example, Java and some other ostensibly statically typed languages support <a href="http://en.wikipedia.org/wiki/Downcasting" title="Downcasting">downcasting</a> types to their <a href="http://en.wikipedia.org/wiki/Subtypes" title="Subtypes" class="mw-redirect">subtypes</a>, querying an object to discover its dynamic type and other type operations that depend on runtime type information. More generally, most programming languages include mechanisms for dispatching over different 'kinds' of data, such as <a href="http://en.wikipedia.org/wiki/Disjoint_union" title="Disjoint union">disjoint unions</a>, <a href="http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming" class="mw-redirect">subtype polymorphism</a>, and <a href="http://en.wikipedia.org/wiki/Variant_type" title="Variant type">variant types</a>. Even when not interacting with type annotations or type checking, such mechanisms are materially similar to dynamic typing implementations. See <a href="Programming_language.html" title="Programming language">programming language</a> for more discussion of the interactions between static and dynamic typing.</p>
<p>Objects in object oriented languages are usually accessed by a reference whose static target type (or manifest type) is equal to either the object's run-time type (its latent type) or a supertype thereof. This is conformant with the <a href="http://en.wikipedia.org/wiki/Liskov_substitution_principle" title="Liskov substitution principle">Liskov substitution principle</a> that states that all operations performed on an instance of a given type can also be performed on an instance of a subtype. This concept is also known as subsumption. In some languages subtypes may also possess <a href="http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)" title="Covariance and contravariance (computer science)">covariant or contravariant</a> return types and argument types respectively.</p>
<p>Certain languages, for example <a href="http://en.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, or <a href="http://en.wikipedia.org/wiki/Cython" title="Cython">Cython</a>, are dynamically type-checked by default, but allow programs to opt into static type-checking by providing optional annotations. One reason to use such hints would be to optimize the performance of critical sections of a program.</p>
<p>As of version 4.0, the C# language provides a way to indicate that a variable should not be statically type-checked. A variable whose type is <code>dynamic</code> will not be subject to static type-checking. Instead, the program relies on runtime type information to determine how the variable may be used.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8"><span>[</span>8<span>]</span></a></sup></p>
<h3><span class="mw-headline" id="Static_and_dynamic_type_checking_in_practice">Static and dynamic type checking in practice</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=6" title="Edit section: Static and dynamic type checking in practice">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The choice between static and dynamic typing requires <a href="http://en.wikipedia.org/wiki/Trade-off" title="Trade-off">trade-offs</a>.</p>
<p>Static typing can find type errors reliably at compile time. This should increase the reliability of the delivered program. However, programmers disagree over how commonly type errors occur, and thus disagree over the proportion of those bugs that are coded that would be caught by appropriately representing the designed types in code. Static typing advocates believe programs are more reliable when they have been well type-checked, while dynamic typing advocates point to distributed code that has proven reliable and to small bug databases. The value of static typing, then, presumably increases as the strength of the type system is increased. Advocates of <a href="http://en.wikipedia.org/wiki/Dependent_type" title="Dependent type">dependently typed languages</a> such as <a href="http://en.wikipedia.org/wiki/Dependent_ML" title="Dependent ML">Dependent ML</a> and <a href="http://en.wikipedia.org/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a> have suggested that almost all bugs can be considered type errors, if the types used in a program are properly declared by the programmer or correctly inferred by the compiler.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9"><span>[</span>9<span>]</span></a></sup></p>
<p>Static typing usually results in compiled code that executes more quickly. When the compiler knows the exact data types that are in use, it can produce optimized machine code. Further, compilers for statically typed languages can find assembler shortcuts more easily. Some dynamically typed languages such as <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> allow optional type declarations for optimization for this very reason. Static typing makes this pervasive. See <a href="http://en.wikipedia.org/wiki/Optimization_(computer_science)" title="Optimization (computer science)" class="mw-redirect">optimization</a>.</p>
<p>By contrast, dynamic typing may allow compilers to run more quickly and allow <a href="http://en.wikipedia.org/wiki/Language_interpretation" title="Language interpretation">interpreters</a> to dynamically load new code, since changes to source code in dynamically typed languages may result in less checking to perform and less code to revisit. This too may reduce the edit-compile-test-debug cycle.</p>
<p>Statically typed languages that lack <a href="http://en.wikipedia.org/wiki/Type_inference" title="Type inference">type inference</a> (such as C and Java) require that programmers declare the types they intend a method or function to use. This can serve as additional documentation for the program, which the compiler will not permit the programmer to ignore or permit to drift out of synchronization. However, a language can be statically typed without requiring type declarations (examples include <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, <a href="http://en.wikipedia.org/wiki/Scala_(programming_language)" title="Scala (programming language)">Scala</a>, <a href="http://en.wikipedia.org/wiki/OCaml_(programming_language)" title="OCaml (programming language)" class="mw-redirect">OCaml</a>, <a href="http://en.wikipedia.org/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a> and to a lesser extent <a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a>), so explicit type declaration is not a necessary requirement for static typing in all languages.</p>
<p>Dynamic typing allows constructs that some static type checking would reject as illegal. For example, <i><a href="http://en.wikipedia.org/wiki/Eval" title="Eval">eval</a></i> functions, which execute arbitrary data as code, become possible. An <i>eval</i> function is possible with static typing, but requires advanced uses of <a href="http://en.wikipedia.org/wiki/GADT" title="GADT" class="mw-redirect">algebraic data types</a>. Furthermore, dynamic typing better accommodates transitional code and prototyping, such as allowing a placeholder data structure (<a href="http://en.wikipedia.org/wiki/Mock_object" title="Mock object">mock object</a>) to be transparently used in place of a full-fledged data structure (usually for the purposes of experimentation and testing).</p>
<p>Dynamic typing typically allows <a href="http://en.wikipedia.org/wiki/Duck_typing" title="Duck typing">duck typing</a> (which enables <a href="http://en.wikipedia.org/wiki/Duck_typing#Comparison_with_other_type_systems" title="Duck typing">easier code reuse</a>). Many languages with static typing also feature <a href="http://en.wikipedia.org/wiki/Duck_typing#In_statically_typed_languages" title="Duck typing">duck typing</a> or other mechanisms like <a href="Generic_programming.html" title="Generic programming">generic programming</a> which also enables easier code reuse.</p>
<p>Dynamic typing typically makes <a href="http://en.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a> easier to use. For example, <a href="C%2b%2b.html" title="C++">C++</a> <a href="http://en.wikipedia.org/wiki/Template_(programming)" title="Template (programming)" class="mw-redirect">templates</a> are typically more cumbersome to write than the equivalent <a href="Ruby_(programming_language).html" title="Ruby (programming language)">Ruby</a> or <a href="Python_(programming_language).html" title="Python (programming language)">Python</a> code. More advanced run-time constructs such as <a href="http://en.wikipedia.org/wiki/Metaclass" title="Metaclass">metaclasses</a> and <a href="http://en.wikipedia.org/wiki/Introspection_(computer_science)" title="Introspection (computer science)" class="mw-redirect">introspection</a> are often more difficult to use in statically typed languages. In some languages, such features may also be used e.g. to generate new types and behaviors on the fly, based on run-time data. Such advanced constructs are often provided by <a href="http://en.wikipedia.org/wiki/Dynamic_programming_language" title="Dynamic programming language">dynamic programming languages</a>; many of these are dynamically typed, although <i>dynamic typing</i> need not be related to <i>dynamic programming languages</i>.</p>
<h3><span class="mw-headline" id=".22Strong.22_and_.22weak.22_type_systems">"Strong" and "weak" type systems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=7" title="Edit section: &quot;Strong&quot; and &quot;weak&quot; type systems">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Strong_and_weak_typing" title="Strong and weak typing">Strong and weak typing</a></div>
<p>Languages are often colloquially referred to as "strongly typed" or "weakly typed". In fact, there is no universally accepted definition of what these terms mean. In general, there are more precise terms to represent the differences between type systems that lead people to call them "strong" or "weak".</p>
<h3><span class="mw-headline" id="Type_safety_and_memory_safety">Type safety and memory safety</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=8" title="Edit section: Type safety and memory safety">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Type_safety" title="Type safety">Type safety</a></div>
<p>A third way of categorizing the type system of a programming language uses the safety of typed operations and conversions. Computer scientists consider a language "type-safe" if it does not allow operations or conversions that violate the rules of the type system.</p>
<p>Some observers use the term <i>memory-safe language</i> (or just <i>safe language</i>) to describe languages that do not allow programs to access memory that has not been assigned for their use. For example, a memory-safe language will <a href="Bounds_checking.html" title="Bounds checking">check array bounds</a>, or else statically guarantee (i.e., at compile time before execution) that array accesses out of the array boundaries will cause compile-time and perhaps runtime errors.</p>
<p>Consider the following program of a language that is both type-safe and memory-safe:<sup id="cite_ref-10" class="reference"><a href="#cite_note-10"><span>[</span>10<span>]</span></a></sup></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="text source-text">
<ol>
<li class="li1">
<pre class="de1">
var x := 5;     
</pre></li>
<li class="li1">
<pre class="de1">
var y := "37";  
</pre></li>
<li class="li1">
<pre class="de1">
var z := x + y;
</pre></li>
</ol>
</div>
</div>
<p>In this example, the variable <code><span class="mw-geshi text source-text">z</span></code> will have the value 42. While this may not be what the programmer anticipated, it is a well-defined result. If <code><span class="mw-geshi text source-text">y</span></code> was a different string, one that could not be converted to a number (e.g. "Hello World"), the result would be well-defined as well. Note that a program can be type-safe or memory-safe and still crash on an invalid operation; in fact, if a program encounters an operation which is not type-safe, terminating the program is often the only option.</p>
<p>Now consider a similar example in C:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<ol>
<li class="li1">
<pre class="de1">
<span class="kw4">int</span> x <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">;</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="kw4">char</span> y<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="st0">"37"</span><span class="sy0">;</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="kw4">char</span><span class="sy0">*</span> z <span class="sy0">=</span> x <span class="sy0">+</span> y<span class="sy0">;</span>
</pre></li>
</ol>
</div>
</div>
<p>In this example <span class="mw-geshi c source-c">z</span> will point to a memory address five characters beyond <span class="mw-geshi c source-c">y</span>, equivalent to three characters after the terminating zero character of the string pointed to by <span class="mw-geshi c source-c">y</span>. This is memory that the program is not expected to access. It may contain garbage data, and it certainly doesn't contain anything useful. As this example shows, C is neither a memory-safe nor a type-safe language.</p>
<p>In general, type-safety and memory-safety go hand in hand. For example, a language which supports pointer arithmetic and number-to-pointer conversions (like C) is neither memory-safe nor type-safe, since it allows arbitrary memory to be accessed as if it were valid memory of any type.</p>
<p>For more information, see <a href="http://en.wikipedia.org/wiki/Memory_safety" title="Memory safety">memory safety</a>.</p>
<h3><span class="mw-headline" id="Variable_levels_of_type_checking">Variable levels of type checking</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=9" title="Edit section: Variable levels of type checking">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Some languages allow different levels of checking to apply to different regions of code. Examples include:-</p>
<ul>
<li>The <code>use strict</code> directive in <a href="http://en.wikipedia.org/wiki/Javascript" title="Javascript" class="mw-redirect">javascript</a><sup id="cite_ref-11" class="reference"><a href="#cite_note-11"><span>[</span>11<span>]</span></a></sup><sup id="cite_ref-12" class="reference"><a href="#cite_note-12"><span>[</span>12<span>]</span></a></sup><sup id="cite_ref-13" class="reference"><a href="#cite_note-13"><span>[</span>13<span>]</span></a></sup> and <a href="Perl.html" title="Perl">Perl</a> applies stronger checking.</li>
<li>The <code>@</code> operator in <a href="PHP.html" title="PHP">PHP</a> suppresses some error messages.</li>
<li>The <code lang="vb" xml:lang="vb">Option Strict On</code> in <a href="http://en.wikipedia.org/wiki/VB.NET" title="VB.NET" class="mw-redirect">VB.NET</a> allows the compiler to require a conversion between objects.</li>
</ul>
<p>Additional tools such as <a href="http://en.wikipedia.org/wiki/Lint_(software)" title="Lint (software)">lint</a> and <a href="IBM_Rational_Purify.html" title="IBM Rational Purify">IBM Rational Purify</a> can also be used to achieve a higher level of strictness.</p>
<h3><span class="mw-headline" id="Optional_type_systems">Optional type systems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=10" title="Edit section: Optional type systems">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>It has been proposed, chiefly by <a href="http://en.wikipedia.org/wiki/Gilad_Bracha" title="Gilad Bracha">Gilad Bracha</a>, that the choice of type system be made independent of choice of language; that a type system should be a module that can be "plugged" into a language as required. He believes this is advantageous, because what he calls mandatory type systems make languages less expressive and code more fragile.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14"><span>[</span>14<span>]</span></a></sup> The requirement that types do not affect the semantics of the language is difficult to fulfill; for instance, class-based inheritance becomes impossible.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2014)">citation needed</span></a></i>]</sup></p>
<p>Optional typing is related to <a href="http://en.wikipedia.org/wiki/Gradual_typing" title="Gradual typing">gradual typing</a>, but still distinct from it.<sup id="cite_ref-15" class="reference"><a href="#cite_note-15"><span>[</span>15<span>]</span></a></sup><sup class="noprint Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:NOTRS" title="Wikipedia:NOTRS" class="mw-redirect"><span title="This claim needs references to better sources. (March 2014)">better&#160;source&#160;needed</span></a></i>]</sup></p>
<h2><span class="mw-headline" id="Polymorphism_and_types">Polymorphism and types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=11" title="Edit section: Polymorphism and types">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)">Polymorphism (computer science)</a></div>
<p>The term "polymorphism" refers to the ability of code (in particular, methods or classes) to act on values of multiple types, or to the ability of different instances of the same data structure to contain elements of different types. Type systems that allow polymorphism generally do so in order to improve the potential for code re-use: in a language with polymorphism, programmers need only implement a data structure such as a list or an <a href="Associative_array.html" title="Associative array">associative array</a> once, rather than once for each type of element with which they plan to use it. For this reason computer scientists sometimes call the use of certain forms of polymorphism <i><a href="Generic_programming.html" title="Generic programming">generic programming</a></i>. The type-theoretic foundations of polymorphism are closely related to those of <a href="http://en.wikipedia.org/wiki/Abstraction_(computer_science)" title="Abstraction (computer science)">abstraction</a>, <a href="http://en.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modularity</a> and (in some cases) <a href="http://en.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">subtyping</a>.</p>
<h3><span class="mw-headline" id="Duck_typing">Duck typing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=12" title="Edit section: Duck typing">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Duck_typing" title="Duck typing">Duck typing</a></div>
<p>In "duck typing",<sup id="cite_ref-16" class="reference"><a href="#cite_note-16"><span>[</span>16<span>]</span></a></sup> a statement calling a <a href="http://en.wikipedia.org/wiki/Method_(computer_science)" title="Method (computer science)" class="mw-redirect">method</a> <code>m</code> on an object does not rely on the declared type of the object; only that the object, of whatever type, must supply an implementation of the method called, when called, at run-time.</p>
<p>Duck typing differs from <a href="http://en.wikipedia.org/wiki/Structural_type_system" title="Structural type system">structural typing</a> in that, if the <i>part</i> (of the whole module structure) needed for a given local computation is present <i>at runtime</i>, the duck type system is satisfied in its type identity analysis. On the other hand, a structural type system would require the analysis of the whole module structure at compile time to determine type identity or type dependence.</p>
<p>Duck typing differs from a <a href="Nominative_type_system.html" title="Nominative type system" class="mw-redirect">nominative type system</a> in a number of aspects. The most prominent ones are that for duck typing, type information is determined at runtime (as contrasted to compile time), and the name of the type is irrelevant to determine type identity or type dependence; only partial structure information is required for that for a given point in the program execution.</p>
<p>Duck typing uses the premise that (referring to a value) "if it walks like a duck, and quacks like a duck, then it is a duck" (this is a reference to the <a href="http://en.wikipedia.org/wiki/Duck_test" title="Duck test">duck test</a> that is attributed to <a href="http://en.wikipedia.org/wiki/James_Whitcomb_Riley" title="James Whitcomb Riley">James Whitcomb Riley</a>). The term may have been coined<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (January 2011)">citation needed</span></a></i>]</sup> by <a href="http://en.wikipedia.org/wiki/Alex_Martelli" title="Alex Martelli">Alex Martelli</a> in a 2000 message<sup id="cite_ref-17" class="reference"><a href="#cite_note-17"><span>[</span>17<span>]</span></a></sup> to the comp.lang.python <a href="http://en.wikipedia.org/wiki/Newsgroup" title="Newsgroup" class="mw-redirect">newsgroup</a> (see <a href="Python_(programming_language).html" title="Python (programming language)">Python</a>).</p>
<p>Duck typing has been demonstrated to increase programmer productivity in a controlled experiment.<sup id="cite_ref-18" class="reference"><a href="#cite_note-18"><span>[</span>18<span>]</span></a></sup><sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability"><span title="The material near this tag failed verification of its source citation(s). (December 2012)">not in citation given</span></a></i>]</sup></p>
<h2><span class="mw-headline" id="Specialized_type_systems">Specialized type systems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=13" title="Edit section: Specialized type systems">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Many type systems have been created that are specialized for use in certain environments with certain types of data, or for out-of-band <a href="http://en.wikipedia.org/wiki/Static_program_analysis" title="Static program analysis">static program analysis</a>. Frequently, these are based on ideas from formal <a href="Type_theory.html" title="Type theory">type theory</a> and are only available as part of prototype research systems.</p>
<h3><span class="mw-headline" id="Dependent_types">Dependent types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=14" title="Edit section: Dependent types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="http://en.wikipedia.org/wiki/Dependent_type" title="Dependent type">Dependent types</a> are based on the idea of using scalars or values to more precisely describe the type of some other value. For example, <img class="tex" alt="matrix(3, 3)" src="http://upload.wikimedia.org/math/4/4/2/442f39c4768df0e3042a37a1a13229f1.png" /> might be the type of a 3×3 matrix. We can then define typing rules such as the following rule for matrix multiplication:</p>
<p><img class="tex" alt="matrix_{multiply}&#160;: matrix(k, m) \times matrix(m, n) \to matrix(k, n)" src="http://upload.wikimedia.org/math/e/e/1/ee17e3cb571b8367a00a0b7dcc68ef72.png" /></p>
<p>where <img class="tex" alt="k" src="http://upload.wikimedia.org/math/8/c/e/8ce4b16b22b58894aa86c421e8759df3.png" />, <img class="tex" alt="m" src="http://upload.wikimedia.org/math/6/f/8/6f8f57715090da2632453988d9a1501b.png" />, <img class="tex" alt="n" src="http://upload.wikimedia.org/math/7/b/8/7b8b965ad4bca0e41ab51de7b31363a1.png" /> are arbitrary positive integer values. A variant of <a href="http://en.wikipedia.org/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> called <a href="http://en.wikipedia.org/wiki/Dependent_ML" title="Dependent ML">Dependent ML</a> has been created based on this type system, but because type checking for conventional dependent types is <a href="http://en.wikipedia.org/wiki/Decidable_set" title="Decidable set" class="mw-redirect">undecidable</a>, not all programs using them can be type-checked without some kind of limits. Dependent ML limits the sort of equality it can decide to <a href="http://en.wikipedia.org/wiki/Presburger_arithmetic" title="Presburger arithmetic">Presburger arithmetic</a>.</p>
<p>Other languages such as <a href="http://en.wikipedia.org/wiki/Epigram_(programming_language)" title="Epigram (programming language)">Epigram</a> make the value of all expressions in the language decidable so that type checking can be decidable. However, in general <a href="http://en.wikipedia.org/wiki/Halting_Problem" title="Halting Problem" class="mw-redirect">proof of decidability is undecidable</a>, so many programs require hand-written annotations, which may be very non-trivial. As this impedes the development process many language implementations provide an easy way out in the form of an option to disable this condition. This, however, comes at the cost of making the type-checker run in an <a href="http://en.wikipedia.org/wiki/Infinite_loop" title="Infinite loop">infinite loop</a> when fed programs that don't type-check, causing the compiler to hang.</p>
<h3><span class="mw-headline" id="Linear_types">Linear types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=15" title="Edit section: Linear types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="http://en.wikipedia.org/wiki/Linear_type" title="Linear type" class="mw-redirect">Linear types</a>, based on the theory of <a href="http://en.wikipedia.org/wiki/Linear_logic" title="Linear logic">linear logic</a>, and closely related to <a href="http://en.wikipedia.org/wiki/Uniqueness_type" title="Uniqueness type">uniqueness types</a>, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large <a href="http://en.wikipedia.org/wiki/Immutable_value" title="Immutable value" class="mw-redirect">immutable values</a> such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object (such as '<code>str = str + "a"</code>') can be optimized "under the hood" into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating <a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>. They are also used in the prototype operating system <a href="http://en.wikipedia.org/wiki/Singularity_(operating_system)" title="Singularity (operating system)">Singularity</a> for interprocess communication, statically ensuring that processes cannot share objects in shared memory in order to prevent race conditions. The <a href="http://en.wikipedia.org/wiki/Clean_(programming_language)" title="Clean (programming language)">Clean</a> language (a <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>-like language) uses this type system in order to gain a lot of speed<sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability"><span title="The material in the vicinity of this tag may lack enough specific information to be verifiable (June 2011)">not specific enough to verify</span></a></i>]</sup> while remaining safe.</p>
<h3><span class="mw-headline" id="Intersection_types">Intersection types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=16" title="Edit section: Intersection types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="http://en.wikipedia.org/wiki/Intersection_type" title="Intersection type" class="mw-redirect">Intersection types</a> are types describing values that belong to <i>both</i> of two other given types with overlapping value sets. For example, in most implementations of C the signed char has range -128 to 127 and the unsigned char has range 0 to 255, so the intersection type of these two types would have range 0 to 127. Such an intersection type could be safely passed into functions expecting <i>either</i> signed or unsigned chars, because it is compatible with both types.</p>
<p>Intersection types are useful for describing overloaded function types: For example, if "<span class="mw-geshi c source-c"><span class="kw4">int</span></span> → <span class="mw-geshi c source-c"><span class="kw4">int</span></span>" is the type of functions taking an integer argument and returning an integer, and "<span class="mw-geshi c source-c"><span class="kw4">float</span></span> → <span class="mw-geshi c source-c"><span class="kw4">float</span></span>" is the type of functions taking a float argument and returning a float, then the intersection of these two types can be used to describe functions that do one or the other, based on what type of input they are given. Such a function could be passed into another function expecting an "<span class="mw-geshi c source-c"><span class="kw4">int</span></span> → <span class="mw-geshi c source-c"><span class="kw4">int</span></span>" function safely; it simply would not use the "<span class="mw-geshi c source-c"><span class="kw4">float</span></span> → <span class="mw-geshi c source-c"><span class="kw4">float</span></span>" functionality.</p>
<p>In a subclassing hierarchy, the intersection of a type and an ancestor type (such as its parent) is the most derived type. The intersection of sibling types is empty.</p>
<p>The Forsythe language includes a general implementation of intersection types. A restricted form is <a href="http://en.wikipedia.org/wiki/Refinement_type" title="Refinement type" class="mw-redirect">refinement types</a>.</p>
<h3><span class="mw-headline" id="Union_types">Union types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=17" title="Edit section: Union types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="http://en.wikipedia.org/wiki/Union_type" title="Union type">Union types</a> are types describing values that belong to <i>either</i> of two types. For example, in C, the signed char has range -128 to 127, and the unsigned char has range 0 to 255, so the union of these two types would have range -128 to 255. Any function handling this union type would have to deal with integers in this complete range. More generally, the only valid operations on a union type are operations that are valid on <i>both</i> types being unioned. C's "union" concept is similar to union types, but is not typesafe, as it permits operations that are valid on <i>either</i> type, rather than <i>both</i>. Union types are important in program analysis, where they are used to represent symbolic values whose exact nature (e.g., value or type) is not known.</p>
<p>In a subclassing hierarchy, the union of a type and an ancestor type (such as its parent) is the ancestor type. The union of sibling types is a subtype of their common ancestor (that is, all operations permitted on their common ancestor are permitted on the union type, but they may also have other valid operations in common).</p>
<h3><span class="mw-headline" id="Existential_types">Existential types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=18" title="Edit section: Existential types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="http://en.wikipedia.org/wiki/Existential_quantifier" title="Existential quantifier" class="mw-redirect">Existential</a> types are frequently used in connection with <a href="http://en.wikipedia.org/wiki/Record_type" title="Record type" class="mw-redirect">record types</a> to represent <a href="http://en.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a> and <a href="Abstract_data_type.html" title="Abstract data type">abstract data types</a>, due to their ability to separate implementation from interface. For example, the type "T = ∃X { a: X; f: (X → int); }" describes a module interface that has a data member named <i>a</i> of type <i>X</i> and a function named <i>f</i> that takes a parameter of the <i>same</i> type <i>X</i> and returns an integer. This could be implemented in different ways; for example:</p>
<ul>
<li>intT = { a: int; f: (int → int); }</li>
<li>floatT = { a: float; f: (float → int); }</li>
</ul>
<p>These types are both subtypes of the more general existential type T and correspond to concrete implementation types, so any value of one of these types is a value of type T. Given a value "t" of type "T", we know that "t.f(t.a)" is well-typed, regardless of what the abstract type <i>X</i> is. This gives flexibility for choosing types suited to a particular implementation while clients that use only values of the interface type—the existential type—are isolated from these choices.</p>
<p>In general it's impossible for the typechecker to infer which existential type a given module belongs to. In the above example intT { a: int; f: (int → int); } could also have the type ∃X { a: X; f: (int → int); }. The simplest solution is to annotate every module with its intended type, e.g.:</p>
<ul>
<li>intT = { a: int; f: (int → int); } <b>as</b> ∃X { a: X; f: (X → int); }</li>
</ul>
<p>Although abstract data types and modules had been implemented in programming languages for quite some time, it wasn't until 1988 that <a href="http://en.wikipedia.org/wiki/John_C._Mitchell" title="John C. Mitchell">John C. Mitchell</a> and <a href="http://en.wikipedia.org/wiki/Gordon_Plotkin" title="Gordon Plotkin">Gordon Plotkin</a> established the formal theory under the slogan: "Abstract [data] types have existential type".<sup id="cite_ref-19" class="reference"><a href="#cite_note-19"><span>[</span>19<span>]</span></a></sup> The theory is a second-order <a href="http://en.wikipedia.org/wiki/Typed_lambda_calculus" title="Typed lambda calculus">typed lambda calculus</a> similar to <a href="http://en.wikipedia.org/wiki/System_F" title="System F">System F</a>, but with existential instead of universal quantification.</p>
<h2><span class="mw-headline" id="Explicit_or_implicit_declaration_and_inference">Explicit or implicit declaration and inference</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=19" title="Edit section: Explicit or implicit declaration and inference">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="rellink boilerplate seealso">For more details on this topic, see <a href="http://en.wikipedia.org/wiki/Type_inference" title="Type inference">Type inference</a>.</div>
<p>Many static type systems, such as those of C and Java, require <i>type declarations</i>: The programmer must explicitly associate each variable with a particular type. Others, such as Haskell's, perform <i><a href="http://en.wikipedia.org/wiki/Type_inference" title="Type inference">type inference</a></i>: The compiler draws conclusions about the types of variables based on how programmers use those variables. For example, given a function <span class="mw-geshi java source-java">f<span class="br0">(</span>x, y<span class="br0">)</span></span> that adds <span class="mw-geshi java source-java">x</span> and <span class="mw-geshi java source-java">y</span> together, the compiler can infer that <span class="mw-geshi java source-java">x</span> and <span class="mw-geshi java source-java">y</span> must be numbers&#160;– since addition is only defined for numbers. Therefore, any call to <span class="mw-geshi java source-java">f</span> elsewhere in the program that specifies a non-numeric type (such as a string or list) as an argument would signal an error.</p>
<p>Numerical and string constants and expressions in code can and often do imply type in a particular context. For example, an expression <span class="mw-geshi java source-java"><span class="nu0">3.14</span></span> might imply a type of <a href="http://en.wikipedia.org/wiki/Floating-point" title="Floating-point" class="mw-redirect">floating-point</a>, while <span class="mw-geshi java source-java"><span class="br0">[</span><span class="nu0">1</span>, <span class="nu0">2</span>, <span class="nu0">3</span><span class="br0">]</span></span> might imply a list of integers&#160;– typically an <a href="Array_data_structure.html" title="Array data structure">array</a>.</p>
<p>Type inference is in general possible, if it is <a href="http://en.wikipedia.org/wiki/Decidability_(logic)" title="Decidability (logic)">decidable</a> in the type theory in question. Moreover, even if inference is undecidable in general for a given type theory, inference is often possible for a large subset of real-world programs. Haskell's type system, a version of <a href="http://en.wikipedia.org/wiki/Type_inference#Hindley.E2.80.93Milner_type_inference_algorithm" title="Type inference">Hindley-Milner</a>, is a restriction of <a href="http://en.wikipedia.org/wiki/System_F-omega" title="System F-omega" class="mw-redirect">System Fω</a> to so-called rank-1 polymorphic types, in which type inference is decidable. Most Haskell compilers allow arbitrary-rank polymorphism as an extension, but this makes type inference undecidable. (Type checking is decidable, however, and rank-1 programs still have type inference; higher rank polymorphic programs are rejected unless given explicit type annotations.)</p>
<h2><span class="mw-headline" id="Types_of_types">Types of types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=20" title="Edit section: Types of types">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="rellink relarticle mainarticle">Main article: <a href="Data_type.html" title="Data type">Data type</a></div>
<p>A <i>type of types</i> is a <a href="http://en.wikipedia.org/wiki/Kind_(type_theory)" title="Kind (type theory)">kind</a>. Kinds appear explicitly in <a href="http://en.wikipedia.org/wiki/Typeful_programming" title="Typeful programming">typeful programming</a>, such as a <i>type constructor</i> in the <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a> language.</p>
<p>Types fall into several broad categories:</p>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Primitive_type" title="Primitive type" class="mw-redirect">Primitive types</a>&#160;– the simplest kind of type; e.g., <a href="http://en.wikipedia.org/wiki/Integer" title="Integer">integer</a> and <a href="Floating-point_number.html" title="Floating-point number" class="mw-redirect">floating-point number</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Boolean_data_type" title="Boolean data type">Boolean</a></li>
<li><a href="http://en.wikipedia.org/wiki/Integral_type" title="Integral type" class="mw-redirect">Integral types</a>&#160;– types of whole numbers; e.g., integers and natural numbers</li>
<li><a href="http://en.wikipedia.org/wiki/Floating_point_type" title="Floating point type" class="mw-redirect">Floating point types</a>&#160;– types of numbers in <a href="http://en.wikipedia.org/wiki/Floating-point" title="Floating-point" class="mw-redirect">floating-point</a> representation</li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Reference_type" title="Reference type">Reference types</a></li>
<li><a href="http://en.wikipedia.org/wiki/Option_type" title="Option type">Option types</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Nullable_type" title="Nullable type">Nullable types</a></li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Composite_type" title="Composite type" class="mw-redirect">Composite types</a>&#160;– types composed of basic types; e.g., <a href="Array_data_structure.html" title="Array data structure">arrays</a> or <a href="http://en.wikipedia.org/wiki/Record_(computer_science)" title="Record (computer science)">records</a>.
<dl>
<dd><a href="Abstract_data_type.html" title="Abstract data type">Abstract data types</a></dd>
</dl>
</li>
<li><a href="http://en.wikipedia.org/wiki/Algebraic_types" title="Algebraic types" class="mw-redirect">Algebraic types</a></li>
<li><a href="http://en.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">Subtype</a></li>
<li><a href="http://en.wikipedia.org/wiki/Derived_class" title="Derived class" class="mw-redirect">Derived type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Object_type" title="Object type" class="mw-redirect">Object types</a>; e.g., <a href="http://en.wikipedia.org/wiki/Type_variable" title="Type variable">type variable</a></li>
<li><a href="http://en.wikipedia.org/wiki/Partial_type" title="Partial type" class="mw-redirect">Partial type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Recursive_type" title="Recursive type" class="mw-redirect">Recursive type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Function_type" title="Function type">Function types</a>; e.g., binary functions</li>
<li><a href="http://en.wikipedia.org/wiki/Universal_quantification" title="Universal quantification">universally quantified</a> types, such as parameterized types</li>
<li><a href="http://en.wikipedia.org/wiki/Existential_quantification" title="Existential quantification">existentially quantified</a> types, such as <a href="http://en.wikipedia.org/wiki/Module_(programming)" title="Module (programming)" class="mw-redirect">modules</a></li>
<li><a href="http://en.wikipedia.org/wiki/Refinement_type" title="Refinement type" class="mw-redirect">Refinement types</a>&#160;– types that identify subsets of other types</li>
<li><a href="http://en.wikipedia.org/wiki/Dependent_type" title="Dependent type">Dependent types</a>&#160;– types that depend on terms (values)</li>
<li><a href="http://en.wikipedia.org/w/index.php?title=Ownership_type&amp;action=edit&amp;redlink=1" class="new" title="Ownership type (page does not exist)">Ownership types</a>&#160;– types that describe or constrain the structure of object-oriented systems</li>
<li>Pre-defined types provided for convenience in real-world applications, such as date, time and money.</li>
</ul>
<h2><span class="mw-headline" id="Unified_type_system">Unified type system</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=21" title="Edit section: Unified type system">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Some languages like <a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a> have a unified type system.<sup id="cite_ref-20" class="reference"><a href="#cite_note-20"><span>[</span>20<span>]</span></a></sup> This means that all <a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a> types including primitive types inherit from a single root object. Every type in <a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a> inherits from the Object class. <a href="Java_(programming_language).html" title="Java (programming language)">Java</a> has several primitive types that are not objects. Java provides wrapper object types that exist together with the primitive types so developers can use either the wrapper object types or the simpler non-object primitive types.</p>
<h2><span class="mw-headline" id="Compatibility:_equivalence_and_subtyping">Compatibility: equivalence and subtyping</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=22" title="Edit section: Compatibility: equivalence and subtyping">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>A type-checker for a statically typed language must verify that the type of any <a href="Expression_(programming).html" title="Expression (programming)" class="mw-redirect">expression</a> is consistent with the type expected by the context in which that expression appears. For instance, in an <a href="http://en.wikipedia.org/wiki/Assignment_statement" title="Assignment statement" class="mw-redirect">assignment statement</a> of the form <code>x&#160;:= <i>e</i></code>, the inferred type of the expression <i><code>e</code></i> must be consistent with the declared or inferred type of the variable <code>x</code>. This notion of consistency, called <i>compatibility</i>, is specific to each programming language.</p>
<p>If the type of <i><code>e</code></i> and the type of <code>x</code> are the same and assignment is allowed for that type, then this is a valid expression. In the simplest type systems, therefore, the question of whether two types are compatible reduces to that of whether they are <i>equal</i> (or <i>equivalent</i>). Different languages, however, have different criteria for when two type expressions are understood to denote the same type. These different <i>equational theories</i> of types vary widely, two extreme cases being <i><a href="http://en.wikipedia.org/wiki/Structural_type_system" title="Structural type system">structural type systems</a></i>, in which any two types are equivalent that describe values with the same structure, and <i><a href="Nominative_type_system.html" title="Nominative type system" class="mw-redirect">nominative type systems</a></i>, in which no two syntactically distinct type expressions denote the same type (<i>i.e.</i>, types must have the same "name" in order to be equal).</p>
<p>In languages with <a href="http://en.wikipedia.org/wiki/Subtype" title="Subtype" class="mw-redirect">subtyping</a>, the compatibility relation is more complex. In particular, if <code>A</code> is a subtype of <code>B</code>, then a value of type <code>A</code> can be used in a context where one of type <code>B</code> is expected, even if the reverse is not true. Like equivalence, the subtype relation is defined differently for each programming language, with many variations possible. The presence of parametric or ad hoc <a href="http://en.wikipedia.org/wiki/Polymorphism_(computer_science)" title="Polymorphism (computer science)">polymorphism</a> in a language may also have implications for type compatibility.</p>
<h2><span class="mw-headline" id="Programming_style">Programming style</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=23" title="Edit section: Programming style">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Some programmers prefer statically typed languages; others prefer dynamically typed languages. Statically typed languages alert programmers to type errors during compilation, and they may perform better at runtime. Advocates of dynamically typed languages claim they better support rapid prototyping and that type errors are only a small subset of errors in a program.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21"><span>[</span>21<span>]</span></a></sup><sup id="cite_ref-22" class="reference"><a href="#cite_note-22"><span>[</span>22<span>]</span></a></sup> Likewise, there is often no need to manually declare all types in statically typed languages with type inference; thus, the need for the programmer to explicitly specify types of variables is automatically lowered for such languages.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=24" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_type_systems" title="Comparison of type systems">Comparison of type systems</a></li>
<li><a href="http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science)" title="Covariance and contravariance (computer science)">Covariance and contravariance (computer science)</a></li>
<li><a href="http://en.wikipedia.org/wiki/Operator_overloading" title="Operator overloading">Operator overloading</a></li>
<li><a href="http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming" class="mw-redirect">Polymorphism in object-oriented programming</a></li>
<li><a href="Programming_language.html" title="Programming language">Programming language</a></li>
<li><a href="http://en.wikipedia.org/wiki/Signedness" title="Signedness">Signedness</a></li>
<li><a href="http://en.wikipedia.org/wiki/Type_rules" title="Type rules" class="mw-redirect">Type rules</a></li>
<li><a href="http://en.wikipedia.org/wiki/Type_signature" title="Type signature">Type signature</a></li>
<li><a href="Type_theory.html" title="Type theory">Type theory</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=25" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist columns references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-FOOTNOTEPierce20021-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-FOOTNOTEPierce20021_1-0">^</a></b></span> <span class="reference-text"><a href="#CITEREFPierce2002">Pierce 2002</a>, p.&#160;1: "A type system is a tractable syntactic method for proving the absence of certain program behaviors by classifying phrases according to the kinds of values they compute."</span></li>
<li id="cite_note-FOOTNOTECardelli20041-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-FOOTNOTECardelli20041_2-0">^</a></b></span> <span class="reference-text"><a href="#CITEREFCardelli2004">Cardelli 2004</a>, p.&#160;1: "The fundamental purpose of a type system is to prevent the occurrence of <i>execution errors</i> during the running of a program."</span></li>
<li id="cite_note-FOOTNOTEPierce2002208-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-FOOTNOTEPierce2002208_3-0">^</a></b></span> <span class="reference-text"><a href="#CITEREFPierce2002">Pierce 2002</a>, p.&#160;208.</span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://books.google.co.uk/books?id=7i8EAAAAMBAJ&amp;pg=PA66&amp;lpg=PA66&amp;dq=pascal+type+system+%22too+strong%22&amp;source=bl&amp;ots=PGyKS1fWUb&amp;sig=ebFI6fk_yxwyY4b7sHSklp048Q4&amp;hl=en&amp;ei=lSmjTunuBo6F8gPOu43CCA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1&amp;ved=0CBsQ6AEwAA#v=onepage&amp;q=pascal%20type%20system%20%22too%20strong%22&amp;f=false">Infoworld 25 April 1983</a></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.cs.virginia.edu/~cs655/readings/bwk-on-pascal.html"></a><a href="Brian_Kernighan.html" title="Brian Kernighan">Brian Kernighan</a>: <i>Why Pascal is not my favorite language</i></span></li>
<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text"><span class="citation web">R´emy, Didier. <a rel="nofollow" class="external text" href="http://gallium.inria.fr/~remy/mpri/cours1.pdf">"Type systems for programming languages"</a><span class="reference-accessdate">. Retrieved 26 May 2013</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.aufirst=Didier&amp;rft.aulast=R%C2%B4emy&amp;rft.au=R%C2%B4emy%2C+Didier&amp;rft.btitle=Type+systems+for+programming+languages&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fgallium.inria.fr%2F~remy%2Fmpri%2Fcours1.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-FOOTNOTEPierce2002-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-FOOTNOTEPierce2002_7-0">^</a></b></span> <span class="reference-text"><a href="#CITEREFPierce2002">Pierce 2002</a>.</span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/dd264741.aspx">"dynamic (C# Reference)"</a>. <i><a href="http://en.wikipedia.org/wiki/MSDN_Library" title="MSDN Library">MSDN Library</a></i>. Microsoft<span class="reference-accessdate">. Retrieved 14 January 2014</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.atitle=dynamic+%28C%23+Reference%29&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fdd264741.aspx&amp;rft.jtitle=MSDN+Library&amp;rft.pub=Microsoft&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><span class="citation journal">Xi, Hongwei; Scott, Dana (1998). "Dependent Types in Practical Programming". <i>Proceedings of ACM SIGPLAN Symposium on Principles of Programming Languages</i> (ACM Press): 214–227. <a href="http://en.wikipedia.org/wiki/CiteSeer#CiteSeerX" title="CiteSeer">CiteSeerX</a>: <span class="url"><a rel="nofollow" class="external text" href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.548">10.1.1.41.548</a></span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.atitle=Dependent+Types+in+Practical+Programming&amp;rft.aufirst=Hongwei&amp;rft.aulast=Xi&amp;rft.au=Scott%2C+Dana&amp;rft.au=Xi%2C+Hongwei&amp;rft.date=1998&amp;rft.genre=article&amp;rft.jtitle=Proceedings+of+ACM+SIGPLAN+Symposium+on+Principles+of+Programming+Languages&amp;rft.pages=214%E2%80%93227&amp;rft.pub=ACM+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><a href="http://en.wikipedia.org/wiki/Visual_Basic" title="Visual Basic">Visual Basic</a> is an example of a language that is both type-safe and memory-safe.</span></li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.ecma-international.org/publications/standards/Ecma-262.htm">Standard ECMA-262</a>. Ecma-international.org. Retrieved on 2013-07-17.</span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode">Strict mode - JavaScript | MDN</a>. Developer.mozilla.org (2013-07-03). Retrieved on 2013-07-17.</span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/ie/br230269(v=vs.94).aspx">Strict Mode (JavaScript)</a>. Msdn.microsoft.com. Retrieved on 2013-07-17.</span></li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://bracha.org/pluggableTypesPosition.pdf">Bracha, G.: <i>Pluggable Types</i></a></span></li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://stackoverflow.com/a/13414347/975097">http://stackoverflow.com/a/13414347/975097</a></span></li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><span class="citation journal">Rozsnyai, S.; Schiefer, J.; Schatten, A. (2007). "Concepts and models for typing events for event-based systems". <i>Proceedings of the 2007 inaugural international conference on Distributed event-based systems - DEBS '07</i>. p.&#160;62. <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F1266894.1266904">10.1145/1266894.1266904</a>. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/9781595936653" title="Special:BookSources/9781595936653">9781595936653</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.atitle=Proceedings+of+the+2007+inaugural+international+conference+on+Distributed+event-based+systems++-+DEBS+%2707&amp;rft.aufirst=S.&amp;rft.aulast=Rozsnyai&amp;rft.au=Rozsnyai%2C+S.&amp;rft.au=Schatten%2C+A.&amp;rft.au=Schiefer%2C+J.&amp;rft.btitle=Concepts+and+models+for+typing+events+for+event-based+systems&amp;rft.date=2007&amp;rft.genre=bookitem&amp;rft_id=info%3Adoi%2F10.1145%2F1266894.1266904&amp;rft.isbn=9781595936653&amp;rft.pages=62&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span class="plainlinks noprint" style="font-size:smaller"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Cite_doi/10.1145.2F1266894.1266904&amp;action=edit&amp;editintro=Template:Cite_doi/editintro2">edit</a></span></span></li>
<li id="cite_note-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-17">^</a></b></span> <span class="reference-text"><span class="citation newsgroup">Martelli, Alex (26 July 2000). "<a rel="nofollow" class="external text" href="news:8lmvn6017l@news1.newsguy.com">Re: polymorphism (was Re: Type checking in python?)</a>". <a rel="nofollow" class="external text" href="http://groups.google.com/group/comp.lang.python/msg/e230ca916be58835?hl=en&amp;">Web link</a>.</span></span></li>
<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text">Stefan Hanenberg. ”An experiment about static and dynamic type systems: doubts about the positive impact of static type systems on development time“. OOPSLA 2010.</span></li>
<li id="cite_note-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-19">^</a></b></span> <span class="reference-text">Mitchell, John C.; Plotkin, Gordon D.; <a rel="nofollow" class="external text" href="http://theory.stanford.edu/~jcm/papers/mitch-plotkin-88.pdf"><i>Abstract Types Have Existential Type</i></a>, ACM Transactions on Programming Languages and Systems, Vol. 10, No. 3, July 1988, pp. 470–502</span></li>
<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://www.ecma-international.org/publications/standards/Ecma-334.htm">Standard ECMA-334</a>, 8.2.4 Type system unification.</span></li>
<li id="cite_note-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-21">^</a></b></span> <span class="reference-text"><span class="citation web">Meijer, Erik; Drayton, Peter. <a rel="nofollow" class="external text" href="http://research.microsoft.com/en-us/um/people/emeijer/Papers/RDL04Meijer.pdf">"Static Typing Where Possible, Dynamic Typing When Needed: The End of the Cold War Between Programming Languages"</a>. <a href="http://en.wikipedia.org/wiki/Microsoft" title="Microsoft">Microsoft</a> Corporation.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.au=Drayton%2C+Peter&amp;rft.aufirst=Erik&amp;rft.aulast=Meijer&amp;rft.au=Meijer%2C+Erik&amp;rft.btitle=Static+Typing+Where+Possible%2C+Dynamic+Typing+When+Needed%3A+The+End+of+the+Cold+War+Between+Programming+Languages&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Femeijer%2FPapers%2FRDL04Meijer.pdf&amp;rft.pub=Microsoft+Corporation&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-22">^</a></b></span> <span class="reference-text"><span class="citation web">Laucher, Amanda; Snively, Paul. <a rel="nofollow" class="external text" href="http://www.infoq.com/presentations/Types-Tests">"Types vs Tests"</a>. InfoQ.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.aufirst=Amanda&amp;rft.aulast=Laucher&amp;rft.au=Laucher%2C+Amanda&amp;rft.au=Snively%2C+Paul&amp;rft.btitle=Types+vs+Tests&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.infoq.com%2Fpresentations%2FTypes-Tests&amp;rft.pub=InfoQ&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=26" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><span id="CITEREFCardelliWegner1985" class="citation journal"><a href="http://en.wikipedia.org/wiki/Luca_Cardelli" title="Luca Cardelli">Cardelli, Luca</a>; <a href="Peter_Wegner.html" title="Peter Wegner">Wegner, Peter</a> (December 1985). <a rel="nofollow" class="external text" href="http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf">"On Understanding Types, Data Abstraction, and Polymorphism"</a>. <i><a href="http://en.wikipedia.org/wiki/ACM_Computing_Surveys" title="ACM Computing Surveys">ACM Computing Surveys</a></i> (New York, NY, USA: <a href="Association_for_Computing_Machinery.html" title="Association for Computing Machinery">ACM</a>) <b>17</b> (4): 471–523. <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F6041.6042">10.1145/6041.6042</a>. <a href="International_Standard_Serial_Number.html" title="International Standard Serial Number">ISSN</a>&#160;<a rel="nofollow" class="external text" href="http://www.worldcat.org/issn/0360-0300">0360-0300</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.atitle=On+Understanding+Types%2C+Data+Abstraction%2C+and+Polymorphism&amp;rft.au=Cardelli%2C+Luca&amp;rft.aufirst=Luca&amp;rft.aulast=Cardelli&amp;rft.au=Wegner%2C+Peter&amp;rft.date=December+1985&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Flucacardelli.name%2FPapers%2FOnUnderstanding.A4.pdf&amp;rft_id=info%3Adoi%2F10.1145%2F6041.6042&amp;rft.issn=0360-0300&amp;rft.issue=4&amp;rft.jtitle=ACM+Computing+Surveys&amp;rft.pages=471%26ndash%3B523&amp;rft.place=New+York%2C+NY%2C+USA&amp;rft.pub=ACM&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=17" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><span id="CITEREFPierce2002" class="citation book"><a href="http://en.wikipedia.org/wiki/Benjamin_C._Pierce" title="Benjamin C. Pierce">Pierce, Benjamin C.</a> (2002). <i>Types and Programming Languages</i>. MIT Press. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/978-0-262-16209-8" title="Special:BookSources/978-0-262-16209-8">978-0-262-16209-8</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.aufirst=Benjamin+C.&amp;rft.aulast=Pierce&amp;rft.au=Pierce%2C+Benjamin+C.&amp;rft.btitle=Types+and+Programming+Languages&amp;rft.date=2002&amp;rft.genre=book&amp;rft.isbn=978-0-262-16209-8&amp;rft.pub=MIT+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><span id="CITEREFCardelli2004" class="citation book"><a href="http://en.wikipedia.org/wiki/Luca_Cardelli" title="Luca Cardelli">Cardelli, Luca</a> (2004). <a rel="nofollow" class="external text" href="http://lucacardelli.name/Papers/TypeSystems.pdf">"Type systems"</a>. In Allen B. Tucker. <i>CRC Handbook of Computer Science and Engineering</i> (2nd ed.). CRC Press. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/158488360X" title="Special:BookSources/158488360X">158488360X</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AType+system&amp;rft.atitle=CRC+Handbook+of+Computer+Science+and+Engineering&amp;rft.au=Cardelli%2C+Luca&amp;rft.aufirst=Luca&amp;rft.aulast=Cardelli&amp;rft.btitle=Type+systems&amp;rft.date=2004&amp;rft.edition=2nd&amp;rft.genre=bookitem&amp;rft_id=http%3A%2F%2Flucacardelli.name%2FPapers%2FTypeSystems.pdf&amp;rft.isbn=158488360X&amp;rft.pub=CRC+Press&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li>Tratt, Laurence, <a rel="nofollow" class="external text" href="http://tratt.net/laurie/research/publications/html/tratt__dynamically_typed_languages/"><i>Dynamically Typed Languages</i></a>, Advances in Computers, Vol. 77, pp.&#160;149–184, July 2009</li>
</ul>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit&amp;section=27" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x" /></td>
<td class="mbox-text plainlist" style="">The Wikibook <i><a href="http://en.wikibooks.org/wiki/Ada_Programming" class="extiw" title="wikibooks:Ada Programming">Ada Programming</a></i> has a page on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Ada_Programming/Types" class="extiw" title="wikibooks:Ada Programming/Types">Types</a></b></i></td>
</tr>
</table>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x" /></td>
<td class="mbox-text plainlist" style="">The Wikibook <i><a href="http://en.wikibooks.org/wiki/Haskell" class="extiw" title="wikibooks:Haskell">Haskell</a></i> has a page on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Haskell/Class_Declarations" class="extiw" title="wikibooks:Haskell/Class Declarations">Class Declarations</a></b></i></td>
</tr>
</table>
<ul>
<li>Smith, Chris, <a rel="nofollow" class="external text" href="http://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/"><i>What To Know Before Debating Type Systems</i></a></li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:Data_types" title="Template:Data types"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:Data_types" title="Template talk:Data types"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Data_types&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="Data_type.html" title="Data type">Data types</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Uninterpreted</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Bit.html" title="Bit">Bit</a></li>
<li><a href="Byte.html" title="Byte">Byte</a></li>
<li><a href="http://en.wikipedia.org/wiki/Ternary_numeral_system" title="Ternary numeral system">Trit</a></li>
<li><a href="http://en.wikipedia.org/wiki/Ternary_numeral_system#Tryte" title="Ternary numeral system">Tryte</a></li>
<li><a href="http://en.wikipedia.org/wiki/Word_(computer_architecture)" title="Word (computer architecture)">Word</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Numeric</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic" title="Arbitrary-precision arithmetic">Bignum</a></li>
<li><a href="http://en.wikipedia.org/wiki/Complex_data_type" title="Complex data type">Complex</a></li>
<li><a href="http://en.wikipedia.org/wiki/Decimal_data_type" title="Decimal data type">Decimal</a></li>
<li><a href="Fixed-point_arithmetic.html" title="Fixed-point arithmetic">Fixed-point</a></li>
<li><a href="Floating_point.html" title="Floating point">Floating-point</a></li>
<li><a href="http://en.wikipedia.org/wiki/Integer_(computer_science)" title="Integer (computer science)">Integer</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Signedness" title="Signedness">signedness</a></li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Interval_arithmetic" title="Interval arithmetic">Interval</a></li>
<li><a href="http://en.wikipedia.org/wiki/Rational_data_type" title="Rational data type">Rational</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Plain_text.html" title="Plain text">Text</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Character_(computing).html" title="Character (computing)">Character</a></li>
<li><a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">String</a>
<ul>
<li><a href="Null-terminated_string.html" title="Null-terminated string">null-terminated</a></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Pointer_(computer_programming).html" title="Pointer (computer programming)">Pointer</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Memory_address" title="Memory address">Address</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Physical_address" title="Physical address">physical</a></li>
<li><a href="http://en.wikipedia.org/wiki/Virtual_address_space" title="Virtual address space">virtual</a></li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Reference_(computer_science)" title="Reference (computer science)">Reference</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Composite_data_type" title="Composite data type">Composite</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Algebraic_data_type" title="Algebraic data type">Algebraic data type</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Generalized_algebraic_data_type" title="Generalized algebraic data type">generalized</a></li>
</ul>
</li>
<li><a href="Array_data_type.html" title="Array data type">Array</a></li>
<li><a href="Associative_array.html" title="Associative array">Associative array</a></li>
<li><a href="http://en.wikipedia.org/wiki/Class_(computer_programming)" title="Class (computer programming)">Class</a></li>
<li><a href="http://en.wikipedia.org/wiki/Dependent_type" title="Dependent type">Dependent</a></li>
<li><a href="http://en.wikipedia.org/wiki/Intuitionistic_type_theory#Equality_type" title="Intuitionistic type theory">Equality</a></li>
<li><a href="http://en.wikipedia.org/wiki/Inductive_type" title="Inductive type">Inductive</a></li>
<li><a href="http://en.wikipedia.org/wiki/List_(abstract_data_type)" title="List (abstract data type)">List</a></li>
<li><a href="http://en.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">Object</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Metaobject" title="Metaobject">metaobject</a></li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Option_type" title="Option type">Option type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Product_type" title="Product type">Product</a></li>
<li><a href="http://en.wikipedia.org/wiki/Record_(computer_science)" title="Record (computer science)">Record</a></li>
<li><a href="Set_(abstract_data_type).html" title="Set (abstract data type)">Set</a></li>
<li><a href="http://en.wikipedia.org/wiki/Union_type" title="Union type">Union</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Tagged_union" title="Tagged union">tagged</a></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Other</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Boolean_data_type" title="Boolean data type">Boolean</a></li>
<li><a href="http://en.wikipedia.org/wiki/Bottom_type" title="Bottom type">Bottom type</a></li>
<li><a href="Container_(abstract_data_type).html" title="Container (abstract data type)">Collection</a></li>
<li><a href="Enumerated_type.html" title="Enumerated type">Enumerated type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Exception_handling" title="Exception handling">Exception</a></li>
<li><a href="http://en.wikipedia.org/wiki/Function_type" title="Function type">Function type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Opaque_data_type" title="Opaque data type">Opaque data type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Recursive_data_type" title="Recursive data type">Recursive data type</a></li>
<li><a href="Semaphore_(programming).html" title="Semaphore (programming)">Semaphore</a></li>
<li><a href="http://en.wikipedia.org/wiki/Stream_(computing)" title="Stream (computing)">Stream</a></li>
<li><a href="http://en.wikipedia.org/wiki/Top_type" title="Top type">Top type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Type_class" title="Type class">Type class</a></li>
<li><a href="http://en.wikipedia.org/wiki/Unit_type" title="Unit type">Unit type</a></li>
<li><a href="Void_type.html" title="Void type">Void</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Related topics</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Abstract_data_type.html" title="Abstract data type">Abstract data type</a></li>
<li><a href="Data_structure.html" title="Data structure">Data structure</a></li>
<li><a href="Generic_programming.html" title="Generic programming">Generic</a></li>
<li><a href="http://en.wikipedia.org/wiki/Kind_(type_theory)" title="Kind (type theory)">Kind</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Metaclass" title="Metaclass">metaclass</a></li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Parametric_polymorphism" title="Parametric polymorphism">Parametric polymorphism</a></li>
<li><a href="http://en.wikipedia.org/wiki/Primitive_data_type" title="Primitive data type">Primitive data type</a></li>
<li><a href="http://en.wikipedia.org/wiki/Protocol_(object-oriented_programming)" title="Protocol (object-oriented programming)">Protocol</a>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Interface_(computing)#Software_interfaces_in_object-oriented_languages" title="Interface (computing)">interface</a></li>
</ul>
</li>
<li><a href="http://en.wikipedia.org/wiki/Subtyping" title="Subtyping">Subtyping</a></li>
<li><a href="http://en.wikipedia.org/wiki/Type_constructor" title="Type constructor">Type constructor</a></li>
<li><a href="Type_conversion.html" title="Type conversion">Type conversion</a></li>
<li><strong class="selflink">Type system</strong></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1080
CPU time usage: 1.852 seconds
Real time usage: 1.986 seconds
Preprocessor visited node count: 3628/1000000
Preprocessor generated node count: 26361/1500000
Post‐expand include size: 69296/2048000 bytes
Template argument size: 7985/2048000 bytes
Highest expansion depth: 14/40
Expensive parser function count: 12/500
Lua time usage: 0.140/10.000 seconds
Lua memory usage: 2.8 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:199701-0!*!0!!en!4!*!math=0 and timestamp 20140324175557
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;oldid=601064433#Type_checking">http://en.wikipedia.org/w/index.php?title=Type_system&amp;oldid=601064433#Type_checking</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Type_systems" title="Category:Type systems">Type systems</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Data_types" title="Category:Data types">Data types</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Program_analysis" title="Category:Program analysis">Program analysis</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Type_theory" title="Category:Type theory">Type theory</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Articles_lacking_in-text_citations_from_October_2010" title="Category:Articles lacking in-text citations from October 2010">Articles lacking in-text citations from October 2010</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_lacking_in-text_citations" title="Category:All articles lacking in-text citations">All articles lacking in-text citations</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_to_be_merged_from_March_2014" title="Category:Articles to be merged from March 2014">Articles to be merged from March 2014</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_to_be_merged" title="Category:All articles to be merged">All articles to be merged</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_March_2014" title="Category:Articles with unsourced statements from March 2014">Articles with unsourced statements from March 2014</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_pages_needing_factual_verification" title="Category:All pages needing factual verification">All pages needing factual verification</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Wikipedia_articles_needing_factual_verification_from_March_2014" title="Category:Wikipedia articles needing factual verification from March 2014">Wikipedia articles needing factual verification from March 2014</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_January_2011" title="Category:Articles with unsourced statements from January 2011">Articles with unsourced statements from January 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_December_2012" title="Category:Articles with unsourced statements from December 2012">Articles with unsourced statements from December 2012</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Wikipedia_articles_needing_factual_verification_from_June_2011" title="Category:Wikipedia articles needing factual verification from June 2011">Wikipedia articles needing factual verification from June 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_using_fixed_number_of_columns_in_reflist" title="Category:Articles using fixed number of columns in reflist">Articles using fixed number of columns in reflist</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Type+system&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Type+system" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Type_system.html"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Type_system"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Type_system.html" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Type_system" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Type_system" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;oldid=601064433" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q865760" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Type_system&amp;id=601064433" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Type+system">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Type+system&amp;oldid=601064433&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Type_system&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-ar"><a href="http://ar.wikipedia.org/wiki/نظام_الأنواع" title="نظام الأنواع – Arabic" lang="ar" hreflang="ar">العربية</a></li>
			<li class="interlanguage-link interwiki-bn"><a href="http://bn.wikipedia.org/wiki/টাইপ_ব্যবস্থা" title="টাইপ ব্যবস্থা – Bengali" lang="bn" hreflang="bn">বাংলা</a></li>
			<li class="interlanguage-link interwiki-bg"><a href="http://bg.wikipedia.org/wiki/Типизация_на_данните" title="Типизация на данните – Bulgarian" lang="bg" hreflang="bg">Български</a></li>
			<li class="interlanguage-link interwiki-bs"><a href="http://bs.wikipedia.org/wiki/Tip_(računari)" title="Tip (računari) – Bosnian" lang="bs" hreflang="bs">Bosanski</a></li>
			<li class="interlanguage-link interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Typový_systém" title="Typový systém – Czech" lang="cs" hreflang="cs">Čeština</a></li>
			<li class="interlanguage-link interwiki-de"><a href="http://de.wikipedia.org/wiki/Typisierung_(Informatik)#Typsystem" title="Typisierung (Informatik) – German" lang="de" hreflang="de">Deutsch</a></li>
			<li class="interlanguage-link interwiki-el"><a href="http://el.wikipedia.org/wiki/Σύστημα_τύπων" title="Σύστημα τύπων – Greek" lang="el" hreflang="el">Ελληνικά</a></li>
			<li class="interlanguage-link interwiki-es"><a href="http://es.wikipedia.org/wiki/Sistema_de_tipos" title="Sistema de tipos – Spanish" lang="es" hreflang="es">Español</a></li>
			<li class="interlanguage-link interwiki-ko"><a href="http://ko.wikipedia.org/wiki/자료형_체계" title="자료형 체계 – Korean" lang="ko" hreflang="ko">한국어</a></li>
			<li class="interlanguage-link interwiki-it"><a href="http://it.wikipedia.org/wiki/Sistema_dei_tipi" title="Sistema dei tipi – Italian" lang="it" hreflang="it">Italiano</a></li>
			<li class="interlanguage-link interwiki-he"><a href="http://he.wikipedia.org/wiki/מערכת_טיפוסים" title="מערכת טיפוסים – Hebrew" lang="he" hreflang="he">עברית</a></li>
			<li class="interlanguage-link interwiki-ky"><a href="http://ky.wikipedia.org/wiki/Типтештирүү" title="Типтештирүү – Kyrgyz" lang="ky" hreflang="ky">Кыргызча</a></li>
			<li class="interlanguage-link interwiki-ms"><a href="http://ms.wikipedia.org/wiki/Sistem_jenis" title="Sistem jenis – Malay" lang="ms" hreflang="ms">Bahasa Melayu</a></li>
			<li class="interlanguage-link interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Typesysteem" title="Typesysteem – Dutch" lang="nl" hreflang="nl">Nederlands</a></li>
			<li class="interlanguage-link interwiki-ja"><a href="http://ja.wikipedia.org/wiki/型システム" title="型システム – Japanese" lang="ja" hreflang="ja">日本語</a></li>
			<li class="interlanguage-link interwiki-mhr"><a href="http://mhr.wikipedia.org/wiki/Ыҥпалын_типше" title="Ыҥпалын типше – Eastern Mari" lang="mhr" hreflang="mhr">Олык марий</a></li>
			<li class="interlanguage-link interwiki-pl"><a href="http://pl.wikipedia.org/wiki/System_typów" title="System typów – Polish" lang="pl" hreflang="pl">Polski</a></li>
			<li class="interlanguage-link interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Sistema_de_tipos" title="Sistema de tipos – Portuguese" lang="pt" hreflang="pt">Português</a></li>
			<li class="interlanguage-link interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Система_типов" title="Система типов – Russian" lang="ru" hreflang="ru">Русский</a></li>
			<li class="interlanguage-link interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Tyyppijärjestelmä" title="Tyyppijärjestelmä – Finnish" lang="fi" hreflang="fi">Suomi</a></li>
			<li class="interlanguage-link interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Typsystem" title="Typsystem – Swedish" lang="sv" hreflang="sv">Svenska</a></li>
			<li class="interlanguage-link interwiki-th"><a href="http://th.wikipedia.org/wiki/ระบบชนิดตัวแปร" title="ระบบชนิดตัวแปร – Thai" lang="th" hreflang="th">ไทย</a></li>
			<li class="interlanguage-link interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Система_типізації" title="Система типізації – Ukrainian" lang="uk" hreflang="uk">Українська</a></li>
			<li class="interlanguage-link interwiki-zh"><a href="http://zh.wikipedia.org/wiki/類型系統" title="類型系統 – Chinese" lang="zh" hreflang="zh">中文</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q865760#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 24 March 2014 at 17:55.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Type_system#Type_checking" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf19/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["ext.cite","mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1064 in 0.419 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Type_checking by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:57:18 GMT -->
</html>
