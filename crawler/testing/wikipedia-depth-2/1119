http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Comparison_of_Pascal_and_C.html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Comparison_of_Pascal_and_C by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:58:04 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Comparison of Pascal and C - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf19" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Comparison_of_Pascal_and_C" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="Comparison_of_Pascal_and_C.html" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cext.wikihiero%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Comparison_of_Pascal_and_C","wgTitle":"Comparison of Pascal and C","wgCurRevisionId":594131548,"wgRevisionId":594131548,"wgArticleId":1986891,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles with obsolete information from February 2010","All Wikipedia articles in need of updating","Articles lacking in-text citations from June 2013","All articles lacking in-text citations","Articles with weasel words from February 2010","Articles needing additional references from June 2013","All articles needing additional references","Programming language comparisons","C programming language","Pascal","Pascal programming language family"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Comparison_of_Pascal_and_C","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf19/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["pt-br","pt","en-us","en"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q5155775"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":false,
"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:868e43d07ede2616d2d1dc3507cd8145 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","skins.vector.compactPersonalBar.defaultTracking","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","wikibase.client.nolanglinks","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.pascal.source-pascal .de1, .pascal.source-pascal .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.pascal.source-pascal  {font-family:monospace;}
.pascal.source-pascal .imp {font-weight: bold; color: red;}
.pascal.source-pascal li, .pascal.source-pascal .li1 {font-weight: normal; vertical-align:top;}
.pascal.source-pascal .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.pascal.source-pascal .li2 {font-weight: bold; vertical-align:top;}
.pascal.source-pascal .kw1 {color: #000000; font-weight: bold;}
.pascal.source-pascal .kw2 {color: #000000; font-weight: bold;}
.pascal.source-pascal .kw3 {color: #000066;}
.pascal.source-pascal .kw4 {color: #000066; font-weight: bold;}
.pascal.source-pascal .co1 {color: #808080; font-style: italic;}
.pascal.source-pascal .co2 {color: #008000; font-style: italic;}
.pascal.source-pascal .coMULTI {color: #808080; font-style: italic;}
.pascal.source-pascal .es0 {color: #ff0000; font-weight: bold;}
.pascal.source-pascal .br0 {color: #009900;}
.pascal.source-pascal .sy0 {color: #000066;}
.pascal.source-pascal .sy1 {color: #000066;}
.pascal.source-pascal .sy2 {color: #000066;}
.pascal.source-pascal .sy3 {color: #000066;}
.pascal.source-pascal .st0 {color: #ff0000;}
.pascal.source-pascal .nu0 {color: #cc66cc;}
.pascal.source-pascal .me1 {color: #006600;}
.pascal.source-pascal .re0 {color: #0000cc;}
.pascal.source-pascal .re1 {color: #ff0000;}
.pascal.source-pascal .ln-xtra, .pascal.source-pascal li.ln-xtra, .pascal.source-pascal div.ln-xtra {background-color: #ffc;}
.pascal.source-pascal span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf19/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Comparison_of_Pascal_and_C skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Comparison of Pascal and C</span></h1>
						<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><table class="metadata plainlinks ambox ambox-content ambox-multiple_issues compact-ambox" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png" width="40" height="40" /></div>
</td>
<td class="mbox-text">
<table class="collapsible" style="width:95%; background:transparent;">
<tr>
<th style="text-align:left; padding:0.2em 2px 0.2em 0;">This article has multiple issues. <span style="font-weight: normal;">Please help <b><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit">improve it</a></b> or discuss these issues on the <b><a href="http://en.wikipedia.org/wiki/Talk:Comparison_of_Pascal_and_C" title="Talk:Comparison of Pascal and C">talk page</a></b>.</span></th>
</tr>
<tr>
<td>
<table class="metadata plainlinks ambox ambox-content ambox-Update" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Ambox_current_red.svg" class="image"><img alt="Ambox current red.svg" src="http://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Ambox_current_red.svg/42px-Ambox_current_red.svg.png" width="42" height="34" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/98/Ambox_current_red.svg/63px-Ambox_current_red.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/98/Ambox_current_red.svg/84px-Ambox_current_red.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article's <b><a href="http://en.wikipedia.org/wiki/Wikipedia:Accuracy_dispute" title="Wikipedia:Accuracy dispute">factual accuracy</a> may be compromised due to out-of-date information</b>. <span class="hide-when-compact">Please update this article to reflect recent events or newly available information.</span> <small><i>(February 2010)</i></small></span></td>
</tr>
</table>
<table class="metadata plainlinks ambox ambox-style ambox-No_footnotes" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/60px-Text_document_with_red_question_mark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/80px-Text_document_with_red_question_mark.svg.png 2x" /></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article includes a <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">list of references</a>, related reading or <a href="http://en.wikipedia.org/wiki/Wikipedia:External_links" title="Wikipedia:External links">external links</a>, but <b>its sources remain unclear because it lacks <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a></b>. <span class="hide-when-compact">Please <a href="http://en.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check" title="Wikipedia:WikiProject Fact and Reference Check">improve</a> this article by introducing more precise citations.</span> <small><i>(June 2013)</i></small></span></td>
</tr>
</table>
<table class="metadata plainlinks ambox ambox-content ambox-Weasel" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png" width="40" height="40" /></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article <b>contains <a href="http://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Words_to_watch#Unsupported_attributions" title="Wikipedia:Manual of Style/Words to watch">weasel words</a>: vague phrasing that often accompanies <a href="http://en.wikipedia.org/wiki/Wikipedia:Neutral_point_of_view" title="Wikipedia:Neutral point of view">biased</a> or <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">unverifiable</a> information</b>. <span class="hide-when-compact">Such statements should be <a href="http://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Words_to_watch#Improving_weasel-worded_statements" title="Wikipedia:Manual of Style/Words to watch">clarified or removed</a>.</span> <small><i>(February 2010)</i></small></span></td>
</tr>
</table>
</td>
</tr>
</table>
</td>
</tr>
</table>
<table class="vertical-navbox nowraplinks" cellspacing="5" cellpadding="0" style="float:right;clear:right;width:22.0em;margin:0 0 1.0em 1.0em;background:#f9f9f9;border:1px solid #aaa;padding:0.2em;border-spacing:0.4em 0;text-align:center;line-height:1.4em;font-size:88%;">
<tr>
<th class="" style=";padding:0.2em 0.4em 0.2em;;font-size:145%;line-height:1.2em;"><a href="Comparison_of_programming_languages.html" title="Comparison of programming languages">Programming language comparisons</a></th>
</tr>
<tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li><a href="Comparison_of_programming_languages.html" title="Comparison of programming languages">General comparison</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)" title="Comparison of programming languages (syntax)">Basic syntax</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(basic_instructions)" title="Comparison of programming languages (basic instructions)">Basic instructions</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(array)" title="Comparison of programming languages (array)">Arrays</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(mapping)" title="Comparison of programming languages (mapping)">Associative arrays</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(strings)" title="Comparison of programming languages (strings)">String operations</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(string_functions)" title="Comparison of programming languages (string functions)">String functions</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(list_comprehension)" title="Comparison of programming languages (list comprehension)">List comprehension</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_programming_languages_(object-oriented_programming)" title="Comparison of programming languages (object-oriented programming)">Object-oriented programming</a></li>
<li><a href="http://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)" title="Constructor (object-oriented programming)">Object-oriented constructors</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_database_access" title="Comparison of database access">Database access</a></li>
</ul>
</td>
</tr>
<tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Evaluation_strategy" title="Evaluation strategy">Evaluation strategy</a></li>
<li><a href="http://en.wikibooks.org/wiki/Computer_Programming/Hello_world" class="extiw" title="b:Computer Programming/Hello world">List of "Hello World" programs</a></li>
</ul>
</td>
</tr>
<tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_web_application_frameworks" title="Comparison of web application frameworks">Web application frameworks</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_the_Java_and_.NET_platforms" title="Comparison of the Java and .NET platforms">Comparison of the Java and .NET platforms</a></li>
</ul>
</td>
</tr>
<tr>
<td class="" style="padding:0 0.1em 0.4em;text-align: left;">
<ul>
<li>Comparison of individual programming languages
<ul>
<li><a href="http://en.wikipedia.org/wiki/ALGOL_58#ALGOL_58.27s_influence_on_ALGOL_60" title="ALGOL 58">ALGOL 58's influence on ALGOL 60</a></li>
<li><a href="http://en.wikipedia.org/wiki/ALGOL_60#Comparisons_with_other_languages" title="ALGOL 60">ALGOL 60: Comparisons with other languages</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_ALGOL_68_and_C++" title="Comparison of ALGOL 68 and C++">Comparison of ALGOL 68 and C++</a></li>
<li><a href="ALGOL_68.html#Comparisons_with_other_languages" title="ALGOL 68">ALGOL 68: Comparisons with other languages</a></li>
<li><a href="Compatibility_of_C_and_C%2b%2b.html" title="Compatibility of C and C++">Compatibility of C and C++</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_Pascal_and_Delphi" title="Comparison of Pascal and Delphi">Comparison of Pascal and Borland Delphi</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_Object_Pascal_and_C" title="Comparison of Object Pascal and C">Comparison of Object Pascal and C</a></li>
<li><strong class="selflink">Comparison of Pascal and C</strong></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_Java_and_C++" title="Comparison of Java and C++">Comparison of Java and C++</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java" title="Comparison of C Sharp and Java">Comparison of C# and Java</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Visual_Basic_.NET" title="Comparison of C Sharp and Visual Basic .NET">Comparison of C# and Visual Basic .NET</a></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_Visual_Basic_and_Visual_Basic_.NET" title="Comparison of Visual Basic and Visual Basic .NET">Comparison of Visual Basic and Visual Basic .NET</a></li>
</ul>
</li>
</ul>
</td>
</tr>
<tr>
<td style="text-align:right;font-size:115%;">
<div class="plainlinks hlist navbar mini" style="">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:Programming_language_comparisons" title="Template:Programming language comparisons"><span title="View this template" style="">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:Programming_language_comparisons" title="Template talk:Programming language comparisons"><span title="Discuss this template" style="">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Programming_language_comparisons&amp;action=edit"><span title="Edit this template" style="">e</span></a></li>
</ul>
</div>
</td>
</tr>
</table>
<p>The computer <a href="Programming_language.html" title="Programming language">programming languages</a> <a href="C_(programming_language).html" title="C (programming language)">C</a> and <a href="Pascal_(programming_language).html" title="Pascal (programming language)">Pascal</a> have similar times of origin, influences, and purposes. Both were used to design (and compile) their own compilers early in their lifetimes. The original Pascal definition appeared in 1969 and a first compiler in 1970. The first version of C appeared in 1972.</p>
<p>Both are descendants of the <a href="ALGOL.html" title="ALGOL">ALGOL</a> language series. ALGOL introduced <a href="Structured_programming.html" title="Structured programming">structured programming</a>, where programs are constructed of single entry and single exit constructs such as <b>if</b>, <b>while</b>, <b>for</b> and <b>case</b>. Pascal stems directly from <a href="http://en.wikipedia.org/wiki/ALGOL_W" title="ALGOL W">ALGOL W</a>, while it shared some new ideas with <a href="ALGOL_68.html" title="ALGOL 68">ALGOL 68</a>. The C language is more indirectly related to ALGOL, originally through <a href="B_(programming_language).html" title="B (programming language)">B</a>, <a href="BCPL.html" title="BCPL">BCPL</a>, and <a href="CPL_(programming_language).html" title="CPL (programming language)">CPL</a>, and later through ALGOL 68 (for example in case of <tt>struct</tt> and <tt>union</tt>) and also Pascal (for example in case of enumerations, <tt>const</tt>, <tt>typedef</tt> and booleans). Some Pascal dialects also incorporated traits from C.</p>
<p>What is documented here is the Pascal of Niklaus Wirth, as standardized as ISO 7185 in 1982. The C documented is the language of Brian W. Kernighan and Dennis M. Ritchie, as standardized in 1989. The reason is that these versions both represent the mature versions of the language, and also because they are the closest in time. C99 (the later C standard) features and features of new dialects of Pascal are not included in the comparison.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Syntax"><span class="tocnumber">1</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Semicolon_use"><span class="tocnumber">1.1</span> <span class="toctext">Semicolon use</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Comments"><span class="tocnumber">1.2</span> <span class="toctext">Comments</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Identifiers_and_keywords"><span class="tocnumber">1.3</span> <span class="toctext">Identifiers and keywords</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Definitions.2C_declarations.2C_and_blocks"><span class="tocnumber">1.4</span> <span class="toctext">Definitions, declarations, and blocks</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Implementation"><span class="tocnumber">1.5</span> <span class="toctext">Implementation</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="#Simple_types"><span class="tocnumber">2</span> <span class="toctext">Simple types</span></a>
<ul>
<li class="toclevel-2 tocsection-8"><a href="#Integers"><span class="tocnumber">2.1</span> <span class="toctext">Integers</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Subranges"><span class="tocnumber">2.2</span> <span class="toctext">Subranges</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Character_types"><span class="tocnumber">2.3</span> <span class="toctext">Character types</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Boolean_types"><span class="tocnumber">2.4</span> <span class="toctext">Boolean types</span></a>
<ul>
<li class="toclevel-3 tocsection-12"><a href="#Bitwise_operations"><span class="tocnumber">2.4.1</span> <span class="toctext">Bitwise operations</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#A_note_on_implementation"><span class="tocnumber">2.4.2</span> <span class="toctext">A note on implementation</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-14"><a href="#Floating_point_types"><span class="tocnumber">2.5</span> <span class="toctext">Floating point types</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="#Enumeration_types"><span class="tocnumber">2.6</span> <span class="toctext">Enumeration types</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-16"><a href="#Structured_types"><span class="tocnumber">3</span> <span class="toctext">Structured types</span></a>
<ul>
<li class="toclevel-2 tocsection-17"><a href="#Array_types"><span class="tocnumber">3.1</span> <span class="toctext">Array types</span></a>
<ul>
<li class="toclevel-3 tocsection-18"><a href="#Arrays_and_pointers"><span class="tocnumber">3.1.1</span> <span class="toctext">Arrays and pointers</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-19"><a href="#Strings"><span class="tocnumber">3.2</span> <span class="toctext">Strings</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#Record_types"><span class="tocnumber">3.3</span> <span class="toctext">Record types</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-21"><a href="#Pointers"><span class="tocnumber">4</span> <span class="toctext">Pointers</span></a></li>
<li class="toclevel-1 tocsection-22"><a href="#Expressions"><span class="tocnumber">5</span> <span class="toctext">Expressions</span></a>
<ul>
<li class="toclevel-2 tocsection-23"><a href="#Precedence_levels"><span class="tocnumber">5.1</span> <span class="toctext">Precedence levels</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#Typing"><span class="tocnumber">5.2</span> <span class="toctext">Typing</span></a>
<ul>
<li class="toclevel-3 tocsection-25"><a href="#Assignment_and_equality_tests"><span class="tocnumber">5.2.1</span> <span class="toctext">Assignment and equality tests</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-26"><a href="#Implementation_issues"><span class="tocnumber">5.3</span> <span class="toctext">Implementation issues</span></a>
<ul>
<li class="toclevel-3 tocsection-27"><a href="#Logical_connectives"><span class="tocnumber">5.3.1</span> <span class="toctext">Logical connectives</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-28"><a href="#Control_structures"><span class="tocnumber">6</span> <span class="toctext">Control structures</span></a></li>
<li class="toclevel-1 tocsection-29"><a href="#Functions.2C_procedures"><span class="tocnumber">7</span> <span class="toctext">Functions, procedures</span></a></li>
<li class="toclevel-1 tocsection-30"><a href="#Preprocessor"><span class="tocnumber">8</span> <span class="toctext">Preprocessor</span></a></li>
<li class="toclevel-1 tocsection-31"><a href="#Type_escapes"><span class="tocnumber">9</span> <span class="toctext">Type escapes</span></a></li>
<li class="toclevel-1 tocsection-32"><a href="#Files"><span class="tocnumber">10</span> <span class="toctext">Files</span></a></li>
<li class="toclevel-1 tocsection-33"><a href="#Later_Pascal_implementations_and_extensions"><span class="tocnumber">11</span> <span class="toctext">Later Pascal implementations and extensions</span></a></li>
<li class="toclevel-1 tocsection-34"><a href="#See_also"><span class="tocnumber">12</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-35"><a href="#Notes"><span class="tocnumber">13</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-36"><a href="#Further_reading"><span class="tocnumber">14</span> <span class="toctext">Further reading</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Syntax">Syntax</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=1" title="Edit section: Syntax">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <span class="hide-when-compact">Please help improve this section by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(June 2013)</i></small></span></td>
</tr>
</table>
<p><a href="http://en.wikipedia.org/wiki/Programming_language_syntax" title="Programming language syntax" class="mw-redirect">Syntactically</a>, Pascal is much more ALGOL-like than <a href="C_syntax.html" title="C syntax">C</a>. English keywords are retained where C uses punctuation symbols – Pascal has <code>and</code>, <code>or</code>, and <code>mod</code> where C uses <code>&amp;&amp;</code>, <code>||</code>, and <code>%</code> for example. However, C is actually more ALGOL-like than Pascal regarding (simple) declarations, retaining the <i>type-name</i> <i>variable-name</i> syntax. For example, C can accept declarations at the start of any block, not just the outer block of a function.</p>
<h3><span class="mw-headline" id="Semicolon_use">Semicolon use</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=2" title="Edit section: Semicolon use">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Another, more subtle, difference is the role of the <a href="Semicolon.html" title="Semicolon">semicolon</a>. In Pascal semicolons <i>separate</i> individual statements within a compound statement whereas they <i>terminate</i> the statement in C. They are also syntactically part of the statement itself in C (transforming an expression into a statement). This difference manifests itself primarily in two situations:</p>
<ul>
<li>there can never be a semicolon directly before <code>else</code> in Pascal whereas it is mandatory in C (unless a block statement is used)</li>
<li>the last statement before an <code>end</code> is not required to be followed by a semicolon</li>
</ul>
<p>A superfluous semicolon can be put on the last line before <b>end</b>, thereby formally inserting an <i>empty statement</i>.</p>
<h3><span class="mw-headline" id="Comments">Comments</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=3" title="Edit section: Comments">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In traditional C, there are only <code>/* block comments */</code>. This is only supported by certain Pascal dialects like MIDletPascal.</p>
<p>In traditional Pascal, there are <code>{ <i>block comments</i> }</code> and <code>(* <i>block comments</i> *)</code>. Modern Pascal, like Object Pascal (Delphi, FPC), as well as modern C implementations allow C++ style comments <code>// line comments</code></p>
<h3><span class="mw-headline" id="Identifiers_and_keywords">Identifiers and keywords</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=4" title="Edit section: Identifiers and keywords">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>C and Pascal differ in their interpretation of upper and lower case. C is case sensitive while Pascal is not, thus <code>MyLabel</code> and <code>mylabel</code> are distinct names in C but identical in Pascal. In both languages, identifiers consist of letters and digits, with the rule that the first character may not be a digit. In C, the underscore counts as a letter, so even _abc is a valid name. Names with a leading underscore are often used to differentiate special system identifiers in C.</p>
<p>Both C and Pascal use <a href="http://en.wikipedia.org/wiki/Keyword_(computer_programming)" title="Keyword (computer programming)" class="mw-redirect">keywords</a> (words reserved for use by the language itself). Examples are <b>if</b>, <b>while</b>, <b>const</b>, <b>for</b> and <b>goto</b>, which are keywords that happen to be common to both languages. In C, the basic built-in type names are also keywords (e.g. <b>int</b>, <b>char</b>) or combinations of keywords (e.g. <b>unsigned char</b>), while in Pascal the built-in type names are predefined normal identifiers.</p>
<h3><span class="mw-headline" id="Definitions.2C_declarations.2C_and_blocks">Definitions, declarations, and blocks</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=5" title="Edit section: Definitions, declarations, and blocks">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In Pascal, <a href="Subroutine.html" title="Subroutine">procedure</a> definitions start with keywords <b>procedure</b> or <b>function</b> and <a href="http://en.wikipedia.org/wiki/Type_(computer_science)" title="Type (computer science)" class="mw-redirect">type definitions</a> with <b>type</b>. In C, function definitions are determined by syntactical context while type definitions use the keyword <code>typedef</code>. Both languages use a mix of keywords and punctuation for definitions of complex types; for instance, arrays are defined by the keyword <b>array</b> in Pascal and by punctuation in C, while <a href="http://en.wikipedia.org/wiki/Enumeration" title="Enumeration">enumerations</a> are defined by the keyword <code>enum</code> in C but by punctuation in Pascal.</p>
<p>In Pascal functions, <b>begin</b> and <b>end</b> delimit a block of statements (proper), while C functions use "{" and "}" to delimit a block of statements optionally preceded by declarations. C (before C99) strictly defines that any declarations must occur <i>before</i> the statements within a particular block but allows blocks to appear within blocks, which is a way to go around this. Pascal is strict that declarations must occur before statements, but allows <i>definitions</i> of types and functions - not only variable declarations - to be encapsulated by function definitions to any level of depth.</p>
<h3><span class="mw-headline" id="Implementation">Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=6" title="Edit section: Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The grammars of both languages are of a similar size. From an implementation perspective the main difference between the two languages is that to <a href="Parsing.html" title="Parsing">parse</a> C it is necessary to have access to a symbol table for types, while in Pascal there is only one such construct, assignment. For instance, the C fragment <code>X * Y;</code> could be a declaration of <code>Y</code> to be an object whose type is pointer to <code>X</code>, or a statement-expression that multiplies <code>X</code> and <code>Y</code>. The corresponding Pascal fragment <code><b>var</b> Y:^X;</code> is unambiguous without a symbol table.</p>
<h2><span class="mw-headline" id="Simple_types">Simple types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=7" title="Edit section: Simple types">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <span class="hide-when-compact">Please help improve this section by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(June 2013)</i></small></span></td>
</tr>
</table>
<h3><span class="mw-headline" id="Integers">Integers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=8" title="Edit section: Integers">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Pascal requires all variable and function declarations to specify their type explicitly. In traditional C, a type name may be omitted in most contexts and the default type <code>int</code> (which corresponds to <code><a href="http://en.wikipedia.org/wiki/Integer" title="Integer">integer</a></code> in Pascal) is then implicitly assumed (however, such defaults are considered bad practice in C and are often flagged by warnings).</p>
<p>C accommodates different sizes and <a href="http://en.wikipedia.org/wiki/Signedness" title="Signedness">signed and unsigned</a> modes for integers by using modifiers such as <code>long</code>, <code>short</code>, <code>signed</code>, <code>unsigned</code>, etc. The exact meaning of the resulting integer type is machine-dependent, however, what <i>can</i> be guaranteed is that <code>int</code> is at least 16 bits, <code>long int</code> is no shorter than <code>int</code> and <code>short int</code> is no longer than <code>int</code>.</p>
<h3><span class="mw-headline" id="Subranges">Subranges</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=9" title="Edit section: Subranges">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In Pascal, a similar end is performed by declaring a <i>subrange</i> of integer (a compiler may then choose to allocate a smaller amount of storage for the declared variable):</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span> a <span class="sy3">=</span> <span class="nu0">1</span><span class="sy1">..</span><span class="nu0">100</span><span class="sy1">;</span>
     b <span class="sy3">=</span> <span class="sy3">-</span><span class="nu0">20</span><span class="sy1">..</span><span class="nu0">20</span><span class="sy1">;</span>
     c <span class="sy3">=</span> <span class="nu0">0</span><span class="sy1">..</span><span class="nu0">100000</span><span class="sy1">;</span>
</pre></div>
</div>
<p>This subrange feature is not supported by C.</p>
<p>A major, if subtle, difference between C and Pascal is how they promote integer operations. In Pascal, the result of an operation is defined for all integer/subrange types, even if intermediate results do not fit into an integer. The result is undefined only if it does not fit into the integer/subrange on the left hand side of the assignment. This may imply an artificial restriction on the range of integer types, or may require slow execution to handle the intermediate results: However, the compiler may take advantage of restricted subranges to produce more efficient code.</p>
<p>In C, operands must first be promoted to the size of the required result: intermediate results are undefined if they do not fit into the range of the promoted operands. If range of the required result is greater than the range of operands, this normally produces slow inefficient code, even from a good optimising compiler. However, a C compiler is never required or expected to handle out of range intermediate results: it is the programmers responsibility to ensure that all intermediate results fit into the operand range.</p>
<p>The (only) pre-Standard implementation of C as well as Small-C et al. allowed integer and <a href="Pointer_(computer_programming).html" title="Pointer (computer programming)">pointer</a> types to be relatively freely intermixed.</p>
<h3><span class="mw-headline" id="Character_types">Character types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=10" title="Edit section: Character types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In C the character type is <code>char</code> which is a kind of integer that is no longer than <code>short int</code>, . Expressions such as <code>'x'+1</code> are therefore perfectly legal, as are declarations such as <code>int i='i';</code> and <code>char c=74;</code>.</p>
<p>This integer nature of <code>char</code> (one byte) is clearly illustrated by declarations such as</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">unsigned</span> <span class="kw4">char</span> uc <span class="sy0">=</span> <span class="nu0">255</span><span class="sy0">;</span>  <span class="coMULTI">/* common limit */</span>
<span class="kw4">signed</span> <span class="kw4">char</span> sc <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">128</span><span class="sy0">;</span>   <span class="coMULTI">/* common negative limit */</span>
</pre></div>
</div>
<p>Whether the <code>char</code> type should be regarded as <code>signed</code> or <code>unsigned</code> by default is up to the implementation.</p>
<p>In Pascal, characters and integers are distinct types. The inbuilt compiler functions <code>ord()</code> and <code>chr()</code> can be used to typecast single characters to the corresponding integer value of the character set in use, and vice versa. e.g. on systems using the ASCII character set <code>ord('1') = 49</code> and <code>chr(9)</code> is a TAB character.</p>
<h3><span class="mw-headline" id="Boolean_types">Boolean types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=11" title="Edit section: Boolean types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In Pascal, <b><a href="Boolean_datatype.html" title="Boolean datatype" class="mw-redirect">boolean</a></b> is an enumerated type. The possible values of <b>boolean</b> are <b>false</b> and <b>true</b>. For conversion to <b>integer</b>, <b>ord</b> is used:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
i <span class="sy1">:</span><span class="sy3">=</span> <span class="kw3">ord</span><span class="br0">(</span>b<span class="br0">)</span><span class="sy1">;</span>
</pre></div>
</div>
<p>There is no standard function for <b>integer</b> to <b>boolean</b>, however, the conversion is simple in practice:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
b <span class="sy1">:</span><span class="sy3">=</span> i &lt;&gt; <span class="nu0">0</span><span class="sy1">;</span>
</pre></div>
</div>
<p>C has binary valued relational operators (&lt;, &gt;, ==,&#160;!=, &lt;=, &gt;=) which may be regarded as <i>boolean</i> in the sense that they always give results which are either zero or one. As all tests (&amp;&amp;, ||,&#160;?:, <b>if</b>, <b>while</b>, etc.) are performed by zero-checks, <b>false</b> is represented by zero, while <b>true</b> is represented by any other value.</p>
<h4><span class="mw-headline" id="Bitwise_operations">Bitwise operations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=12" title="Edit section: Bitwise operations">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>C allows using <a href="Bitwise_operation.html" title="Bitwise operation">bitwise</a> <a href="Operator_(programming).html" title="Operator (programming)" class="mw-redirect">operators</a> to perform boolean operations. Care must be taken because the semantics are different when operands make use of more than one bit to represent a value.</p>
<p>Pascal has another more abstract, high level method of dealing with bitwise data, <b>sets</b>. Sets allow the programmer to set, clear, intersect, and unite bitwise data values, rather than using direct bitwise operators (which are available in modern Pascal as well). Example;</p>
<p>Pascal:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
Status <span class="sy1">:</span><span class="sy3">=</span> Status <span class="sy3">+</span> <span class="br0">[</span>StickyFlag<span class="br0">]</span><span class="sy1">;</span>
Status <span class="sy1">:</span><span class="sy3">=</span> Status <span class="sy3">-</span> <span class="br0">[</span>StickyFlag<span class="br0">]</span><span class="sy1">;</span>
<span class="kw1">if</span> <span class="br0">(</span>StickyFlag <span class="kw1">in</span> Status<span class="br0">)</span> <span class="kw1">then</span> <span class="sy1">...</span>
</pre></div>
</div>
<p>or</p>
<p>Pascal:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
Status <span class="sy1">:</span><span class="sy3">=</span> Status <span class="kw1">or</span> StickyFlag<span class="sy1">;</span>
Status <span class="sy1">:</span><span class="sy3">=</span> Status <span class="kw3">and</span> <span class="kw1">not</span> StickyFlag<span class="sy1">;</span>
<span class="kw1">if</span> StickyFlag <span class="kw3">and</span> Status <span class="sy3">=</span> StickyFlag <span class="kw1">then</span> <span class="sy1">...</span>
</pre></div>
</div>
<p><br />
C:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
Status <span class="sy0">|=</span> StickyFlag<span class="sy0">;</span>
Status <span class="sy0">&amp;=</span> ~StickyFlag<span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">(</span>Status <span class="sy0">&amp;</span> StickyFlag<span class="br0">)</span> <span class="br0">{</span> ...
</pre></div>
</div>
<p>Although bit operations on integers and operations on sets can be considered similar if the sets are implemented using bits, there is no direct parallel between their uses unless a non-standard conversion between integers and sets is possible.</p>
<h4><span class="mw-headline" id="A_note_on_implementation">A note on implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=13" title="Edit section: A note on implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>During expression evaluation, and in <i>both languages</i>, a boolean value may be internally stored as a single bit, a single byte, a full machine word, a position in the generated code, or as a condition code in a status register, depending on machine, compiler, and situation; these factors are usually more important than the language compiled.</p>
<h3><span class="mw-headline" id="Floating_point_types">Floating point types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=14" title="Edit section: Floating point types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>C has a less strict model of <a href="Floating_point.html" title="Floating point">floating point</a> types than Pascal. In C, integers may be implicitly converted to floating point numbers, and vice versa (though possible precision loss may be flagged by warnings). In Pascal, integers may be implicitly converted to <code>real</code>, but conversion of <code>real</code> to <code>integer</code> (where information may be lost) must be done explicitly via the functions <code>trunc()</code> and <code>round()</code>, which <a href="http://en.wikipedia.org/wiki/Truncation" title="Truncation">truncate</a> or <a href="http://en.wikipedia.org/wiki/Rounding" title="Rounding">round</a> off the fraction, respectively.</p>
<h3><span class="mw-headline" id="Enumeration_types">Enumeration types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=15" title="Edit section: Enumeration types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Both C and Pascal include enumeration types. A Pascal example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span>
  color <span class="sy3">=</span> <span class="br0">(</span>red<span class="sy1">,</span> green<span class="sy1">,</span> blue<span class="br0">)</span><span class="sy1">;</span>
<span class="kw1">var</span>
  a<span class="sy1">:</span> color<span class="sy1">;</span>
</pre></div>
</div>
<p>A C example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw2">enum</span> color <span class="br0">{</span>red<span class="sy0">,</span> green<span class="sy0">,</span> blue<span class="br0">}</span><span class="sy0">;</span>
<span class="kw2">enum</span> color a<span class="sy0">;</span>
</pre></div>
</div>
<p>The behavior of the types in the two languages however is very different. In C, <code>red</code> becomes just a synonym for 0, <code>green</code> for 1, <code>blue</code> for 2, and nothing prevents a value outside this range to be assigned to the variable <code>a</code>. Furthermore, operations like <code>a = a + 1;</code> are strictly forbidden in Pascal; instead you would use <code>a&#160;:= succ(a);</code>. In C, enums can be freely converted to and from ints, but in Pascal, the function ord() must be used to convert from enumerated types to integers, and there is no function to convert from integer to enumerated types.</p>
<h2><span class="mw-headline" id="Structured_types">Structured types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=16" title="Edit section: Structured types">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <span class="hide-when-compact">Please help improve this section by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(June 2013)</i></small></span></td>
</tr>
</table>
<h3><span class="mw-headline" id="Array_types">Array types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=17" title="Edit section: Array types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Both C and Pascal allow <a href="Array_data_type.html" title="Array data type">arrays</a> of other complex types, including other arrays. However, there the similarity between the languages ends. C arrays are simply defined by a base type and the number of elements:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> a<span class="br0">[</span>SIZE<span class="br0">]</span><span class="sy0">;</span>
</pre></div>
</div>
<p>and are always indexed from 0 up to SIZE-1 (i.e. modulo SIZE).</p>
<p>In Pascal, the range of indices is often specified by a subrange (as introduced under simple types above). The ten elements of</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">var</span> a <span class="sy1">:</span> <span class="kw4">array</span><span class="br0">[</span><span class="nu0">0</span><span class="sy1">..</span><span class="nu0">9</span><span class="br0">]</span> <span class="kw1">of</span> <span class="kw4">integer</span><span class="sy1">;</span>
</pre></div>
</div>
<p>would be indexed by 0..9 (just as in C in this case). Array indices can be any <a href="http://en.wikipedia.org/wiki/Ordinal_data_type" title="Ordinal data type">ordinal data type</a>, however, not just ranges:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span>
   TColor <span class="sy3">=</span> <span class="br0">(</span>red<span class="sy1">,</span> green<span class="sy1">,</span> blue<span class="br0">)</span><span class="sy1">;</span>       <span class="coMULTI">(* enumeration *)</span>
   RGB <span class="sy3">=</span> <span class="kw4">array</span><span class="br0">[</span>TColor<span class="br0">]</span> <span class="kw1">of</span> <span class="nu0">0</span><span class="sy1">..</span><span class="nu0">255</span><span class="sy1">;</span>
 
<span class="kw1">var</span> picture <span class="sy1">:</span> <span class="kw4">array</span><span class="br0">[</span><span class="nu0">1</span><span class="sy1">..</span><span class="nu0">640</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">..</span><span class="nu0">480</span><span class="br0">]</span> <span class="kw1">of</span> RGB
 
<span class="kw1">var</span> palette <span class="sy1">:</span> <span class="kw4">array</span><span class="br0">[</span><span class="kw4">byte</span><span class="sy1">,</span> <span class="nu0">0</span><span class="sy1">..</span><span class="nu0">2</span><span class="br0">]</span> <span class="kw1">of</span> <span class="kw4">byte</span>
</pre></div>
</div>
<p>Strings consisting of n (&gt;1) characters are defined as packed arrays with range 1..n.</p>
<h4><span class="mw-headline" id="Arrays_and_pointers">Arrays and pointers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=18" title="Edit section: Arrays and pointers">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In C expressions, an identifier representing an array is treated as a constant pointer to the first element of the array, thus, given the declarations <code>int a[10]</code> and <code>int *p;</code> the assignment <code>p = a</code> is valid and causes p and a to point to the same array. As the identifier <code>a</code> represents a <i>constant</i> address, <code>a = p</code> is not valid however.</p>
<p>While arrays in C are fixed, pointers to them are interchangeable. This flexibility allows C to manipulate any length array using the same code. It also leaves the programmer with the responsibility not to write outside the allocated array, as no checks are built in into the language itself.</p>
<p>In Pascal, arrays are a distinct type from pointers. This makes <a href="Bounds_checking.html" title="Bounds checking">bounds checking</a> for arrays possible from a compiler perspective. Practically all Pascal compilers support range checking as a compile <i>option</i>. The ability to both have arrays that change length at runtime, and be able to check them under language control, is often termed "dynamic arrays". In Pascal the number of elements in each array type is determined at compile-time and cannot be changed during the execution of the program. Hence, it is not possible to define an array whose length depends in any way on program data.</p>
<p>C has the ability to initialize arrays of arbitrary length. The <code><a href="Sizeof.html" title="Sizeof">sizeof</a></code> operator can be used to obtain the size of a statically initialized array in C code. For instance in the following code, the terminating index for the loop automatically adjusts should the list of strings be changed.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">static</span> <span class="kw4">char</span> <span class="sy0">*</span>wordlist<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span>
  <span class="st0">"print"</span><span class="sy0">,</span>   <span class="st0">"out"</span><span class="sy0">,</span>   <span class="st0">"the"</span><span class="sy0">,</span>  <span class="st0">"text"</span><span class="sy0">,</span>   <span class="st0">"message"</span> <span class="br0">}</span><span class="sy0">;</span>
<span class="kw4">static</span> <span class="kw4">int</span> listSize <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">sizeof</span><span class="br0">(</span>wordlist<span class="br0">)</span><span class="sy0">/</span><span class="kw4">sizeof</span><span class="br0">(</span>wordlist<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
<span class="kw4">int</span> i<span class="sy0">;</span>
 
<span class="kw1">for</span> <span class="br0">(</span>i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> i<span class="sy0">&lt;</span>listSize<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span>
  <span class="kw3">puts</span><span class="br0">(</span>wordlist<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span>
<span class="kw1">for</span> <span class="br0">(</span>i<span class="sy0">=</span>listSize<span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span> i<span class="sy0">&gt;=</span><span class="nu0">0</span><span class="sy0">;</span> i<span class="sy0">--</span><span class="br0">)</span>
  <span class="kw3">puts</span><span class="br0">(</span>wordlist<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Pascal has neither array initialization (outside of the case of strings) nor a means of determining arbitrary array sizes at compile time.</p>
<p>One way of implementing the above example in Pascal, but without the automatic size adjustment, is:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">const</span>
  minlist <span class="sy3">=</span> <span class="nu0">1</span><span class="sy1">;</span>
  maxlist <span class="sy3">=</span> <span class="nu0">5</span><span class="sy1">;</span>
  maxword <span class="sy3">=</span> <span class="nu0">7</span><span class="sy1">;</span>
 
<span class="kw1">type</span>
  listrange <span class="sy3">=</span> minlist <span class="sy1">..</span> <span class="me1">maxlist</span><span class="sy1">;</span>
  wordrange <span class="sy3">=</span> <span class="nu0">1</span><span class="sy1">..</span><span class="me1">maxword</span><span class="sy1">;</span>
  <span class="kw4">word</span> <span class="sy3">=</span> <span class="kw4">record</span>
    contents<span class="sy1">:</span> <span class="kw4">packed</span> <span class="kw4">array</span> <span class="br0">[</span>wordrange<span class="br0">]</span> <span class="kw1">of</span> <span class="kw4">char</span><span class="sy1">;</span>
    length<span class="sy1">:</span> wordrange
  <span class="kw1">end</span><span class="sy1">;</span>
  wordlist <span class="sy3">=</span> <span class="kw4">array</span><span class="br0">[</span>listrange<span class="br0">]</span> <span class="kw1">of</span> <span class="kw4">word</span><span class="sy1">;</span>
<span class="kw1">var</span>
  i<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span>
  words<span class="sy1">:</span> wordlist<span class="sy1">;</span>
 
<span class="kw1">procedure</span> CreateList<span class="br0">(</span><span class="kw1">var</span> w<span class="sy1">:</span> wordlist<span class="br0">)</span><span class="sy1">;</span>
<span class="kw1">begin</span>
  w<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">contents</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'print  '</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">length</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">5</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">contents</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'out    '</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">length</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">3</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">contents</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'the    '</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">length</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">3</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">contents</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'text   '</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">length</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">4</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">5</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">contents</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'message'</span><span class="sy1">;</span>
  w<span class="br0">[</span><span class="nu0">5</span><span class="br0">]</span><span class="sy1">.</span><span class="me1">length</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">7</span><span class="sy1">;</span>
<span class="kw1">end</span><span class="sy1">;</span>
 
<span class="kw1">begin</span>
  CreateList<span class="br0">(</span>words<span class="br0">)</span><span class="sy1">;</span>
  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> minlist <span class="kw1">to</span> maxlist <span class="kw1">do</span>
    <span class="kw1">with</span> words<span class="br0">[</span>i<span class="br0">]</span> <span class="kw1">do</span>
      <span class="kw3">WriteLn</span><span class="br0">(</span>contents<span class="sy1">:</span> length<span class="br0">)</span><span class="sy1">;</span>
  <span class="kw1">for</span> i <span class="sy1">:</span><span class="sy3">=</span> maxlist <span class="kw1">downto</span> minlist <span class="kw1">do</span>
    <span class="kw1">with</span> words<span class="br0">[</span>i<span class="br0">]</span> <span class="kw1">do</span>
      <span class="kw3">WriteLn</span><span class="br0">(</span>contents<span class="sy1">:</span> length<span class="br0">)</span>
<span class="kw1">end</span><span class="sy1">.</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="Strings">Strings</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=19" title="Edit section: Strings">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>String are in both languages are primitive arrays of characters.</p>
<p>In Pascal a string literal of length n is compatible with the type <code>packed array [1..n] of char</code>. In C a string generally has the type <code>char[n]</code>.</p>
<p>Pascal suffers from a problem in that it has no support for variable-length arrays, and so any set of routines to perform string operations is dependent on a particular string size. However, the now standardized Pascal "conformant array parameter" extension solves this to a great extent, and many or even most implementations of Pascal have support for strings native to the language.</p>
<p>C automatically terminates string literals with a trailing null character as an end-of-string "sentinel":</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>p<span class="sy0">;</span>
p <span class="sy0">=</span> <span class="st0">"the rain in Spain"</span><span class="sy0">;</span>     <span class="coMULTI">/* null-terminated */</span>
</pre></div>
</div>
<p>Null-termination must be manually maintained for string variables stored in arrays (this is often partly handled by library routines).</p>
<p>C does not have built-in string or array assignment, so the string is not actually being transferred to p, but rather p is being made to point to the constant string in memory.</p>
<p>In Pascal, unlike C, the string's first character element is at index 1 and not 0 (leading it to be <a href="http://en.wikipedia.org/wiki/String_(computer_science)#Length-prefixed" title="String (computer science)">length prefixed</a>). This is because Pascal stores the length of the string at the 0th element of the character array. If this difference is not well understood it can lead to errors when <a href="Porting.html" title="Porting">porting</a> or trying to interface <a href="Object_code.html" title="Object code">object code</a> generated by both languages.</p>
<h3><span class="mw-headline" id="Record_types">Record types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=20" title="Edit section: Record types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Both C and Pascal can declare "<a href="http://en.wikipedia.org/wiki/Object_composition" title="Object composition">record</a>" types. In C, they are termed "structures".</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> a <span class="br0">{</span>
   <span class="kw4">int</span> b<span class="sy0">;</span>
   <span class="kw4">char</span> c<span class="sy0">;</span>
<span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span> a <span class="sy3">=</span> <span class="kw4">record</span> 
   b<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span>
   c<span class="sy1">:</span> <span class="kw4">char</span><span class="sy1">;</span>
<span class="kw1">end</span><span class="sy1">;</span>
</pre></div>
</div>
<p>In Pascal, we can use the sentence "<b>with</b> &lt;name_of_record&gt; do" in order to use directly the fields of that record, like local variables, instead of write &lt;name_of_record&gt;.&lt;name_of_field&gt;. Here there is an example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span> 
 r <span class="sy3">=</span> <span class="kw4">record</span> 
   s<span class="sy1">:</span> <span class="kw4">string</span><span class="sy1">;</span>
   c<span class="sy1">:</span> <span class="kw4">char</span><span class="sy1">;</span>
 <span class="kw1">end</span><span class="sy1">;</span>
<span class="kw1">var</span>
r1 <span class="sy1">:</span> r<span class="sy1">;</span>
<span class="kw1">begin</span>
<span class="kw1">with</span> r1 <span class="kw1">do</span> <span class="kw1">begin</span>
  s <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'foo'</span><span class="sy1">;</span>
  c <span class="sy1">:</span><span class="sy3">=</span> <span class="st0">'b'</span><span class="sy1">;</span>
<span class="kw1">end</span><span class="sy1">;</span>
</pre></div>
</div>
<p>There is no equivalent feature to <b>with</b> in C.</p>
<p><br />
In C, the exact bit length of a field can be specified:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> a <span class="br0">{</span>
   <span class="kw4">unsigned</span> <span class="kw4">int</span> b<span class="sy0">:</span><span class="nu0">3</span><span class="sy0">;</span>
   <span class="kw4">unsigned</span> <span class="kw4">int</span> c<span class="sy0">:</span><span class="nu0">1</span><span class="sy0">;</span>
<span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>How much storage is actually used depends on traits (e.g. word-alignment) of the target system.</p>
<p>This feature is available in Pascal by using the subrange construct (3 bits gives a range from 0 to 7) in association with the keyword <b>packed</b>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span> a <span class="sy3">=</span> <span class="kw4">packed</span> <span class="kw4">record</span>
   b<span class="sy1">:</span> <span class="nu0">0</span><span class="sy1">..</span><span class="nu0">7</span><span class="sy1">;</span>
   c<span class="sy1">:</span> <span class="nu0">0</span><span class="sy1">..</span><span class="nu0">1</span><span class="sy1">;</span>
<span class="kw1">end</span><span class="sy1">;</span>
</pre></div>
</div>
<p>Both C and Pascal support records which can include different fields overlapping each other:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">union</span> a <span class="br0">{</span>
   <span class="kw4">int</span> a<span class="sy0">;</span>
   <span class="kw4">float</span> b<span class="sy0">;</span>
<span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span> a <span class="sy3">=</span> <span class="kw4">record</span>
   <span class="kw1">case</span> <span class="kw4">boolean</span> <span class="kw1">of</span>
      <span class="kw2">false</span><span class="sy1">:</span> <span class="br0">(</span>a<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">;</span>
      <span class="kw2">true</span><span class="sy1">:</span>  <span class="br0">(</span>b<span class="sy1">:</span> <span class="kw4">real</span><span class="br0">)</span>
<span class="kw1">end</span><span class="sy1">;</span>
</pre></div>
</div>
<p>Both language processors are free to allocate only as much space for these records as needed to contain the largest type in the union/record.</p>
<p>The biggest difference between C and Pascal is that Pascal supports the <a href="http://en.wikipedia.org/wiki/Tagged_union" title="Tagged union">explicit use of a "tagfield"</a> for the language processor to determine if the valid component of the variant record is being accessed:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span> a <span class="sy3">=</span> <span class="kw4">record</span>
   <span class="kw1">case</span> q<span class="sy1">:</span> <span class="kw4">boolean</span> <span class="kw1">of</span>
      <span class="kw2">false</span><span class="sy1">:</span> <span class="br0">(</span>a<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">;</span>
      <span class="kw2">true</span><span class="sy1">:</span>  <span class="br0">(</span>b<span class="sy1">:</span> <span class="kw4">real</span><span class="br0">)</span>
<span class="kw1">end</span><span class="sy1">;</span>
</pre></div>
</div>
<p>In this case, the tagfield q must be set to the right state to access the proper parts of the record.</p>
<h2><span class="mw-headline" id="Pointers">Pointers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=21" title="Edit section: Pointers">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In C, pointers can be made to point at most program entities, including objects or functions:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> a<span class="sy0">;</span>
<span class="kw4">int</span> <span class="sy0">*</span>b<span class="sy0">;</span>
<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>compare<span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span> c<span class="sy0">,</span> <span class="kw4">int</span> d<span class="br0">)</span><span class="sy0">;</span>
<span class="kw4">int</span>  MyCompare<span class="br0">(</span><span class="kw4">int</span> c<span class="sy0">,</span> <span class="kw4">int</span> d<span class="br0">)</span><span class="sy0">;</span>
 
b <span class="sy0">=</span> <span class="sy0">&amp;</span>a<span class="sy0">;</span>
compare <span class="sy0">=</span> <span class="sy0">&amp;</span>MyCompare<span class="sy0">;</span>
</pre></div>
</div>
<p>In C, since arrays and pointers have a close equivalence, the following are the same:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
a <span class="sy0">=</span> b<span class="br0">[</span><span class="nu0">5</span><span class="br0">]</span><span class="sy0">;</span>
a <span class="sy0">=</span> <span class="sy0">*</span><span class="br0">(</span>b<span class="sy0">+</span><span class="nu0">5</span><span class="br0">)</span><span class="sy0">;</span>
a <span class="sy0">=</span> <span class="sy0">*</span><span class="br0">(</span><span class="nu0">5</span><span class="sy0">+</span>b<span class="br0">)</span><span class="sy0">;</span>
a <span class="sy0">=</span> <span class="nu0">5</span><span class="br0">[</span>b<span class="br0">]</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Thus, pointers are often used in C as just another method to access arrays.</p>
<p>To create dynamic data, the library functions <code>malloc()</code> and <code>free()</code> are used to obtain and release dynamic blocks of data. Thus, <a href="Dynamic_memory_allocation.html" title="Dynamic memory allocation" class="mw-redirect">dynamic memory allocation</a> is not built into the language processor. This is especially valuable when C is being used in operating system kernels or embedded targets as these things are very platform (not just architecture) specific and would require changing the C compiler for each platform (or operating system) that it would be used on.</p>
<p>Pascal doesn't have the same kind of pointers as C, but it does have an indirection operator that covers the most common use of C pointers. Each pointer is bound to a single dynamic data item, and can only be moved by assignment:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">type</span> a <span class="sy3">=</span> <span class="sy2">^</span>integer<span class="sy1">;</span>
 
<span class="kw1">var</span> b<span class="sy1">,</span> c<span class="sy1">:</span> a<span class="sy1">;</span>
 
<span class="kw3">new</span><span class="br0">(</span>b<span class="br0">)</span><span class="sy1">;</span>
c <span class="sy1">:</span><span class="sy3">=</span> b<span class="sy1">;</span>
</pre></div>
</div>
<p>Pointers in Pascal are type safe; i.e. a pointer to one data type can only be assigned to a pointer of the same data type. Also pointers can never be assigned to non-pointer variables. Pointer arithmetic (a common source of programming errors in C, especially when combined with <a href="Endianness.html" title="Endianness">endianness</a> issues and platform-independent type sizes) is not permitted in Pascal. All of these restrictions reduce the possibility of pointer-related errors in Pascal compared to C, but do not prevent invalid pointer references in Pascal altogether. For example, a runtime error will occur if a pointer is referenced before it has been initialized or after it has been disposed.</p>
<h2><span class="mw-headline" id="Expressions">Expressions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=22" title="Edit section: Expressions">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <span class="hide-when-compact">Please help improve this section by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(June 2013)</i></small></span></td>
</tr>
</table>
<h3><span class="mw-headline" id="Precedence_levels">Precedence levels</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=23" title="Edit section: Precedence levels">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The languages differ significantly when it comes to expression evaluation, but all-in-all they are comparable.</p>
<p><i>Pascal</i></p>
<ol>
<li><i>Logical negation:</i> <code><b>not</b></code></li>
<li><i>Multiplicative:</i> <code><b>* / div mod and</b></code></li>
<li><i>Additive:</i> <code><b>+ - or</b></code></li>
<li><i>Relational:</i> <code><b>= &lt;&gt; &lt; &gt; &lt;= &gt;= in</b></code></li>
</ol>
<p><i>C</i></p>
<ol>
<li><i>Unary postfix:</i> <code><b>[] () . -&gt; ++ --</b></code></li>
<li><i>Unary prefix:</i> <code><b>&amp; * + -&#160;! ~ ++ -- (type) sizeof</b></code></li>
<li><i>Multiplicative:</i> <code><b>* /&#160;%</b></code></li>
<li><i>Additive:</i> <code><b>+ -</b></code></li>
<li><i>Shift:</i> <code><b>&lt;&lt; &gt;&gt;</b></code></li>
<li><i>Relational:</i> <code><b>&lt; &gt; &lt;= &gt;=</b></code></li>
<li><i>Equality:</i> <code><b>==&#160;!=</b></code></li>
<li><i>Bitwise and:</i> <code><b>&amp;</b></code></li>
<li><i>Bitwise xor:</i> <code><b>^</b></code></li>
<li><i>Bitwise or:</i> <code><b>|</b></code></li>
<li><i>Logical and:</i> <code><b>&amp;&amp;</b></code></li>
<li><i>Logical or:</i> <code><b>||</b></code></li>
<li><i>Conditional:</i> <code><b>?&#160;:</b></code></li>
<li><i>Assignment:</i> <code><b>= += -= *= /=&#160;%= &lt;&lt;= &gt;&gt;= &amp;= ^= |=</b></code></li>
<li><i>Comma operator</i>: <code><b>,</b></code></li>
</ol>
<h3><span class="mw-headline" id="Typing">Typing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=24" title="Edit section: Typing">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Most operators serve several purposes in Pascal, for instance, the minus sign may be used for negation, subtraction, or set difference (depending on both type and syntactical context), the <code>&gt;=</code> operator may be used to compare numbers, strings, or sets, and so on. C uses dedicated operator symbols to a greater extent.</p>
<h4><span class="mw-headline" id="Assignment_and_equality_tests">Assignment and equality tests</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=25" title="Edit section: Assignment and equality tests">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>The two languages use different operators for assignment. Pascal, like <a href="ALGOL.html" title="ALGOL">ALGOL</a>, uses the mathematical equality operator for equality test and the symbol <code>:=</code> for assignment, whereas C, like <a href="B_(programming_language).html" title="B (programming language)">B</a> uses the mathematical equality operator for assignment. In C (and B) the new <code>==</code> symbol was therefore introduced for equality test.</p>
<p>It is a common mistake, either due to inexperience or a simple typing error, to accidentally put assignment expressions in conditional statements such as <code>if (a = 10) { ... }</code>. The code in braces will always execute because the assignment expression <code>a = 10</code> has the value 10 ≠ 0 and is therefore considered "true" in C. Also note that <code>a</code> now has the value <code>10</code>, which may affect the following code. Recent C compilers try to detect these cases and warn the user, asking for a less ambiguous syntax like <code>if ((a=10)&#160;!= 0 ) { ... }</code>. This kind of mistake cannot happen in Pascal, as assignments are not expressions; using the wrong operator will cause a compile error (and it's not likely that anyone would mistake the <code>:=</code> symbol for equality test).</p>
<h3><span class="mw-headline" id="Implementation_issues">Implementation issues</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=26" title="Edit section: Implementation issues">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>When <a href="http://en.wikipedia.org/wiki/Niklaus_Wirth" title="Niklaus Wirth">Niklaus Wirth</a> designed Pascal, the desire was to limit the number of levels of precedence (fewer parse routines, after all). So the OR and exclusive OR operators are treated just like an Addop and processed at the level of a math expression. Similarly, the AND is treated like a Mulop and processed with Term. The precedence levels are</p>
<pre>
          Level   Syntax Element     Operator

          0       factor             literal, variable
          1       signed factor      unary minus, NOT
          2       term               *, /, AND
          3       expression         +, -, OR
</pre>
<p>Notice that there is only ONE set of syntax rules, applying to both kinds of operators. According to this grammar, then, expressions like</p>
<pre>
     x + (y AND NOT z) DIV 3
</pre>
<p>are perfectly legal. And, in fact, they are, as far as the parser is concerned. Pascal doesn't allow the mixing of arithmetic and Boolean variables, and things like this are caught at the semantic level, when it comes time to generate code for them, rather than at the syntax level.</p>
<p>The authors of C took a diametrically opposite approach: they treat the operators as different, and have something much more akin to our seven levels of precedence. In fact, in C there are no fewer than 15 levels. That's because C also has the operators '=', '+=' and its kin, '&lt;&lt;', '&gt;&gt;', '++', '--', etc. Although in C the arithmetic and Boolean operators are treated separately, the variables are not: a Boolean test can be made on any integer value.</p>
<h4><span class="mw-headline" id="Logical_connectives">Logical connectives</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=27" title="Edit section: Logical connectives">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In Pascal a <i>boolean</i> expression that relies on a particular evaluation ordering (possibly via side-effects in function calls) is, more or less, regarded as an error. The Pascal compiler has the freedom to use whatever ordering it may prefer and must always evaluate the whole expression even if the result can be determined by partial evaluation.</p>
<p>In C, dependence on <i>boolean</i> evaluation order is perfectly legal, and often systematically employed using the <code>&amp;&amp;</code> and <code>||</code> operators together with operators such as <code>++</code>, <code>+=</code>, the comma operator, etc. The <code>&amp;&amp;</code> and <code>||</code> operators thereby function as combinations of logical operators and conditional <i>statements</i>.</p>
<p>Short circuit expression evaluation has been commonly considered an advantage for C because of the "evaluation problem":</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">var</span> i<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span>
    a<span class="sy1">:</span> <span class="kw4">packed</span> <span class="kw4">array</span> <span class="br0">[</span><span class="nu0">1</span><span class="sy1">..</span><span class="nu0">10</span><span class="br0">]</span> <span class="kw1">of</span> <span class="kw4">char</span><span class="sy1">;</span>
 
  <span class="sy1">...</span>
  <span class="me1">i</span> <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">1</span><span class="sy1">;</span>
  <span class="kw1">while</span> <span class="br0">(</span>i &lt;<span class="sy3">=</span> <span class="nu0">10</span><span class="br0">)</span> <span class="kw3">and</span> <span class="br0">(</span>a<span class="br0">[</span>i<span class="br0">]</span> &lt;&gt; <span class="st0">'x'</span><span class="br0">)</span> <span class="kw1">do</span> i <span class="sy1">:</span><span class="sy3">=</span> i<span class="sy3">+</span><span class="nu0">1</span><span class="sy1">;</span>
  <span class="sy1">...</span>
</pre></div>
</div>
<p>This seemingly straightforward search is problematic in Pascal because the array access a[i] would be invalid for i equal to 11.</p>
<p>However, in superscalar processors there is a penalty for all jumps because they cause pipeline stalls, and programs created for them are more efficient if jumps are removed where possible. Pascal's ability to evaluate using a fixed formula without jumps can be an advantage with highly optimizing compilers, whereas C has effectively prevented this by requiring short circuit optimization.</p>
<h2><span class="mw-headline" id="Control_structures">Control structures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=28" title="Edit section: Control structures">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Statements for building control structures are roughly analogous and relatively similar (at least the first three).</p>
<p><i>Pascal has:</i></p>
<ul>
<li><b>if</b> <i>cond</i> <b>then</b> <i>stmt</i> <b>else</b> <i>stmt</i></li>
<li><b>while</b> <i>cond</i> <b>do</b> <i>stmt</i></li>
<li><b>repeat</b> <i>stmt</i> <b>until</b> <i>cond</i></li>
<li><b>for</b> <i>id</i>&#160;:= <i>expr</i> <b>to</b> <i>expr</i> <b>do</b> <i>stmt</i> and <b>for</b> <i>id</i>&#160;:= <i>expr</i> <b>downto</b> <i>expr</i> <b>do</b> <i>stmt</i></li>
<li><b>case</b> <i>expr</i> <b>of</b> <i>expr</i> <b>:</b> <i>stmt</i>; ... <i>expr</i> <b>:</b> <i>stmt</i>; <b>else:</b> <i>stmt</i>; <b>end</b></li>
</ul>
<p><i>C has:</i></p>
<ul>
<li><b>if</b> (<i>cond</i>) <i>stmt</i> <b>else</b> <i>stmt</i></li>
<li><b>while</b> (<i>cond</i>) <i>stmt</i></li>
<li><b>do</b> <i>stmt</i> <b>while</b> (<i>cond</i>)</li>
<li><b>for</b> (<i>expr</i>; <i>cond</i>; <i>expr</i>) <i>stmt</i></li>
<li><b>switch</b> (<i>expr</i>) { <b>case</b> <i>expr</i> <b>:</b> <i>stmt</i>; ... <b>case</b> <i>expr</i> <b>:</b> <i>stmt</i>; <b>default:</b> <i>stmt</i> }</li>
</ul>
<p>Pascal, in its original form, did not have an equivalent to <b>default</b>, but an equivalent <b>else</b> clause is a common extension. Pascal programmers otherwise had to guard case-statements with an expression such as: <b>if</b> <i>expr</i> <b>not</b> <b>in</b> [A..B] <b>then</b> <i>default-case</i>.</p>
<p>C has the so-called early-out statements <b>break</b> and <b>continue</b>, and some Pascals have them as well.</p>
<p>Both C and Pascal have a <b>goto</b> statement. However, since Pascal has nested procedures/functions, jumps can be done from an inner procedure or function to the containing one; this was commonly used to implement error recovery. C has this ability via the ANSI C <a href="http://en.wikipedia.org/wiki/Setjmp/longjmp" title="Setjmp/longjmp" class="mw-redirect">setjmp and longjmp</a>. This is equivalent, but arguably less safe, since it stores program specific information like jump addresses and stack frames in a programmer accessible structure.</p>
<h2><span class="mw-headline" id="Functions.2C_procedures">Functions, procedures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=29" title="Edit section: Functions, procedures">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Pascal routines that return a value are called functions; routines that don't return a value are called procedures. All routines in C are called functions; C functions that do not return a value are declared with a return type of <i><a href="Void_type.html" title="Void type">void</a></i>.</p>
<p>Pascal procedures are considered equivalent to C "void" functions, and Pascal functions are equivalent to C functions that return a value.</p>
<p>The following two declarations in C:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="br0">)</span><span class="sy0">;</span>
<span class="kw4">void</span> k<span class="br0">(</span><span class="kw4">int</span> q<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>are equivalent to the following declarations in Pascal:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">function</span> f<span class="br0">(</span>x<span class="sy1">,</span> y<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span>
<span class="kw1">procedure</span> k<span class="br0">(</span>q<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">;</span>
</pre></div>
</div>
<p>Pascal has two different types of parameters: pass-by-value, and pass-by-reference (VAR).</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">function</span> f<span class="br0">(</span><span class="kw1">var</span> k<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span>
x <span class="sy1">:</span><span class="sy3">=</span> f<span class="br0">(</span>t<span class="br0">)</span><span class="sy1">;</span>
</pre></div>
</div>
<p>In C all parameters are passed by value but pass-by-reference can be simulated using pointers. The following segment is similar to the Pascal segment above:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span> <span class="sy0">*</span>k<span class="br0">)</span><span class="sy0">;</span> <span class="co1">//function accepts a pointer as parameter</span>
x <span class="sy0">=</span> f<span class="br0">(</span><span class="sy0">&amp;</span>t<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>C allows for functions to accept a variable number of parameters, known as <a href="http://en.wikipedia.org/wiki/Variadic_function" title="Variadic function">variadic functions</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> f<span class="br0">(</span><span class="kw4">int</span> a<span class="sy0">,</span> ...<span class="br0">)</span><span class="sy0">;</span>
f<span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">5</span><span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>The function <code>f()</code> uses a special set of functions that allow it to access each of the parameters in turn.</p>
<p>Additionally Pascal has I/O statements built into the language to handle variable amount of parameters, like <code>Writeln</code>. Pascal allows procedures and functions to be <a href="http://en.wikipedia.org/wiki/Nested_function" title="Nested function">nested</a>. This is convenient to allow variables that are local to a group of procedures, but not global. C does not have this feature and the localization of variables or functions could only be done for a compilation module wherein the variables or functions would have been declared <b>static</b>.</p>
<p>C allows functions to be indirectly invoked through a function pointer. In the following example, the statement <code>(*cmpar)(s1, s2)</code> is equivalent to <code>strcmp(s1, s2)</code>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;string.h&gt;</span>
 
<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>cmpar<span class="br0">)</span><span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>a<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>b<span class="br0">)</span><span class="sy0">;</span>
<span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>s1 <span class="sy0">=</span> <span class="st0">"hello"</span><span class="sy0">;</span>
<span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>s2 <span class="sy0">=</span> <span class="st0">"world"</span><span class="sy0">;</span>
 
cmpar <span class="sy0">=</span> <span class="sy0">&amp;</span><span class="kw3">strcmp</span><span class="sy0">;</span>
b <span class="sy0">=</span> <span class="br0">(</span><span class="sy0">*</span>cmpar<span class="br0">)</span><span class="br0">(</span>s1<span class="sy0">,</span> s2<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Pascal also allows functions and procedures to be passed as parameters to functions or procedures:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">procedure</span> ShowHex<span class="br0">(</span>i<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">;</span>
<span class="sy1">...</span>
<span class="kw1">end</span><span class="sy1">;</span>
 
<span class="kw1">procedure</span> ShowInt<span class="br0">(</span>i<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">;</span>
<span class="sy1">...</span>
<span class="kw1">end</span><span class="sy1">;</span>
 
<span class="kw1">procedure</span> Demo<span class="br0">(</span><span class="kw1">procedure</span> Show<span class="br0">(</span>i<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span>
<span class="kw1">var</span> j<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span>
<span class="kw1">begin</span>
  Show<span class="br0">(</span>j<span class="br0">)</span>
<span class="kw1">end</span><span class="sy1">;</span>
 
<span class="sy1">...</span>
  <span class="me1">Demo</span><span class="br0">(</span>ShowHex<span class="br0">)</span><span class="sy1">;</span>
  Demo<span class="br0">(</span>ShowInt<span class="br0">)</span><span class="sy1">;</span>
<span class="sy1">...</span>
</pre></div>
</div>
<h2><span class="mw-headline" id="Preprocessor">Preprocessor</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=30" title="Edit section: Preprocessor">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Early C had neither constant declarations nor type declarations, and the C language was originally defined as needing a "<a href="http://en.wikipedia.org/wiki/Preprocessor" title="Preprocessor">preprocessor</a>"; a separate program, and pass, that handled constant, include and <a href="http://en.wikipedia.org/wiki/Macro_(computer_science)" title="Macro (computer science)">macro</a> definitions, to keep memory usage down. Later, with ANSI C, it obtained constant and type definitions features and the preprocessor also became part of the language itself, leading to the syntax we see today.</p>
<p>Pascal constant and type defines are built in, but there were programmers using a preprocessor also with Pascal (sometimes the same one used with C), certainly not as common as with C. Although often pointed out as a "lack" in Pascal, technically C doesn't have program modularity nor macros built in either. It has a simple low level separate compilation facility, however (traditionally using the same generic linker used for assembly language), Pascal does not.</p>
<h2><span class="mw-headline" id="Type_escapes">Type escapes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=31" title="Edit section: Type escapes">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In C, the programmer may inspect the byte-level representation of any object by pointing a <tt>char</tt> pointer to it:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> a<span class="sy0">;</span>
<span class="kw4">char</span> <span class="sy0">*</span>p <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">char</span> <span class="sy0">*</span><span class="br0">)</span><span class="br0">(</span><span class="sy0">&amp;</span>a<span class="br0">)</span><span class="sy0">;</span>
<span class="kw4">char</span> c <span class="sy0">=</span> <span class="sy0">*</span>p<span class="sy0">;</span>  <span class="co1">// first byte of a</span>
</pre></div>
</div>
<p>It may be possible to do something similar in Pascal using an undiscriminated variant record:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">var</span> a<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span>
    b<span class="sy1">:</span> <span class="kw4">real</span><span class="sy1">;</span>
    a2c<span class="sy1">:</span> <span class="kw4">record</span>
           <span class="kw1">case</span> <span class="kw4">boolean</span> <span class="kw1">of</span>
             <span class="kw2">false</span><span class="sy1">:</span> <span class="br0">(</span>a<span class="sy1">:</span> <span class="kw4">integer</span><span class="br0">)</span><span class="sy1">;</span>
             <span class="kw2">true</span><span class="sy1">:</span>  <span class="br0">(</span>b<span class="sy1">:</span> <span class="kw4">real</span><span class="br0">)</span><span class="sy1">;</span>
           <span class="kw1">end</span><span class="sy1">;</span>
         <span class="kw1">end</span><span class="sy1">;</span>
<span class="kw1">begin</span>
  a2c<span class="sy1">.</span><span class="me1">b</span> <span class="sy1">:</span><span class="sy3">=</span> b<span class="sy1">;</span>
  a <span class="sy1">:</span><span class="sy3">=</span> a2c<span class="sy1">.</span><span class="me1">a</span><span class="sy1">;</span>
<span class="kw1">end</span><span class="sy1">;</span>
</pre></div>
</div>
<p>Although casting is possible on the most of Pascal compilers and interpreters, even in the code above a2c.a and a2c.b aren't required by any Pascal standardizations to share the same address space. Niklaus Wirth, the designer of Pascal, has written about the problematic nature of attempting type escapes using this approach:</p>
<p>"Most implementors of Pascal decided that this checking would be too expensive, enlarging code and deteriorating program efficiency. As a consequence, the variant record became a favourite feature to breach the type system by all programmers in love with tricks, which usually turn into pitfalls and calamities".</p>
<p>Several languages now specifically exclude such type escapes, for example Java, C# and Wirth's own Oberon.</p>
<h2><span class="mw-headline" id="Files">Files</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=32" title="Edit section: Files">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>In C files do not exist as a built-in type (they are defined in a system header) and all I/O takes place via library calls. Pascal has file handling built into the language.</p>
<p>The typical statements used to perform I/O in each language are:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"The sum is: %d<span class="es1">\n</span>"</span><span class="sy0">,</span> x<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw3">writeln</span><span class="br0">(</span><span class="st0">'The sum is: '</span><span class="sy1">,</span> x<span class="br0">)</span><span class="sy1">;</span>
</pre></div>
</div>
<p>The main difference is that C uses a "format string" that is interpreted to find the arguments to the printf function and convert them, whereas Pascal performs that under the control of the language processor.</p>
<h2><span class="mw-headline" id="Later_Pascal_implementations_and_extensions">Later Pascal implementations and extensions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=33" title="Edit section: Later Pascal implementations and extensions">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Some popular Pascal implementations have incorporated virtually all C constructs into Pascal. Examples include type casts, being able to obtain the address of any variable, local or global, and different types of integers with special promotion properties.</p>
<p>However, the incorporation of C's lenient attitude towards types and type conversions can result in a Pascal that loses some or all of its type security. For example, <a href="Java_(programming_language).html" title="Java (programming language)">Java</a> and <a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a> were created in part to address some of the perceived type security issues of C, and have "managed" pointers that cannot be used to create invalid references. In its original form (as described by <a href="http://en.wikipedia.org/wiki/Niklaus_Wirth" title="Niklaus Wirth">Niklaus Wirth</a>), Pascal qualifies as a managed pointer language, some 30 years before either Java or C#. However, a Pascal amalgamated with C would lose that protection by definition. In general, the lower dependence on pointers for basic tasks makes it safer than C in practice.</p>
<p>The Extended Pascal standard extends Pascal to support many things C supports, which the original standard Pascal did not, in a type safer manner. For example, schema types support (besides other uses) variable-length arrays while keeping the type-safety of mandatory carrying the array dimension with the array, allowing automatic run-time checks for out-of-range indices also for dynamically sized arrays.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=34" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="C_(programming_language).html" title="C (programming language)">C</a>, <a href="C%2b%2b.html" title="C++">C++</a></li>
<li><a href="Pascal_(programming_language).html" title="Pascal (programming language)">Pascal</a>, <a href="http://en.wikipedia.org/wiki/Object_Pascal" title="Object Pascal">Object Pascal</a>, <a href="http://en.wikipedia.org/wiki/Free_Pascal" title="Free Pascal">Free Pascal</a>, <a href="http://en.wikipedia.org/wiki/Embarcadero_Delphi" title="Embarcadero Delphi">Delphi</a>, <a href="http://en.wikipedia.org/wiki/Oxygene_(programming_language)" title="Oxygene (programming language)">Oxygene</a></li>
</ul>
<h2><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=35" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist" style="list-style-type: decimal;"></div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit&amp;section=36" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/w/index.php?title=Kathleen_Jensen&amp;action=edit&amp;redlink=1" class="new" title="Kathleen Jensen (page does not exist)">Kathleen Jensen</a> and Niklaus Wirth: <i>PASCAL - User Manual and Report.</i> Springer-Verlag, 1974, 1985, 1991, <a href="http://en.wikipedia.org/wiki/Special:BookSources/3540976493" class="internal mw-magiclink-isbn">ISBN 3-540-97649-3</a> <a rel="nofollow" class="external autonumber" href="http://www.cs.inf.ethz.ch/~wirth/books/Pascal/">[1]</a></li>
<li><a href="Brian_Kernighan.html" title="Brian Kernighan">Brian Kernighan</a>, <a href="Dennis_Ritchie.html" title="Dennis Ritchie">Dennis Ritchie</a>: <i><a href="The_C_Programming_Language_(book).html" title="The C Programming Language (book)" class="mw-redirect">The C Programming Language</a></i>. Also called K&amp;R – the original book on C.
<ul>
<li>1st, Prentice Hall 1978; <a href="http://en.wikipedia.org/wiki/Special:BookSources/0131101633" class="internal mw-magiclink-isbn">ISBN 0-13-110163-3</a>. Pre-ANSI C.</li>
<li>2nd, Prentice Hall 1988; <a href="http://en.wikipedia.org/wiki/Special:BookSources/0131103628" class="internal mw-magiclink-isbn">ISBN 0-13-110362-8</a>. ANSI C.</li>
</ul>
</li>
<li>Niklaus Wirth: <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=987330"><i>Comment on a note on dynamic arrays in PASCAL</i></a> 37-38, ACM SIGPLAN Notices, Volume 11, Issue 1, January 1976.</li>
<li>Niklaus Wirth: <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=155378"><i>Recollections about the Development of Pascal.</i></a> 333-342, ACM SIGPLAN Notices, Volume 28, Issue 3, March 1993.</li>
<li><a rel="nofollow" class="external text" href="http://www.open-std.org/JTC1/SC22/WG14/www/standards">ISO/IEC 9899</a>. The official C:1999 standard, along with defect reports and a rationale.</li>
<li><a rel="nofollow" class="external text" href="http://www.knosof.co.uk/ctop.ps">Detailed analysis of converting C to Pascal</a></li>
<li>Alan R. Feuer, Narain H. Gehani: <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=356869.356872"><i>Comparison of the Programming Languages C and Pascal</i></a> 73-92, ACM Computing Surveys, Volume 14, Issue 1, March 1982.</li>
<li><i>Comparing and Assessing Programming Languages: Ada, C and Pascal</i>, Ed. by Alan R. Feuer and Narain Gehani, Prentice Hall, 1984. <a href="http://en.wikipedia.org/wiki/Special:BookSources/0131548409" class="internal mw-magiclink-isbn">ISBN 0-13-154840-9</a></li>
<li>Scott Meyers: <i>Effective C++</i>, 2nd Ed., Addison-Wesley, 1998, <a href="http://en.wikipedia.org/wiki/Special:BookSources/0201924889" class="internal mw-magiclink-isbn">ISBN 0-201-92488-9</a></li>
<li>Vincent Hayward: <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=14950"><i>Compared anatomy of the programming languages Pascal and C</i></a> 50-60, ACM Sigplan Notices, Volume 21, Issue 5, May 1986.</li>
<li><a rel="nofollow" class="external text" href="http://wiki.lazarus.freepascal.org/Pascal_for_C_users">Pascal for C users</a></li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="3">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:Pascal_programming_language_family" title="Template:Pascal programming language family"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:Pascal_programming_language_family" title="Template talk:Pascal programming language family"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Pascal_programming_language_family&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="Pascal_(programming_language).html" title="Pascal (programming language)">Pascal programming language</a> family</div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Dialects</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Pascal_(programming_language).html" title="Pascal (programming language)">Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Object_Pascal" title="Object Pascal">Object Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Pascal_Script" title="Pascal Script">Pascal Script</a></li>
<li><a href="http://en.wikipedia.org/wiki/Oxygene_(programming_language)" title="Oxygene (programming language)">Oxygene</a></li>
<li><a href="http://en.wikipedia.org/wiki/Clascal" title="Clascal">Clascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Concurrent_Pascal" title="Concurrent Pascal">Concurrent Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/SuperPascal" title="SuperPascal">SuperPascal</a></li>
</ul>
</div>
</td>
<td class="navbox-image" rowspan="5" style="width:0%;padding:0px 0px 0px 2px;">
<div><a href="http://en.wikipedia.org/wiki/File:Blaise_pascal.jpg" class="image"><img alt="Blaise pascal.jpg" src="http://upload.wikimedia.org/wikipedia/commons/thumb/7/79/Blaise_pascal.jpg/90px-Blaise_pascal.jpg" width="90" height="94" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/79/Blaise_pascal.jpg/135px-Blaise_pascal.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/79/Blaise_pascal.jpg/180px-Blaise_pascal.jpg 2x" /></a></div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Compilers</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;"></div>
<table cellspacing="0" class="nowraplinks navbox-subgroup" style="border-spacing:0;">
<tr>
<th scope="row" class="navbox-group" style="padding-left:0em;padding-right:0em;;">
<div style="padding:0em 0.75em;">Current</div>
</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Embarcadero_Delphi" title="Embarcadero Delphi">Delphi</a></li>
<li><a href="http://en.wikipedia.org/wiki/Oxygene_(programming_language)" title="Oxygene (programming language)">Oxygene</a></li>
<li><a href="http://en.wikipedia.org/wiki/PocketStudio" title="PocketStudio">PocketStudio</a></li>
<li><a href="http://en.wikipedia.org/wiki/HP_Pascal" title="HP Pascal">HP Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/IP_Pascal" title="IP Pascal">IP Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Prospero_Pascal" title="Prospero Pascal">Prospero Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Free_Pascal" title="Free Pascal">Free Pascal</a> (<a href="http://en.wikipedia.org/wiki/Lazarus_(IDE)" title="Lazarus (IDE)">Lazarus</a>)</li>
<li><a href="http://en.wikipedia.org/wiki/GNU_Pascal" title="GNU Pascal">GNU Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Turbo51" title="Turbo51">Turbo51</a></li>
<li><a href="http://en.wikipedia.org/wiki/MIDletPascal" title="MIDletPascal">MIDletPascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Pic_Micro_Pascal" title="Pic Micro Pascal">Pic Micro Pascal</a></li>
<li><a href="Amsterdam_Compiler_Kit.html" title="Amsterdam Compiler Kit">ACK</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group" style="padding-left:0em;padding-right:0em;;">
<div style="padding:0em 0.75em;">Historical</div>
</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Virtual_Pascal" title="Virtual Pascal">Virtual Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Apple_Pascal" title="Apple Pascal">Apple Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Turbo_Pascal" title="Turbo Pascal">Turbo Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/Microsoft_Pascal" title="Microsoft Pascal">Microsoft Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/UCSD_Pascal" title="UCSD Pascal">UCSD Pascal</a></li>
<li><a href="http://en.wikipedia.org/wiki/JRT" title="JRT">JRT</a></li>
<li><a href="http://en.wikipedia.org/wiki/Pascal/MT+" title="Pascal/MT+">Pascal/MT+</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Application_programming_interface.html" title="Application programming interface">API</a></th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Component_Library_for_Cross_Platform" title="Component Library for Cross Platform">CLX</a></li>
<li><a href="http://en.wikipedia.org/wiki/Free_Component_Library" title="Free Component Library">FCL</a></li>
<li><a href="http://en.wikipedia.org/wiki/FireMonkey" title="FireMonkey">FireMonkey</a></li>
<li><a href="http://en.wikipedia.org/wiki/Lazarus_Component_Library" title="Lazarus Component Library">LCL</a></li>
<li><a href="http://en.wikipedia.org/wiki/Object_Windows_Library" title="Object Windows Library">Object Windows Library</a></li>
<li><a href="http://en.wikipedia.org/wiki/OpenWire_(library)" title="OpenWire (library)">OpenWire</a></li>
<li><a href="http://en.wikipedia.org/wiki/Free_Pascal_Runtime_Library" title="Free Pascal Runtime Library">RTL</a></li>
<li><a href="http://en.wikipedia.org/wiki/Turbo_Vision" title="Turbo Vision">Turbo Vision</a></li>
<li><a href="http://en.wikipedia.org/wiki/Visual_Component_Library" title="Visual Component Library">Visual Component Library</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow hlist" colspan="3">
<div>
<ul>
<li><strong class="selflink">Comparison of Pascal and C</strong></li>
<li><a href="http://en.wikipedia.org/wiki/Comparison_of_Pascal_and_Delphi" title="Comparison of Pascal and Delphi">Comparison of Pascal and Delphi</a></li>
</ul>
<ul>
<li>Related to: <a href="ALGOL.html" title="ALGOL">ALGOL</a> (1958)</li>
<li><a href="http://en.wikipedia.org/wiki/Modula-2" title="Modula-2">Modula-2</a> (1977)</li>
<li><a href="http://en.wikipedia.org/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> (1983)</li>
<li><a href="http://en.wikipedia.org/wiki/Oberon_(programming_language)" title="Oberon (programming language)">Oberon</a> (1986)</li>
<li><a href="http://en.wikipedia.org/wiki/Modula-3" title="Modula-3">Modula-3</a> (1988)</li>
<li><a href="http://en.wikipedia.org/wiki/Oberon-2" title="Oberon-2" class="mw-redirect">Oberon-2</a> (1991)</li>
<li><a href="http://en.wikipedia.org/wiki/Component_Pascal" title="Component Pascal">Component Pascal</a> (1991)</li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:CProLang" title="Template:CProLang"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:CProLang" title="Template talk:CProLang"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="C_(programming_language).html" title="C (programming language)">C programming language</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><a href="ANSI_C.html" title="ANSI C">ANSI C</a>
<ul>
<li><a href="ANSI_C.html#C89_and_C90" title="ANSI C">C89 and C90</a></li>
</ul>
</li>
<li><a href="C99.html" title="C99">C99</a></li>
<li><a href="C11_(C_standard_revision).html" title="C11 (C standard revision)">C11</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Category:C_compilers" title="Category:C compilers">Compilers</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Amsterdam_Compiler_Kit.html" title="Amsterdam Compiler Kit">Amsterdam Compiler Kit</a></li>
<li><a href="Borland_Turbo_C.html" title="Borland Turbo C">Borland Turbo C</a></li>
<li><a href="Clang.html" title="Clang">Clang</a></li>
<li><a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a></li>
<li><a href="LCC_(compiler).html" title="LCC (compiler)">LCC</a></li>
<li><a href="Pelles_C.html" title="Pelles C">Pelles C</a></li>
<li><a href="Portable_C_Compiler.html" title="Portable C Compiler">PCC</a></li>
<li><a href="Tiny_C_Compiler.html" title="Tiny C Compiler">TCC</a></li>
<li><a href="Visual_C%2b%2b.html" title="Visual C++">Visual C++</a>
<ul>
<li><a href="C%2b%2b/CLI.html" title="C++/CLI">C++/CLI</a></li>
<li><a href="C%2b%2b/CX.html" title="C++/CX">C++/CX</a></li>
</ul>
</li>
<li><a href="Watcom_C/C%2b%2b_compiler.html" title="Watcom C/C++ compiler">Watcom C/C++ compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Category:C_libraries" title="Category:C libraries">Libraries</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="C_standard_library.html" title="C standard library">C standard library</a></li>
<li><a href="Bionic_(software).html" title="Bionic (software)">Bionic</a></li>
<li><a href="Dietlibc.html" title="Dietlibc">dietlibc</a></li>
<li><a href="Embedded_GLIBC.html" title="Embedded GLIBC">EGLIBC</a></li>
<li><a href="GNU_C_Library.html" title="GNU C Library">glibc</a></li>
<li><a href="Klibc.html" title="Klibc">klibc</a></li>
<li><a href="Hybris_(software).html" title="Hybris (software)">libhybris</a></li>
<li><a href="Musl.html" title="Musl">musl</a></li>
<li><a href="Newlib.html" title="Newlib">Newlib</a></li>
<li><a href="UClibc.html" title="UClibc">uClibc</a></li>
<li><a href="BSD_libc.html" title="BSD libc" class="mw-redirect">BSD libc</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Features</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Null-terminated_string.html" title="Null-terminated string">String</a></li>
<li><a href="C_syntax.html" title="C syntax">Syntax</a></li>
<li><a href="C_preprocessor.html" title="C preprocessor">Preprocessor</a></li>
<li><a href="C_data_types.html" title="C data types">Variable types and declarations</a></li>
<li><a href="C_standard_library.html" title="C standard library">Functions</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Select descendants</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="C%2b%2b.html" title="C++">C++</a></li>
<li><a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a></li>
<li><a href="D_(programming_language).html" title="D (programming language)">D</a></li>
<li><a href="Objective-C.html" title="Objective-C">Objective-C</a></li>
<li><a href="Alef_(programming_language).html" title="Alef (programming language)">Alef</a></li>
<li><a href="Limbo_(programming_language).html" title="Limbo (programming language)">Limbo</a></li>
<li><a href="Go_(programming_language).html" title="Go (programming language)">Go</a></li>
<li><a href="Vala_(programming_language).html" title="Vala (programming language)">Vala</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">C and other languages</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li>C and C++
<ul>
<li><a href="Compatibility_of_C_and_C%2b%2b.html" title="Compatibility of C and C++">Compatibility</a></li>
<li><a href="Operators_in_C_and_C%2b%2b.html" title="Operators in C and C++">Operators</a></li>
</ul>
</li>
<li><strong class="selflink">Comparison of Pascal and C</strong></li>
<li><a href="Java_virtual_machine.html#C_to_bytecode_compilers" title="Java virtual machine">C to Java byte-code compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><img alt="Category" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png" width="16" height="14" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/24px-Folder_Hexagonal_Icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/32px-Folder_Hexagonal_Icon.svg.png 2x" /> <b><a href="http://en.wikipedia.org/wiki/Category:C_programming_language" title="Category:C programming language">Category</a></b></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1004
CPU time usage: 1.668 seconds
Real time usage: 1.747 seconds
Preprocessor visited node count: 2767/1000000
Preprocessor generated node count: 15671/1500000
Post‐expand include size: 83719/2048000 bytes
Template argument size: 8291/2048000 bytes
Highest expansion depth: 14/40
Expensive parser function count: 13/500
Lua time usage: 0.137/10.000 seconds
Lua memory usage: 2.03 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1986891-0!*!0!!en!4!* and timestamp 20140329015234
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;oldid=594131548">http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;oldid=594131548</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Programming_language_comparisons" title="Category:Programming language comparisons">Programming language comparisons</a></li><li><a href="http://en.wikipedia.org/wiki/Category:C_programming_language" title="Category:C programming language">C programming language</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Pascal_programming_language_family" title="Category:Pascal programming language family">Pascal programming language family</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_obsolete_information_from_February_2010" title="Category:Articles with obsolete information from February 2010">Articles with obsolete information from February 2010</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_Wikipedia_articles_in_need_of_updating" title="Category:All Wikipedia articles in need of updating">All Wikipedia articles in need of updating</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_lacking_in-text_citations_from_June_2013" title="Category:Articles lacking in-text citations from June 2013">Articles lacking in-text citations from June 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_lacking_in-text_citations" title="Category:All articles lacking in-text citations">All articles lacking in-text citations</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_weasel_words_from_February_2010" title="Category:Articles with weasel words from February 2010">Articles with weasel words from February 2010</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_needing_additional_references_from_June_2013" title="Category:Articles needing additional references from June 2013">Articles needing additional references from June 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Comparison+of+Pascal+and+C&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Comparison+of+Pascal+and+C" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Comparison_of_Pascal_and_C.html"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Comparison_of_Pascal_and_C"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Comparison_of_Pascal_and_C.html" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Comparison_of_Pascal_and_C" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Comparison_of_Pascal_and_C" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;oldid=594131548" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q5155775" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Comparison_of_Pascal_and_C&amp;id=594131548" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Comparison+of+Pascal+and+C">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Comparison+of+Pascal+and+C&amp;oldid=594131548&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Comparison_of_Pascal_and_C&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q5155775#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 6 February 2014 at 01:09.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Comparison_of_Pascal_and_C" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf19/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1173 in 0.315 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Comparison_of_Pascal_and_C by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:58:04 GMT -->
</html>
