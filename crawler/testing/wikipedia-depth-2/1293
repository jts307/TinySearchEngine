http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Scope_(programming).html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Scope_(programming) by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:57:03 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Scope (computer science) - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf19" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Scope_(computer_science)" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="http://en.wikipedia.org/wiki/Scope_(computer_science)" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.rtlcite%2Cwikihiero%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Scope_(computer_science)","wgTitle":"Scope (computer science)","wgCurRevisionId":601635455,"wgRevisionId":601635455,"wgArticleId":62068,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["All articles with unsourced statements","Articles with unsourced statements from June 2012","Articles with unsourced statements from August 2012","Articles to be expanded from April 2013","All articles to be expanded","Articles containing potentially dated statements from 2013","All articles containing potentially dated statements","Articles needing additional references from December 2008","All articles needing additional references","Programming language concepts"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Scope_(computer_science)","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Scope_(programming)","wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf19/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["en-us","en"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q2137596"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":false,
"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:868e43d07ede2616d2d1dc3507cd8145 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","skins.vector.compactPersonalBar.defaultTracking","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-perl {line-height: normal;}
.source-perl li, .source-perl pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for perl
 * CSS class: source-perl, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.perl.source-perl .de1, .perl.source-perl .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.perl.source-perl  {font-family:monospace;}
.perl.source-perl .imp {font-weight: bold; color: red;}
.perl.source-perl li, .perl.source-perl .li1 {font-weight: normal; vertical-align:top;}
.perl.source-perl .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.perl.source-perl .li2 {font-weight: bold; vertical-align:top;}
.perl.source-perl .kw1 {color: #b1b100;}
.perl.source-perl .kw2 {color: #000000; font-weight: bold;}
.perl.source-perl .kw3 {color: #000066;}
.perl.source-perl .co1 {color: #666666; font-style: italic;}
.perl.source-perl .co2 {color: #009966; font-style: italic;}
.perl.source-perl .co3 {color: #0000ff;}
.perl.source-perl .co4 {color: #cc0000; font-style: italic;}
.perl.source-perl .co5 {color: #0000ff;}
.perl.source-perl .coMULTI {color: #666666; font-style: italic;}
.perl.source-perl .es0 {color: #000099; font-weight: bold;}
.perl.source-perl .es_h {color: #000099; font-weight: bold;}
.perl.source-perl .br0 {color: #009900;}
.perl.source-perl .sy0 {color: #339933;}
.perl.source-perl .st0 {color: #ff0000;}
.perl.source-perl .st_h {color: #ff0000;}
.perl.source-perl .nu0 {color: #cc66cc;}
.perl.source-perl .me1 {color: #006600;}
.perl.source-perl .me2 {color: #006600;}
.perl.source-perl .re0 {color: #0000ff;}
.perl.source-perl .re4 {color: #009999;}
.perl.source-perl .ln-xtra, .perl.source-perl li.ln-xtra, .perl.source-perl div.ln-xtra {background-color: #ffc;}
.perl.source-perl span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-python {line-height: normal;}
.source-python li, .source-python pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for python
 * CSS class: source-python, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.python.source-python .de1, .python.source-python .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.python.source-python  {font-family:monospace;}
.python.source-python .imp {font-weight: bold; color: red;}
.python.source-python li, .python.source-python .li1 {font-weight: normal; vertical-align:top;}
.python.source-python .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.python.source-python .li2 {font-weight: bold; vertical-align:top;}
.python.source-python .kw1 {color: #ff7700;font-weight:bold;}
.python.source-python .kw2 {color: #008000;}
.python.source-python .kw3 {color: #dc143c;}
.python.source-python .kw4 {color: #0000cd;}
.python.source-python .co1 {color: #808080; font-style: italic;}
.python.source-python .coMULTI {color: #808080; font-style: italic;}
.python.source-python .es0 {color: #000099; font-weight: bold;}
.python.source-python .br0 {color: black;}
.python.source-python .sy0 {color: #66cc66;}
.python.source-python .st0 {color: #483d8b;}
.python.source-python .nu0 {color: #ff4500;}
.python.source-python .me1 {color: black;}
.python.source-python .ln-xtra, .python.source-python li.ln-xtra, .python.source-python div.ln-xtra {background-color: #ffc;}
.python.source-python span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-bash {line-height: normal;}
.source-bash li, .source-bash pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for bash
 * CSS class: source-bash, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.bash.source-bash .de1, .bash.source-bash .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.bash.source-bash  {font-family:monospace;}
.bash.source-bash .imp {font-weight: bold; color: red;}
.bash.source-bash li, .bash.source-bash .li1 {font-weight: normal; vertical-align:top;}
.bash.source-bash .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.bash.source-bash .li2 {font-weight: bold; vertical-align:top;}
.bash.source-bash .kw1 {color: #000000; font-weight: bold;}
.bash.source-bash .kw2 {color: #c20cb9; font-weight: bold;}
.bash.source-bash .kw3 {color: #7a0874; font-weight: bold;}
.bash.source-bash .co0 {color: #666666; font-style: italic;}
.bash.source-bash .co1 {color: #800000;}
.bash.source-bash .co2 {color: #cc0000; font-style: italic;}
.bash.source-bash .co3 {color: #000000; font-weight: bold;}
.bash.source-bash .co4 {color: #666666;}
.bash.source-bash .es1 {color: #000099; font-weight: bold;}
.bash.source-bash .es2 {color: #007800;}
.bash.source-bash .es3 {color: #007800;}
.bash.source-bash .es4 {color: #007800;}
.bash.source-bash .es5 {color: #780078;}
.bash.source-bash .es_h {color: #000099; font-weight: bold;}
.bash.source-bash .br0 {color: #7a0874; font-weight: bold;}
.bash.source-bash .sy0 {color: #000000; font-weight: bold;}
.bash.source-bash .st0 {color: #ff0000;}
.bash.source-bash .st_h {color: #ff0000;}
.bash.source-bash .nu0 {color: #000000;}
.bash.source-bash .re0 {color: #007800;}
.bash.source-bash .re1 {color: #007800;}
.bash.source-bash .re2 {color: #007800;}
.bash.source-bash .re4 {color: #007800;}
.bash.source-bash .re5 {color: #660033;}
.bash.source-bash .ln-xtra, .bash.source-bash li.ln-xtra, .bash.source-bash div.ln-xtra {background-color: #ffc;}
.bash.source-bash span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-pascal {line-height: normal;}
.source-pascal li, .source-pascal pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for pascal
 * CSS class: source-pascal, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.pascal.source-pascal .de1, .pascal.source-pascal .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.pascal.source-pascal  {font-family:monospace;}
.pascal.source-pascal .imp {font-weight: bold; color: red;}
.pascal.source-pascal li, .pascal.source-pascal .li1 {font-weight: normal; vertical-align:top;}
.pascal.source-pascal .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.pascal.source-pascal .li2 {font-weight: bold; vertical-align:top;}
.pascal.source-pascal .kw1 {color: #000000; font-weight: bold;}
.pascal.source-pascal .kw2 {color: #000000; font-weight: bold;}
.pascal.source-pascal .kw3 {color: #000066;}
.pascal.source-pascal .kw4 {color: #000066; font-weight: bold;}
.pascal.source-pascal .co1 {color: #808080; font-style: italic;}
.pascal.source-pascal .co2 {color: #008000; font-style: italic;}
.pascal.source-pascal .coMULTI {color: #808080; font-style: italic;}
.pascal.source-pascal .es0 {color: #ff0000; font-weight: bold;}
.pascal.source-pascal .br0 {color: #009900;}
.pascal.source-pascal .sy0 {color: #000066;}
.pascal.source-pascal .sy1 {color: #000066;}
.pascal.source-pascal .sy2 {color: #000066;}
.pascal.source-pascal .sy3 {color: #000066;}
.pascal.source-pascal .st0 {color: #ff0000;}
.pascal.source-pascal .nu0 {color: #cc66cc;}
.pascal.source-pascal .me1 {color: #006600;}
.pascal.source-pascal .re0 {color: #0000cc;}
.pascal.source-pascal .re1 {color: #ff0000;}
.pascal.source-pascal .ln-xtra, .pascal.source-pascal li.ln-xtra, .pascal.source-pascal div.ln-xtra {background-color: #ffc;}
.pascal.source-pascal span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-javascript {line-height: normal;}
.source-javascript li, .source-javascript pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for javascript
 * CSS class: source-javascript, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.javascript.source-javascript .de1, .javascript.source-javascript .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.javascript.source-javascript  {font-family:monospace;}
.javascript.source-javascript .imp {font-weight: bold; color: red;}
.javascript.source-javascript li, .javascript.source-javascript .li1 {font-weight: normal; vertical-align:top;}
.javascript.source-javascript .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.javascript.source-javascript .li2 {font-weight: bold; vertical-align:top;}
.javascript.source-javascript .kw1 {color: #000066; font-weight: bold;}
.javascript.source-javascript .kw2 {color: #003366; font-weight: bold;}
.javascript.source-javascript .kw3 {color: #000066;}
.javascript.source-javascript .kw5 {color: #FF0000;}
.javascript.source-javascript .co1 {color: #006600; font-style: italic;}
.javascript.source-javascript .co2 {color: #009966; font-style: italic;}
.javascript.source-javascript .coMULTI {color: #006600; font-style: italic;}
.javascript.source-javascript .es0 {color: #000099; font-weight: bold;}
.javascript.source-javascript .br0 {color: #009900;}
.javascript.source-javascript .sy0 {color: #339933;}
.javascript.source-javascript .st0 {color: #3366CC;}
.javascript.source-javascript .nu0 {color: #CC0000;}
.javascript.source-javascript .me1 {color: #660066;}
.javascript.source-javascript .ln-xtra, .javascript.source-javascript li.ln-xtra, .javascript.source-javascript div.ln-xtra {background-color: #ffc;}
.javascript.source-javascript span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf19/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Scope_computer_science skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Scope (computer science)</span></h1>
						<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub">  (Redirected from <a href="http://en.wikipedia.org/w/index.php?title=Scope_(programming)&amp;redirect=no" title="Scope (programming)">Scope (programming)</a>)</div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>In <a href="Computer_programming.html" title="Computer programming">computer programming</a>, the <b>scope</b> of an <a href="http://en.wikipedia.org/wiki/Identifier" title="Identifier">identifier</a> is the part of a <a href="http://en.wikipedia.org/wiki/Computer_program" title="Computer program">computer program</a> where the identifier, a name that refers to some entity in the program, can be used to find the referred entity. Thus the scope is the context within the program in which an identifier is valid and can be resolved to find the entity associated with the identifier – when the entity is <i>visible</i>. Most commonly "scope" refers to when a given name can refer to a given <a href="Variable_(programming).html" title="Variable (programming)" class="mw-redirect">variable</a> or function – when a <a href="Declaration_(computer_programming).html" title="Declaration (computer programming)">declaration</a> has effect – but can also apply to other entities, such as types (or classes), functions, and <a href="http://en.wikipedia.org/wiki/Label_(computer_science)" title="Label (computer science)">labels</a>. Scope is an important component of <a href="http://en.wikipedia.org/wiki/Name_resolution" title="Name resolution">name resolution</a>, which is in turn fundamental to <a href="http://en.wikipedia.org/wiki/Formal_semantics_of_programming_languages" title="Formal semantics of programming languages" class="mw-redirect">language semantics</a>. Name resolution (including scope) varies between programming languages, and within a programming language, varies by type of entity. Together with <a href="http://en.wikipedia.org/wiki/Namespaces" title="Namespaces" class="mw-redirect">namespaces</a>, scoping rules are crucial in <a href="Modular_programming.html" title="Modular programming">modular programming</a>, so a change in one part of the program does not break an unrelated part.</p>
<p>A fundamental distinction in scoping is what "context" means – whether name resolution depends on the location in the source code (<b>lexical scope</b>, <b>static scope</b>, which depends on the <i>lexical context</i>) or depends on the <a href="http://en.wikipedia.org/wiki/Program_state" title="Program state" class="mw-redirect">program state</a> when the name is encountered (<b>dynamic scope</b>, which depends on the <i><a href="http://en.wikipedia.org/wiki/Execution_context" title="Execution context" class="mw-redirect">execution context</a></i> or <i>calling context</i>). Lexical resolution can be determined at <a href="http://en.wikipedia.org/wiki/Compile_time" title="Compile time">compile time</a>, and is also known as <b>early binding</b>, while dynamic resolution can in general only be determined at <a href="Run_time_(program_lifecycle_phase).html" title="Run time (program lifecycle phase)">run time</a>, and thus is known as <b>late binding</b>. Most modern languages use lexical scoping for variables and functions, though de facto dynamic scoping is common in <a href="http://en.wikipedia.org/wiki/Macro_(computer_science)" title="Macro (computer science)">macro languages</a>, which do not directly do name resolution.</p>
<p>In <a href="Object-oriented_programming.html" title="Object-oriented programming">object-oriented programming</a>, <a href="http://en.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic dispatch</a> selects an object <a href="http://en.wikipedia.org/wiki/Method_(computer_programming)" title="Method (computer programming)">method</a> at runtime, though whether the actual name binding is done at compile time or run time depends on the language. Further, even in lexically scoped languages, scope for <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)" class="mw-redirect">closures</a> can be confusing to the uninitiated, as these depend on the lexical context where the closure is defined, not where it is called.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Levels_of_scope"><span class="tocnumber">2</span> <span class="toctext">Levels of scope</span></a>
<ul>
<li class="toclevel-2 tocsection-3"><a href="#Expression_scope"><span class="tocnumber">2.1</span> <span class="toctext">Expression scope</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Block_scope"><span class="tocnumber">2.2</span> <span class="toctext">Block scope</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Function_scope"><span class="tocnumber">2.3</span> <span class="toctext">Function scope</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#File_scope"><span class="tocnumber">2.4</span> <span class="toctext">File scope</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Module_scope"><span class="tocnumber">2.5</span> <span class="toctext">Module scope</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Global_scope"><span class="tocnumber">2.6</span> <span class="toctext">Global scope</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-9"><a href="#Lexical_scoping_vs._dynamic_scoping"><span class="tocnumber">3</span> <span class="toctext">Lexical scoping vs. dynamic scoping</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Lexical_scoping"><span class="tocnumber">4</span> <span class="toctext">Lexical scoping</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="#History"><span class="tocnumber">4.1</span> <span class="toctext">History</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="#Dynamic_scoping"><span class="tocnumber">5</span> <span class="toctext">Dynamic scoping</span></a>
<ul>
<li class="toclevel-2 tocsection-13"><a href="#Macro_expansion"><span class="tocnumber">5.1</span> <span class="toctext">Macro expansion</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-14"><a href="#Qualified_identifiers"><span class="tocnumber">6</span> <span class="toctext">Qualified identifiers</span></a></li>
<li class="toclevel-1 tocsection-15"><a href="#By_language"><span class="tocnumber">7</span> <span class="toctext">By language</span></a>
<ul>
<li class="toclevel-2 tocsection-16"><a href="#C"><span class="tocnumber">7.1</span> <span class="toctext">C</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="#C.2B.2B"><span class="tocnumber">7.2</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#Go"><span class="tocnumber">7.3</span> <span class="toctext">Go</span></a></li>
<li class="toclevel-2 tocsection-19"><a href="#Java"><span class="tocnumber">7.4</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2 tocsection-20"><a href="#JavaScript"><span class="tocnumber">7.5</span> <span class="toctext">JavaScript</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="#Lisp"><span class="tocnumber">7.6</span> <span class="toctext">Lisp</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#Pascal"><span class="tocnumber">7.7</span> <span class="toctext">Pascal</span></a></li>
<li class="toclevel-2 tocsection-23"><a href="#Python"><span class="tocnumber">7.8</span> <span class="toctext">Python</span></a></li>
<li class="toclevel-2 tocsection-24"><a href="#R"><span class="tocnumber">7.9</span> <span class="toctext">R</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-25"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-26"><a href="#References"><span class="tocnumber">9</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-27"><a href="#Further_reading"><span class="tocnumber">10</span> <span class="toctext">Further reading</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Overview">Overview</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=1" title="Edit section: Overview">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="rellink boilerplate seealso">See also: <a href="Variable_(programming).html#Scope_and_extent" title="Variable (programming)" class="mw-redirect">Variable (programming)#Scope and extent</a></div>
<p>Scope is a source-code level concept – identifiers in the source code are <a href="http://en.wikipedia.org/wiki/Reference_(computer_science)" title="Reference (computer science)">references</a> to entities in the program – and is part of the behavior of a compiler or interpreter of a language. As such, issues of scope are similar to <a href="Pointer_(computer_programming).html" title="Pointer (computer programming)">pointers</a>, which are a type of reference used in programs more generally. Using the value of a variable when the name is in scope but the variable is uninitialized is analogous to dereferencing (accessing the value of) a <a href="Wild_pointer.html" title="Wild pointer" class="mw-redirect">wild pointer</a>, as it is undefined. However, as variables are not destroyed until they go out of scope, the analog of a <a href="Dangling_pointer.html" title="Dangling pointer">dangling pointer</a> does not exist.</p>
<p>For entities such as variables, scope is a subset of <a href="http://en.wikipedia.org/wiki/Object_lifetime" title="Object lifetime">lifetime</a> (also known as <a href="Variable_(programming).html#Scope_and_extent" title="Variable (programming)" class="mw-redirect">extent</a>) – a name can only refer to a variable that exists (possibly with undefined value), but variables that exist are not necessarily visible: a variable may exist but be inaccessible (the value is stored but not referred to within a given context), or accessible but not via the given name, in which case it is <b>out of scope</b>. In other cases "lifetime" is irrelevant – a label (named position in the source code) has lifetime identical with the program (for statically compiled languages), but may be in or out of scope at a given point in the program.</p>
<p>Determining which entity an identifier refers to is known as <a href="http://en.wikipedia.org/wiki/Name_resolution" title="Name resolution">name resolution</a> or <a href="http://en.wikipedia.org/wiki/Name_binding" title="Name binding">name binding</a> (particularly in <a href="Object-oriented_programming.html" title="Object-oriented programming">object-oriented programming</a>), and varies between languages. Given an identifier, the language (properly, the compiler or interpreter) checks all entities that are in scope for matches; in case of ambiguity (two entities with the same name, such as a global and local variable with the same name), the name resolution rules are used to distinguish them. Most frequently, name resolution relies on an "inner-to-outer" rule, such as the Python LEGB (Local, Enclosing, Global, Built-in) rule: names implicitly resolves to the narrowest relevant context. In some cases name resolution can be explicitly specified, such as by the <code>global</code> and <code>nonlocal</code> keywords in Python; in other cases the default rules cannot be overridden.</p>
<p>When two identical identifiers are in scope at the same time, referring to different entities, one says that <i><a href="http://en.wikipedia.org/wiki/Name_masking" title="Name masking" class="mw-redirect">name masking</a></i> is occurring, where the higher-priority name (usually innermost) is "masking" the lower-priority name. At the level of variables, this is known as <a href="http://en.wikipedia.org/wiki/Variable_shadowing" title="Variable shadowing">variable shadowing</a>. Due to the potential for <a href="http://en.wikipedia.org/wiki/Logic_error" title="Logic error">logic errors</a> from masking, some languages disallow or discourage masking, raising an error or warning at compile time or run time.</p>
<p>Various <a href="Programming_language.html" title="Programming language">programming languages</a> have various different scoping rules for different kinds of declarations and identifiers. Such scoping rules have a large effect on <a href="http://en.wikipedia.org/wiki/Formal_semantics_of_programming_languages" title="Formal semantics of programming languages" class="mw-redirect">language semantics</a> and, consequently, on the behavior and correctness of programs. In languages like <a href="C%2b%2b.html" title="C++">C++</a>, accessing an unbound variable does not have well-defined semantics and may result in <a href="http://en.wikipedia.org/wiki/Undefined_behavior" title="Undefined behavior">undefined behavior</a>, similar to referring to a <a href="Dangling_pointer.html" title="Dangling pointer">dangling pointer</a>; and declarations or identifiers used outside their scope will generate <a href="http://en.wikipedia.org/wiki/Syntax_error" title="Syntax error">syntax errors</a>.</p>
<p>Scopes are frequently tied to other language constructs and determined implicitly, but many languages also offer constructs specifically for controlling scope.</p>
<h2><span class="mw-headline" id="Levels_of_scope">Levels of scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=2" title="Edit section: Levels of scope">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Scope can vary from as little as a single expression to as much as the entire program, with many possible gradations in between. The simplest scoping rule is global scope – all entities are visible throughout the entire program. The most basic modular scoping rule is two-level scoping, with a global scope anywhere in the program, and local scope within a function. More sophisticated modular programming allows a separate module scope, where names are visible within the module (private to the module) but not visible outside it. Within a function, some languages, such as C, allow block scope to restrict scope to a subset of a function; others, notably functional languages, allow expression scope, to restrict scope to a single expression. Other scopes include file scope (notably in C), which functions similarly to module scope, and block scope outside of functions (notably in Perl).</p>
<p>A subtle issue is exactly when a name enters and exits scope. In some languages, such as in C, a name enters scope at declaration, and thus different names declared within the same context can have different scopes. This requires declaring functions before use, though not necessarily defining them, and requires <a href="http://en.wikipedia.org/wiki/Forward_declaration" title="Forward declaration">forward declaration</a> in some cases, notably for mutual recursion. In other languages, such as JavaScript or Python, a name enters scope at the beginning of its context (such as the start of a function), regardless of where it is defined, and all names within a given context have the same scope; in JavaScript this is known as <i><a href="http://en.wikipedia.org/wiki/Variable_hoisting" title="Variable hoisting" class="mw-redirect">variable hoisting</a></i>. However, when the name is bound to a value varies, and behavior of in-scope names that have undefined value differs: in Python use of undefined variables yields a syntax error, while in JavaScript undefined variables are usable (with undefined value), but function declarations are also hoisted to the top of the context and usable throughout the context.</p>
<h3><span class="mw-headline" id="Expression_scope">Expression scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=3" title="Edit section: Expression scope">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Many languages, especially <a href="Functional_programming.html" title="Functional programming">functional</a> languages, offer a feature called <i>let-expressions</i>, which allow a declaration's scope to be a single expression. This is convenient if, for example, an intermediate value is needed for a computation. For example, in <a href="http://en.wikipedia.org/wiki/Standard_ML" title="Standard ML">Standard ML</a>, if <tt>f()</tt> returns <tt>12</tt>, then <tt><b>let val</b> x = f() <b>in</b> x * x <b>end</b></tt> is an expression that evaluates to <tt>144</tt>, using a temporary variable named <tt>x</tt> to avoid calling <tt>f()</tt> twice. Some languages with block scope approximate this functionality by offering syntax for a block to be embedded into an expression; for example, the aforementioned Standard ML expression could be written in <a href="Perl.html" title="Perl">Perl</a> as <span class="mw-geshi perl source-perl"><span class="kw1">do</span> <span class="br0">{</span> <span class="kw1">my</span> <span class="re0">$x</span> <span class="sy0">=</span> f<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> <span class="re0">$x</span> <span class="sy0">*</span> <span class="re0">$x</span> <span class="br0">}</span></span>, or in <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GNU C</a> as <span class="mw-geshi c source-c"><span class="br0">(</span><span class="br0">{</span> <span class="kw4">int</span> x <span class="sy0">=</span> f<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> x <span class="sy0">*</span> x<span class="sy0">;</span> <span class="br0">}</span><span class="br0">)</span></span>.</p>
<p>In Python, auxiliary variables in generator expressions and list comprehensions (in Python 3) have expression scope.</p>
<p>In C, variable names in a <a href="Function_prototype.html" title="Function prototype">function prototype</a> have expression scope, known in this context as <b>function protocol scope</b>. As the variable names in the prototype are not referred to (they may be different in the actual definition) – they are just dummies – these are often omitted, though they may be used for generating documentation, for instance.</p>
<h3><span class="mw-headline" id="Block_scope">Block scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=4" title="Edit section: Block scope">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Many, but not all, block-structured programming languages allow scope to be restricted to a <a href="http://en.wikipedia.org/wiki/Block_(programming)" title="Block (programming)">block</a>, which is known as <b>block scope</b>. This began with <a href="http://en.wikipedia.org/wiki/ALGOL_60" title="ALGOL 60">ALGOL 60</a>, where "[e]very declaration ... is valid only for that block.",<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>1<span>]</span></a></sup> and today is particularly associated with <a href="C_(programming_language).html" title="C (programming language)">C</a> and languages influenced by C. Most often this block is contained within a function, thus restricting the scope to a part of a function, but in some cases, such as Perl, the block may not be within a function.</p>
<div style="float:right;margin-left:1em" dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">unsigned</span> <span class="kw4">int</span> sum_of_squares<span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> n<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">unsigned</span> <span class="kw4">int</span> ret <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw1">for</span><span class="br0">(</span><span class="kw4">unsigned</span> <span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;=</span> n<span class="sy0">;</span> <span class="sy0">++</span>i<span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">unsigned</span> <span class="kw4">int</span> n_squared <span class="sy0">=</span> i <span class="sy0">*</span> i<span class="sy0">;</span>
    ret <span class="sy0">+=</span> n_squared<span class="sy0">;</span>
  <span class="br0">}</span>
  <span class="kw1">return</span> ret<span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>A representative example of the use of block scope is the C code at right, where two variables are scoped to the loop: the loop variable <var>i</var>, which is initialized once and incremented on each iteration of the loop, and the auxiliary variable <var>n_squared</var>, which is initialized at each iteration. The purpose is to avoid adding variables to the function scope that are only relevant to a particular block – for example, this prevents errors where the generic loop variable <var>i</var> has accidentally already been set to another value. In this example the expression <code>i * i</code> would generally not be assigned to an auxiliary variable, and the body of the loop would simply be written <code>ret += i * i</code> but in more complicated examples auxiliary variables are useful.</p>
<p>Blocks are primarily used for control flow, such as with if, while, and for loops, and in these cases block scope means the scope of variable depends on the structure of a function's flow of execution. However, languages with block scope typically also allow the use of "naked" blocks, whose sole purpose is to allow fine-grained control of variable scope. For example, an auxiliary variable may be defined in a block, then used (say, added to a variable with function scope) and discarded when the block ends, or a while loop might be enclosed in a block that initializes variables used inside the loop that should only be initialized once.</p>
<div style="float:right;margin-left:1em" dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">if</span> <span class="br0">(</span><span class="kw4">int</span> y <span class="sy0">=</span> f<span class="br0">(</span>x<span class="br0">)</span><span class="sy0">,</span> y <span class="sy0">&gt;</span> x<span class="br0">)</span> <span class="br0">{</span>
    ... <span class="co1">// statements involving x and y</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>A subtlety of C, demonstrated in this example and standardized since <a href="C99.html" title="C99">C99</a>, is that block-scope variables can be declared not only within the body of the block, but also within the control statement, if any. This is analogous to function parameters, which are declared in the function declaration (before the block of the function body starts), and in scope for the whole function body. This is primarily used in <a href="For_loop.html" title="For loop">for loops</a>, which have an initialization statement separate from the loop condition, unlike while loops, and is a common idiom. A rarer use is in an if statement, where the <a href="Comma_operator.html" title="Comma operator">comma operator</a> can be used to follow a variable declaration and initialization with a separate test, so the auxiliary variable has block scope.</p>
<p>Block scope can be used for shadowing. In this example, inside the block the auxiliary variable could also have been called <var>n</var>, shadowing the parameter name, but this is considered poor style due to the potential for errors. Furthermore, some descendants of C, such as Java and C#, despite having support for block scope (in that a local variable can be made to go out of scope before the end of a function), do not allow one local variable to hide another. In such languages, the attempted declaration of the second <var>n</var> would result in a syntax error, and one of the <var>n</var> variables would have to be renamed.</p>
<p>If a block is used to set the value of a variable, block scope requires that the variable be declared outside of the block. This complicates the use of conditional statements with <a href="http://en.wikipedia.org/wiki/Single_assignment" title="Single assignment" class="mw-redirect">single assignment</a>. For example, in Python, which does not use block scope, one may initialize a variable as such:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
<span class="kw1">if</span> c:
    a <span class="sy0">=</span> <span class="st0">'foo'</span>
<span class="kw1">else</span>:
    a <span class="sy0">=</span> <span class="st0">''</span>
</pre></div>
</div>
<p>where <code>a</code> is accessible after the <code>if</code> statement.</p>
<p>In Perl, which has block scope, this instead requires declaring the variable prior to the block:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="perl source-perl">
<pre class="de1">
<span class="kw1">my</span> <span class="re0">$a</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">(</span>c<span class="br0">)</span> <span class="br0">{</span>
    <span class="re0">$a</span> <span class="sy0">=</span> <span class="st_h">'foo'</span><span class="sy0">;</span>
<span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
    <span class="re0">$a</span> <span class="sy0">=</span> <span class="st_h">''</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>Often this is instead rewritten using multiple assignment, initializing the variable to a default value. In Python (where it is not necessary) this would be:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
a <span class="sy0">=</span> <span class="st0">''</span>
<span class="kw1">if</span> c:
    a <span class="sy0">=</span> <span class="st0">'foo'</span>
</pre></div>
</div>
<p>while in Perl this would be:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="perl source-perl">
<pre class="de1">
<span class="kw1">my</span> <span class="re0">$a</span> <span class="sy0">=</span> <span class="st_h">''</span><span class="sy0">;</span>
<span class="kw1">if</span> <span class="br0">(</span>c<span class="br0">)</span> <span class="br0">{</span>
    <span class="re0">$a</span> <span class="sy0">=</span> <span class="st_h">'foo'</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>This is a more significant issue in C, notably for string assignment, as string initialization can automatically allocate memory, while string assignment to an already initialized variable requires allocating memory, a string copy, and checking that these are successful.</p>
<div style="float:right;margin-left:1em" dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="perl source-perl">
<pre class="de1">
<span class="br0">{</span> <span class="kw1">my</span> <span class="re0">$counter</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
  <span class="kw2">sub</span> increment_counter<span class="br0">(</span><span class="br0">)</span>
  <span class="br0">{</span> <span class="re0">$counter</span> <span class="sy0">=</span> <span class="re0">$counter</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">;</span>
    <span class="kw3">return</span> <span class="re0">$counter</span><span class="sy0">;</span>
  <span class="br0">}</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>Some languages allow the concept of block scope to be applied, to varying extents, outside of a function. For example, in the Perl snippet at right, <var>$counter</var> is a variable name with block scope (due to the use of the <tt>my</tt> keyword), while <var>increment_counter</var> is a function name with global scope. Each call to <var>increment_counter</var> will increase the value of <var>$counter</var> by one, and return the new value. Code outside of this block can call <var>increment_counter</var>, but cannot otherwise obtain or alter the value of <var>$counter</var>. This idiom allows one to define <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)" class="mw-redirect">closures</a> in Perl.</p>
<h3><span class="mw-headline" id="Function_scope">Function scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=5" title="Edit section: Function scope">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Most of the commonly used programming languages offer a way to create a <i><a href="http://en.wikipedia.org/wiki/Local_variable" title="Local variable">local variable</a></i> in a function or <a href="Subroutine.html" title="Subroutine">subroutine</a>: a variable that goes out of scope when the function returns. In most cases the lifetime of the variable is the duration of the function call – it is an <a href="http://en.wikipedia.org/wiki/Automatic_variable" title="Automatic variable">automatic variable</a>, created when the function starts (or the variable is declared), destroyed when the function returns – while the scope of the variable is within the function, though the meaning of "within" depends on whether scoping is lexical or dynamic. However, some languages, such as C, also provide for <a href="http://en.wikipedia.org/wiki/Static_local_variable" title="Static local variable" class="mw-redirect">static local variables</a>, where the lifetime of the variable is the entire lifetime of the program, but the variable is only in scope when inside the function. In the case of static local variables, the variable is created when the program initializes, and destroyed only when the program terminates, as with a <a href="http://en.wikipedia.org/wiki/Static_global_variable" title="Static global variable" class="mw-redirect">static global variable</a>, but is only in scope within a function, like an automatic local variable.</p>
<p>Importantly, in lexical scoping a variable with function scope moves <i>out</i> of scope when another function is called within the function, and moves back into scope when the function returns – called functions have no access to the local variables of calling functions, and local variables are only in scope within the body of the function in which they are declared. By contrast, in dynamic scoping, local variables <i>stay in scope</i> when another function is called, only moving out of scope when the defining function ends, and thus local variables are in scope of the function is which they are defined <i>and all called functions</i>. In languages with lexical scoping and <a href="http://en.wikipedia.org/wiki/Nested_function" title="Nested function">nested functions</a>, local variables are in scope for nested functions, since these are within the same lexical scope, but not for other functions that are not lexically nested. A local variable of an enclosing function is known as a <a href="http://en.wikipedia.org/wiki/Non-local_variable" title="Non-local variable">non-local variable</a> for the nested function. Function scope is also applicable to <a href="http://en.wikipedia.org/wiki/Anonymous_function" title="Anonymous function">anonymous functions</a>.</p>
<div style="float:right;margin-left:1em" dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
<span class="kw1">def</span> square<span class="br0">(</span>n<span class="br0">)</span>:
  <span class="kw1">return</span> n * n
 
<span class="kw1">def</span> sum_of_squares<span class="br0">(</span>n<span class="br0">)</span>:
  total <span class="sy0">=</span> <span class="nu0">0</span> 
  i <span class="sy0">=</span> <span class="nu0">0</span>
  <span class="kw1">while</span> i <span class="sy0">&lt;=</span> n:
    total +<span class="sy0">=</span> square<span class="br0">(</span>i<span class="br0">)</span>
    i +<span class="sy0">=</span> <span class="nu0">1</span>
  <span class="kw1">return</span> ret
</pre></div>
</div>
<p>For example, in the snippet of Python code on the right, two functions are defined: <tt>square</tt> and <tt>sum_of_squares</tt>. <tt>square</tt> computes the square of a number; <tt>sum_of_squares</tt> computes the sum of all squares up to a number. (For example, <tt>square(4)</tt> is 4<sup>2</sup>&#160;=&#160;<tt>16</tt>, and <tt>sum_of_squares(4)</tt> is 0<sup>2</sup>&#160;+&#160;1<sup>2</sup>&#160;+&#160;2<sup>2</sup>&#160;+&#160;3<sup>2</sup>&#160;+&#160;4<sup>2</sup>&#160;=&#160;<tt>30</tt>.)</p>
<p>Each of these functions has a variable named <var>n</var> that represents the argument to the function. These two <var>n</var> variables are completely separate and unrelated, despite having the same name, because they are lexically scoped local variables, with function scope: each one's scope is its own, lexically separate, function, so they don't overlap. Therefore, <tt>sum_of_squares</tt> can call <tt>square</tt> without its own <var>n</var> being altered. Similarly, <tt>sum_of_squares</tt> has variables named <var>total</var> and <var>i</var>; these variables, because of their limited scope, will not interfere with any variables named <var>ret</var> or <var>i</var> that might belong to any other function. In other words, there is no risk of a <i>name collision</i> between these identifiers and any unrelated identifiers, even if they are identical.</p>
<p>Note also that no name masking is occurring: only one variable named <var>n</var> is in scope at any given time. By contrast, were a similar fragment to be written in a language with dynamic scope, the <var>n</var> in the calling function would remain in scope in the called function, and would be masked by the new <var>n</var> in the called function.</p>
<p>Function scope is significantly more complicated if functions are first-class objects and can be created locally to a function and then returned. In this case any variables in the nested function that are not local to it (unbound variables in the function definition, that resolve to variables in an enclosing scope) create a <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)" class="mw-redirect">closure</a>, as not only the function itself, but also its environment (of variables) must be returned, and then potentially called in a different context. This requires significantly more support from the compiler, and can complicate program analysis.</p>
<h3><span class="mw-headline" id="File_scope">File scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=6" title="Edit section: File scope">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A scoping rule largely particular to C (and C++) is <b>file scope</b>, where scope of variables and functions declared at the top level of a file (not within any function) is for the entire file – or rather for C, from the declaration until the end of the source file, or more precisely <a href="http://en.wikipedia.org/wiki/Translation_unit_(programming)" title="Translation unit (programming)">translation unit</a> (internal linking). This can be seen as a form of module scope, where modules are identified with files, and in more modern languages is replaced by an explicit module scope. Due to the presence of include statements, which add variables and functions to the internal scope and may themselves call further include statements, it can be difficult to determine what is in scope in the body of a file.</p>
<p>In the C code snippet above, the function name <tt>sum_of_squares</tt> has file scope.</p>
<h3><span class="mw-headline" id="Module_scope">Module scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=7" title="Edit section: Module scope">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In <a href="Modular_programming.html" title="Modular programming">modular programming</a>, the scope of a name can be an entire module, however it may be structured across various files. In this paradigm, modules are the basic unit of a complex program, as they allow information hiding and exposing a limited interface. Module scope was pioneered in the <a href="http://en.wikipedia.org/wiki/Modula" title="Modula">Modula</a> family of languages, and Python (which was influenced by Modula) is a representative contemporary example.</p>
<p>In some <a href="Object-oriented_programming.html" title="Object-oriented programming">object-oriented programming</a> languages that lack direct support for modules, such as C++, a similar structure is instead provided by the class hierarchy, where classes are the basic unit of the program, and a class can have private methods. This is properly understood in the context of <a href="http://en.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic dispatch</a> rather than name resolution and scope, though they often play analogous roles. In some cases both these facilities are available, such as in Python, which has both modules and classes, and code organization (as a module-level function or a conventionally private method) is a choice of the programmer.</p>
<h3><span class="mw-headline" id="Global_scope">Global scope</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=8" title="Edit section: Global scope">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A declaration has <i>global scope</i> if it has effect throughout an entire program. Variable names with global scope — called <i><a href="http://en.wikipedia.org/wiki/Global_variables" title="Global variables" class="mw-redirect">global variables</a></i> — are frequently considered bad practice, at least in some languages, due to the possibility of name collisions and unintentional masking, together with poor modularity, and function scope or block scope are considered preferable. However, global scope is typically used (depending on the language) for various other sorts of identifiers, such as names of functions, and names of <a href="http://en.wikipedia.org/wiki/Class_(computer_programming)" title="Class (computer programming)">classes</a> and other <a href="Data_type.html" title="Data type">data types</a>. In these cases mechanisms such as <a href="http://en.wikipedia.org/wiki/Namespaces" title="Namespaces" class="mw-redirect">namespaces</a> are used to avoid collisions.</p>
<p>In the Python code snippet above, the function names <tt>square</tt> and <tt>sum_of_squares</tt> have global scope.</p>
<h2><span class="mw-headline" id="Lexical_scoping_vs._dynamic_scoping">Lexical scoping vs. dynamic scoping</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=9" title="Edit section: Lexical scoping vs. dynamic scoping">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The use of local variables — of variable names with limited scope, that only exist within a specific function — helps avoid the risk of a name collision between two identically named variables. However, there are two very different approaches to answering this question: What does it mean to be "within" a function?</p>
<p>In <i>lexical scoping</i> (or <i>lexical scope</i>; also called <i>static scoping</i> or <i>static scope</i>), if a variable name's scope is a certain function, then its scope is the program text of the function definition: within that text, the variable name exists, and is bound to the variable's value, but outside that text, the variable name does not exist. By contrast, in <i>dynamic scoping</i> (or <i>dynamic scope</i>), if a variable name's scope is a certain function, then its scope is the time-period during which the function is executing: while the function is running, the variable name exists, and is bound to its variable, but after the function returns, the variable name does not exist. This means that if function <tt>f</tt> invokes a separately defined function <tt>g</tt>, then under lexical scoping, function <tt>g</tt> does <i>not</i> have access to <tt>f</tt>'s local variables (since the text of <tt>g</tt> is not inside the text of <tt>f</tt>), while under dynamic scoping, function <tt>g</tt> <i>does</i> have access to <tt>f</tt>'s local variables (since the invocation of <tt>g</tt> is inside the invocation of <tt>f</tt>).</p>
<div style="float:right;margin-left:1em" dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="bash source-bash">
<pre class="de1">
<span class="re2">x</span>=<span class="nu0">1</span>
<span class="kw1">function</span> g <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">echo</span> <span class="re1">$x</span> ; <span class="re2">x</span>=<span class="nu0">2</span> ; <span class="br0">}</span>
<span class="kw1">function</span> f <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">local</span> <span class="re2">x</span>=<span class="nu0">3</span> ; g ; <span class="br0">}</span>
f <span class="co0"># does this print 1, or 3?</span>
<span class="kw3">echo</span> <span class="re1">$x</span> <span class="co0"># does this print 1, or 2?</span>
</pre></div>
</div>
<p>Consider, for example, the program at right. The first line, <span class="mw-geshi bash source-bash"><span class="re2">x</span>=<span class="nu0">1</span></span>, creates a global variable <tt>x</tt> and initializes it to <tt>1</tt>. The second line, <span class="mw-geshi bash source-bash"><span class="kw1">function</span> g <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">echo</span> <span class="re1">$x</span>&#160;; <span class="re2">x</span>=<span class="nu0">2</span>&#160;; <span class="br0">}</span></span>, defines a function <tt>g</tt> that prints out ("echoes") the current value of <tt>x</tt>, and then sets <tt>x</tt> to <tt>2</tt> (overwriting the previous value). The third line, <span class="mw-geshi bash source-bash"><span class="kw1">function</span> f <span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> <span class="kw3">local</span> <span class="re2">x</span>=<span class="nu0">3</span>&#160;; g&#160;; <span class="br0">}</span></span> defines a function <tt>f</tt> that creates a local variable <tt>x</tt> (hiding the identically named global variable) and initializes it to <tt>3</tt>, and then calls <tt>g</tt>. The fourth line, <span class="mw-geshi bash source-bash">f</span>, calls <tt>f</tt>. The fifth line, <span class="mw-geshi bash source-bash"><span class="kw3">echo</span> <span class="re1">$x</span></span>, prints out the current value of <tt>x</tt>.</p>
<p>So, what exactly does this program print? It depends on the scoping rules. If the language of this program is one that uses lexical scoping, then <tt>g</tt> prints and modifies the global variable <tt>x</tt> (because <tt>g</tt> is defined outside <tt>f</tt>), so the program prints <tt>1</tt> and then <tt>2</tt>. By contrast, if this language uses dynamic scoping, then <tt>g</tt> prints and modifies <tt>f</tt>'s local variable <tt>x</tt> (because <tt>g</tt> is called from within <tt>f</tt>), so the program prints <tt>3</tt> and then <tt>1</tt>. (As it happens, the language of the program is <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)" title="Bash (Unix shell)">Bash</a>, which uses dynamic scoping; so the program prints <tt>3</tt> and then <tt>1</tt>.)<br style="clear:both;" /></p>
<h2><span class="mw-headline" id="Lexical_scoping">Lexical scoping</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=10" title="Edit section: Lexical scoping">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>With <b>lexical scope</b>, a name always refers to its (more or less) local lexical environment. This is a property of the program text and is made independent of the runtime <a href="Call_stack.html" title="Call stack">call stack</a> by the language implementation. Because this matching only requires analysis of the static program text, this type of scoping is also called <b>static scoping</b>. Lexical scoping is standard in all <a href="ALGOL.html" title="ALGOL">ALGOL</a>-based languages such as <a href="Pascal_(programming_language).html" title="Pascal (programming language)">Pascal</a>, <a href="http://en.wikipedia.org/wiki/Modula2" title="Modula2" class="mw-redirect">Modula2</a> and <a href="http://en.wikipedia.org/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> as well as in modern functional languages such as <a href="http://en.wikipedia.org/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> and <a href="http://en.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>. It is also used in the <a href="C_(programming_language).html" title="C (programming language)">C language</a> and its syntactic and semantic relatives, although with different kinds of limitations. Static scoping allows the programmer to reason about object references such as parameters, variables, constants, types, functions, etc. as simple name substitutions. This makes it much easier to make modular code and reason about it, since the local naming structure can be understood in isolation. In contrast, dynamic scope forces the programmer to anticipate all possible dynamic contexts in which the module's code may be invoked.</p>
<div style="float:right;margin-left:1em" dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="pascal source-pascal">
<pre class="de1">
<span class="kw1">program</span> A<span class="sy1">;</span>
<span class="kw1">var</span> I<span class="sy1">:</span><span class="kw4">integer</span><span class="sy1">;</span>
    K<span class="sy1">:</span><span class="kw4">char</span><span class="sy1">;</span>
 
    <span class="kw1">procedure</span> B<span class="sy1">;</span>
    <span class="kw1">var</span> K<span class="sy1">:</span><span class="kw4">real</span><span class="sy1">;</span>
        L<span class="sy1">:</span><span class="kw4">integer</span><span class="sy1">;</span>
 
        <span class="kw1">procedure</span> C<span class="sy1">;</span>
        <span class="kw1">var</span> M<span class="sy1">:</span><span class="kw4">real</span><span class="sy1">;</span>
        <span class="kw1">begin</span>
         <span class="coMULTI">(*scope A+B+C*)</span>
        <span class="kw1">end</span><span class="sy1">;</span>
 
     <span class="coMULTI">(*scope A+B*)</span>
    <span class="kw1">end</span><span class="sy1">;</span>
 
 <span class="coMULTI">(*scope A*)</span>
<span class="kw1">end</span><span class="sy1">.</span>
</pre></div>
</div>
<p>For example, consider the Pascal program fragment at right. The variable <code>I</code> is visible at all points, because it is never hidden by another variable of the same name. The <code>char</code> variable <code>K</code> is visible only in the main program because it is hidden by the <code>real</code> variable <code>K</code> visible in procedure <code>B</code> and <code>C</code> only. Variable <code>L</code> is also visible only in procedure <code>B</code> and <code>C</code> but it does not hide any other variable. Variable <code>M</code> is only visible in procedure <code>C</code> and therefore not accessible either from procedure <code>B</code> or the main program. Also, procedure <code>C</code> is visible only in procedure <code>B</code> and can therefore not be called from the main program.</p>
<p>There could have been another procedure <code>C</code> declared in the program outside of procedure <code>B</code>. The place in the program where "<code>C</code>" is mentioned then determines which of the two procedures named <code>C</code> it represents, thus precisely analogous with the scope of variables.</p>
<p>Correct implementation of static scope in languages with <a href="http://en.wikipedia.org/wiki/First-class_function" title="First-class function">first-class</a> <a href="http://en.wikipedia.org/wiki/Nested_function" title="Nested function">nested functions</a> is not trivial, as it requires each function value to carry with it a record of the values of the variables that it depends on (the pair of the function and this environment is called a <a href="http://en.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)" class="mw-redirect">closure</a>). Depending on implementation and <a href="Computer_architecture.html" title="Computer architecture">computer architecture</a>, variable <a href="http://en.wikipedia.org/wiki/Lookup" title="Lookup" class="mw-redirect">lookup</a> <i>may</i> become slightly inefficient<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (June 2012)">citation needed</span></a></i>]</sup> when very deeply lexically <a href="http://en.wikipedia.org/wiki/Nesting_(computing)" title="Nesting (computing)">nested</a> functions are used, although there are well-known techniques to mitigate this.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (August 2012)">citation needed</span></a></i>]</sup> Also, for nested functions that only refer to their own arguments and (immediately) local variables, all relative locations can be known at <a href="http://en.wikipedia.org/wiki/Compile_time" title="Compile time">compile time</a>. No overhead at all is therefore incurred when using that type of nested function. The same applies to particular parts of a program where nested functions are not used, and, naturally, to programs written in a language where nested functions are not available (such as in the C language).</p>
<h3><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=11" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Lexical scoping was used for <a href="ALGOL.html" title="ALGOL">ALGOL</a> and has been picked up in most other languages since then. <i>Deep binding</i>, which approximates static (lexical) scoping, was introduced in LISP 1.5 (via the <a href="http://en.wikipedia.org/wiki/Funarg" title="Funarg" class="mw-redirect">Funarg</a> device developed by <a href="http://en.wikipedia.org/wiki/Steve_Russell" title="Steve Russell">Steve Russell</a>, working under <a href="http://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)" title="John McCarthy (computer scientist)">John McCarthy</a>). The original Lisp interpreter (1960) and most early <a href="Lisp_(programming_language).html" title="Lisp (programming language)">Lisps</a> used dynamic scoping, but descendants of dynamically scoped languages often adopt static scoping; <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> has both dynamic and static scoping while <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> uses static scoping exclusively. <a href="Perl.html" title="Perl">Perl</a> is another language with dynamic scoping that added static scoping afterwards. Languages like <a href="Pascal_(programming_language).html" title="Pascal (programming language)">Pascal</a> and <a href="C_(programming_language).html" title="C (programming language)">C</a> have always had lexical scoping, since they are both influenced by the ideas that went into <a href="http://en.wikipedia.org/wiki/ALGOL_60" title="ALGOL 60">ALGOL 60</a> (although C did not include lexically <a href="http://en.wikipedia.org/wiki/Nested_function" title="Nested function">nested functions</a>).<br style="clear:both;" /></p>
<h2><span class="mw-headline" id="Dynamic_scoping">Dynamic scoping</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=12" title="Edit section: Dynamic scoping">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>With <b>dynamic scope</b>, each identifier has a global <a href="Stack_(data_structure).html" title="Stack (data structure)" class="mw-redirect">stack</a> of bindings. Introducing a local variable with name <code>x</code> pushes a binding onto the global <code>x</code> stack (which may have been empty), which is popped off when the <a href="http://en.wikipedia.org/wiki/Control_flow" title="Control flow">control flow</a> leaves the scope. Evaluating <code>x</code> in any context always yields the top binding. In other words, a global identifier refers to the identifier associated with the most recent environment. Note that this cannot be done at compile-time because the binding stack only exists at <a href="Run_time_(program_lifecycle_phase).html" title="Run time (program lifecycle phase)">run-time</a>, which is why this type of scoping is called <i>dynamic</i> scoping.</p>
<p>Generally, certain <a href="http://en.wikipedia.org/wiki/Block_(programming)" title="Block (programming)">blocks</a> are defined to create bindings whose lifetime is the execution time of the block; this adds some features of static scoping to the dynamic scoping process. However, since a section of code can be called from many different locations and situations, it can be difficult to determine at the outset what bindings will apply when a variable is used (or if one exists at all). This can be beneficial; application of the <a href="http://en.wikipedia.org/wiki/Principle_of_least_knowledge" title="Principle of least knowledge" class="mw-redirect">principle of least knowledge</a> suggests that code avoid depending on the <i>reasons</i> for (or circumstances of) a variable's value, but simply use the value according to the variable's definition. This narrow interpretation of shared data can provide a very flexible system for adapting the behavior of a function to the current state (or policy) of the system. However, this benefit relies on careful documentation of all variables used this way as well as on careful avoidance of assumptions about a variable's behavior, and does not provide any mechanism to detect interference between different parts of a program. Dynamic scoping also voids all the benefits of <a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science)" title="Referential transparency (computer science)">referential transparency</a>. As such, dynamic scoping can be dangerous and few modern languages use it. Some languages, like <a href="Perl.html" title="Perl">Perl</a> and <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a>, allow the programmer to choose static or dynamic scoping when defining or redefining a variable. Examples of languages that use dynamic scoping include <a href="http://en.wikipedia.org/wiki/Logo_(programming_language)" title="Logo (programming language)">Logo</a>, <a href="http://en.wikipedia.org/wiki/Emacs_lisp" title="Emacs lisp" class="mw-redirect">Emacs lisp</a>, and the shell languages <a href="http://en.wikipedia.org/wiki/Bash_(Unix_shell)" title="Bash (Unix shell)">bash</a>, <a href="http://en.wikipedia.org/wiki/Dash" title="Dash">dash</a>, and the MirBSD Korn shell (mksh).</p>
<p>Dynamic scoping is fairly easy to implement. To find an identifier's value, the program could traverse the runtime stack, checking each activation record (each function's stack frame) for a value for the identifier. In practice, this is made more efficient via the use of an <a href="Association_list.html" title="Association list">association list</a>, which is a stack of name/value pairs. Pairs are pushed onto this stack whenever declarations are made, and popped whenever variables go out of scope.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>2<span>]</span></a></sup> <i>Shallow binding</i> is an alternative strategy that is considerably faster, making use of a <i>central reference table</i>, which associates each name with its own stack of meanings. This avoids a linear search during run-time to find a particular name, but care should be taken to properly maintain this table.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>3<span>]</span></a></sup> Note that both of these strategies assume a last-in-first-out (<a href="http://en.wikipedia.org/wiki/LIFO_(computing)" title="LIFO (computing)">LIFO</a>) ordering to bindings for any one variable; in practice all bindings are so ordered.</p>
<p>An even simpler implementation is the representation of dynamic variables with simple global variables. The local binding is performed by saving the original value in an anonymous location on the stack that is invisible to the program. When that binding scope terminates, the original value is restored from this location. In fact, dynamic scope originated in this manner. Early implementations of Lisp used this obvious strategy for implementing local variables, and the practice survives in some dialects which are still in use, such as GNU Emacs Lisp. Lexical scope was introduced into Lisp later. This is equivalent to the above shallow binding scheme, except that the central reference table is simply the global variable binding environment, in which the current meaning of the variable is its global value. Maintaining global variables isn't complex. For instance, a symbol object can have a dedicated slot for its global value.</p>
<p>Dynamic scoping provides an excellent abstraction for <a href="http://en.wikipedia.org/wiki/Thread_local_storage" title="Thread local storage" class="mw-redirect">thread local storage</a>, but if it is used that way it cannot be based on saving and restoring a global variable. A possible implementation strategy is for each variable to have a thread-local key. When the variable is accessed, the thread-local key is used to access the thread-local memory location (by code generated by the compiler, which knows which variables are dynamic and which are lexical). If the thread-local key does not exist for the calling thread, then the global location is used. When a variable is locally bound, the prior value is stored in a hidden location on the stack. The thread-local storage is created under the variable's key, and the new value is stored there. Further nested overrides of the variable within that thread simply save and restore this thread-local location. When the initial, outer-most override's scope terminates, the thread-local key is deleted, exposing the global version of the variable once again to that thread.</p>
<h3><span class="mw-headline" id="Macro_expansion">Macro expansion</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=13" title="Edit section: Macro expansion">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Macro_expansion" title="Macro expansion" class="mw-redirect">Macro expansion</a></div>
<p>In modern languages, <a href="http://en.wikipedia.org/wiki/Macro_expansion" title="Macro expansion" class="mw-redirect">macro expansion</a> in a <a href="http://en.wikipedia.org/wiki/Preprocessor" title="Preprocessor">preprocessor</a> is a key example of de facto dynamic scope. The macro language itself only transforms the source code, without resolving names, but since the expansion is done in place, when the names in the expanded text are then resolved (notably free variables), they are resolved based on where they are expanded (loosely "called"), as if dynamic scoping were occurring.</p>
<p>The <a href="C_preprocessor.html" title="C preprocessor">C preprocessor</a>, used for <a href="http://en.wikipedia.org/wiki/Macro_expansion" title="Macro expansion" class="mw-redirect">macro expansion</a>, has de facto dynamic scope, as it does not do name resolution by itself. For example, the macro:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#define ADD_A(x) x + a</span>
</pre></div>
</div>
<p>will expand to add <code>a</code> to the passed variable, with this identifier only later resolved by the compiler based on where the macro <code>ADD_A</code> is "called" (properly, expanded), is in dynamic scope, and is independent of where the macro is defined. Properly, the C preprocessor only does <a href="http://en.wikipedia.org/wiki/Lexical_analysis" title="Lexical analysis">lexical analysis</a>, expanding the macro during the tokenization stage, but not parsing into a syntax tree or doing name resolution.</p>
<p>For example, in the following code, the <code>a</code> in the macro is resolved (after expansion) to the local variable at the expansion site:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#define ADD_A(x) x + a</span>
 
<span class="kw4">void</span> add_one<span class="br0">(</span><span class="kw4">int</span> <span class="sy0">*</span>x<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">const</span> <span class="kw4">int</span> a <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
  <span class="sy0">*</span>x <span class="sy0">=</span> ADD_A<span class="br0">(</span><span class="sy0">*</span>x<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">void</span> add_two<span class="br0">(</span><span class="kw4">int</span> <span class="sy0">*</span>x<span class="br0">)</span> <span class="br0">{</span>
  <span class="kw4">const</span> <span class="kw4">int</span> a <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
  <span class="sy0">*</span>x <span class="sy0">=</span> ADD_A<span class="br0">(</span><span class="sy0">*</span>x<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<h2><span class="mw-headline" id="Qualified_identifiers">Qualified identifiers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=14" title="Edit section: Qualified identifiers">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>As we have seen, one of the key reasons for scope is that it helps prevent name collisions, by allowing identical identifiers to refer to distinct things, with the restriction that the identifiers must have separate scopes. Sometimes this restriction is inconvenient; when many different things need to be accessible throughout a program, they generally all need identifiers with global scope, so different techniques are required to avoid name collisions.</p>
<p>To address this, many languages offer mechanisms for organizing global identifiers. The details of these mechanisms, and the terms used, depend on the language; but the general idea is that a group of identifiers can itself be given a name — a prefix — and, when necessary, an entity can be referred to by a <i>qualified identifier</i> consisting of the identifier plus the prefix. Normally such identifiers will have, in a sense, two sets of scopes: a scope (usually the global scope) in which the qualified identifier is visible, and one or more narrower scopes in which the <i>unqualified identifier</i> (without the prefix) is visible as well. And normally these groups can themselves be organized into groups; that is, they can be <i>nested</i>.</p>
<p>Although many languages support this concept, the details vary greatly. Some languages have mechanisms, such as <i>namespaces</i> in <a href="C%2b%2b.html" title="C++">C++</a> and <a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a>, that serve almost exclusively to enable global identifiers to be organized into groups. Other languages have mechanisms, such as <i>packages</i> in <a href="http://en.wikipedia.org/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a> and <i>structures</i> in <a href="http://en.wikipedia.org/wiki/Standard_ML" title="Standard ML">Standard ML</a>, that combine this with the additional purpose of allowing some identifiers to be visible only to other members of their group. And object-oriented languages often allow classes or singleton objects to fulfill this purpose (whether or not they <i>also</i> have a mechanism for which this is the primary purpose). Furthermore, languages often meld these approaches; for example, <a href="Perl.html" title="Perl">Perl</a>'s packages are largely similar to C++'s namespaces, but optionally double as classes for object-oriented programming; and <a href="Java_(programming_language).html" title="Java (programming language)">Java</a> organizes its variables and functions into classes, but then organizes those classes into Ada-like packages.</p>
<h2><span class="mw-headline" id="By_language">By language</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=15" title="Edit section: By language">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks ambox mbox-small-left ambox-content" role="presentation">
<tr>
<td class="mbox-image"><a href="http://en.wikipedia.org/wiki/File:Wiki_letter_w_cropped.svg" class="image"><img alt="[icon]" src="http://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/20px-Wiki_letter_w_cropped.svg.png" width="20" height="14" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/30px-Wiki_letter_w_cropped.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/40px-Wiki_letter_w_cropped.svg.png 2x" /></a></td>
<td class="mbox-text"><span class="mbox-text-span">This section requires <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit">expansion</a>. <small><i>(April 2013)</i></small></span></td>
</tr>
</table>
<p>Scoping rules for representative languages follow.</p>
<h3><span class="mw-headline" id="C">C</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=16" title="Edit section: C">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Linkage_(software)" title="Linkage (software)">Linkage (software)</a></div>
<p>In C, scope is traditionally known as <b><a href="http://en.wikipedia.org/wiki/Linkage_(software)" title="Linkage (software)">linkage</a></b> or <b>visibility</b>, particularly for variables. C is a lexically scoped language with global scope (known as <i>external linkage</i>), a form of module scope or file scope (known as <i>internal linkage</i>), and local scope (within a function); within a function scopes can further be nested via block scope. However, standard C does not support nested functions.</p>
<p>The lifetime and visibility of a variable are determined by its <a href="http://en.wikipedia.org/wiki/Storage_class" title="Storage class" class="mw-redirect">storage class</a>. There are three types of lifetimes in C: static (program execution), automatic (block execution, allocated on the stack), and manual (allocated on the heap). Only static and automatic are supported for variables and handled by the compiler, while manually allocated memory must be tracked manually across different variables. There are three levels of visibility in C: external linkage (global), internal linkage (roughly file), and block scope (which includes functions); block scopes can be nested, and different levels of internal linkage is possible by use of includes. Internal linkage in C is visibility at the <a href="http://en.wikipedia.org/wiki/Translation_unit_(programming)" title="Translation unit (programming)">translation unit</a> level, namely a source file after being processed by the <a href="C_preprocessor.html" title="C preprocessor">C preprocessor</a>, notably including all relevant includes.</p>
<p>C programs are compiled as separate <a href="http://en.wikipedia.org/wiki/Object_file" title="Object file">object files</a>, which are then linked into an executable or library via a <a href="Linker_(computing).html" title="Linker (computing)">linker</a>. Thus name resolution is split across the compiler, which resolves names within a translation unit (more loosely, "compilation unit", but this is properly a different concept), and the linker, which resolves names across translation units; see <a href="http://en.wikipedia.org/wiki/Linkage_(software)" title="Linkage (software)">linkage</a> for further discussion.</p>
<p>In C, variables with block scope enter scope when they are declared (not at the top of the block), move out of scope if any (non-nested) function is called within the block, move back into scope when the function returns, and move out of scope at the end of the block. In the case of automatic local variables, they are also allocated on declaration and deallocated at the end of the block, while for static local variables, they are allocated at program initialization and deallocated at program termination.</p>
<p>The following program demonstrates a variable with block scope coming into scope partway through the block, then exiting scope (and in fact being deallocated) when the block ends:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span> 
    <span class="kw4">char</span> x <span class="sy0">=</span> <span class="st0">'m'</span><span class="sy0">;</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%c<span class="es1">\n</span>"</span><span class="sy0">,</span> x<span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">{</span>
        <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%c<span class="es1">\n</span>"</span><span class="sy0">,</span> x<span class="br0">)</span><span class="sy0">;</span>
        <span class="kw4">char</span> x <span class="sy0">=</span> <span class="st0">'b'</span><span class="sy0">;</span>
        <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%c<span class="es1">\n</span>"</span><span class="sy0">,</span> x<span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%c<span class="es1">\n</span>"</span><span class="sy0">,</span> x<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>There are other levels of scope in C.<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>4<span>]</span></a></sup> Variable names used in a function prototype have function prototype visibility, and exit scope at the end of the function prototype. Since the name is not used, this is not useful for compilation, but may be useful for documentation. Label names for GOTO statement have function scope, while case label names for <a href="Switch_statement.html" title="Switch statement">switch statements</a> have block scope (the block of the switch).</p>
<h3><span class="mw-headline" id="C.2B.2B">C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=17" title="Edit section: C++">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>All the variables that we intend to use in a program must have been declared with its type specifier in an earlier point in the code, like we did in the previous code at the beginning of the body of the function main when we declared that a, b, and result were of type int. A variable can be either of global or local scope. A global variable is a variable declared in the main body of the source code, outside all functions, while a local variable is one declared within the body of a function or a block.</p>
<h3><span class="mw-headline" id="Go">Go</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=18" title="Edit section: Go">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="Go_(programming_language).html" class="extiw" title="w:Go (programming language)">Go</a> is lexically scoped using blocks.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup></p>
<h3><span class="mw-headline" id="Java">Java</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=19" title="Edit section: Java">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h3><span class="mw-headline" id="JavaScript">JavaScript</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=20" title="Edit section: JavaScript">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>JavaScript has simple <i><a href="http://en.wikipedia.org/wiki/Scoping_rules" title="Scoping rules" class="mw-redirect">scoping rules</a></i>,<sup id="cite_ref-6" class="reference"><a href="#cite_note-6"><span>[</span>6<span>]</span></a></sup> but variable initialization and name resolution rules can cause problems, and the widespread use of closures for callbacks means the lexical environment of a function when defined (which is used for name resolution) can be very different from the lexical environment when it is called (which is irrelevant for name resolution). JavaScript objects have name resolution for properties, but this is a separate topic.</p>
<p>JavaScript has lexical scoping<sup id="cite_ref-7" class="reference"><a href="#cite_note-7"><span>[</span>7<span>]</span></a></sup> nested at the function level, with the global scope being the outermost scope. This scoping is used for both variables and for functions (meaning function declarations, as opposed to variables of function type).<sup id="cite_ref-8" class="reference"><a href="#cite_note-8"><span>[</span>8<span>]</span></a></sup> Block scoping is supported with the <code>let</code> and <code>const</code> keywords in Mozilla since JavaScript 1.7,<sup id="cite_ref-9" class="reference"><a href="#cite_note-9"><span>[</span>9<span>]</span></a></sup> and As of 2013<sup class="plainlinks noprint asof-tag update" style="display:none;"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit">[update]</a></sup>, is proposed in drafts of <a href="http://en.wikipedia.org/wiki/ECMAScript" title="ECMAScript">ECMAScript</a> 6, but is not currently part of the standard. Block scoping can be produced by wrapping the entire block in a function and then executing it; this is known as the <a href="http://en.wikipedia.org/wiki/Immediately-invoked_function_expression" title="Immediately-invoked function expression">immediately-invoked function expression</a> (IIFE) pattern.</p>
<p>While JavaScript scoping is simple – lexical, function-level – the associated initialization and name resolution rules are a cause of confusion. Firstly, assignment to a name not in scope defaults to creating a new global variable, not a local one. Secondly, to create a new local variable one must use the <code>var</code> keyword; the variable is then created at the top of the function, with value <code>undefined</code> and the variable is assigned its value when the assignment expression is reached:</p>
<dl>
<dd>A variable with an <i>Initialiser</i> is assigned the value of its <i>AssignmentExpression</i> when the <i>VariableStatement</i> is executed, not when the variable is created.</dd>
</dl>
<p><sup id="cite_ref-10" class="reference"><a href="#cite_note-10"><span>[</span>10<span>]</span></a></sup> This is known as <i><a href="http://en.wikipedia.org/wiki/Variable_hoisting" title="Variable hoisting" class="mw-redirect">variable hoisting</a></i><sup id="cite_ref-11" class="reference"><a href="#cite_note-11"><span>[</span>11<span>]</span></a></sup> – the declaration, but not the initialization, is hoisted to the top of the function. Thirdly, accessing variables before initialization yields <code>undefined</code>, rather than a syntax error. Fourthly, for function declarations, the declaration and the initialization are both hoisted to the top of the function, unlike for variable initialization. For example, the following code produces a dialog with output <samp>undefined</samp>, as the local variable declaration is hoisted, shadowing the global variable, but the initialization is not, so the variable is undefined when used:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="javascript source-javascript">
<pre class="de1">
a <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
<span class="kw1">function</span> f<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    alert<span class="br0">(</span>a<span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">var</span> a <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0">;</span>
<span class="br0">}</span>
f<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Further, as functions are first-class objects in JavaScript and are frequently assigned as callbacks or returned from functions, when a function is executed, the name resolution depends on where it was originally defined (the lexical environment of the definition), not the lexical environment or execution environment where it is called. The nested scopes of a particular function (from most global to most local) in JavaScript, particularly of a closure, used as a callback, are sometimes referred to as the <b>scope chain</b>, by analogy with the prototype chain of an object.</p>
<p><a href="http://en.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)" class="mw-redirect">Closures</a> can be produced in JavaScript by using nested functions, as functions are first-class objects.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12"><span>[</span>12<span>]</span></a></sup> Returning a nested function from an enclosing function includes the local variables of the enclosing function as the (non-local) lexical environment of the returned function, yielding a closure. For example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="javascript source-javascript">
<pre class="de1">
<span class="kw1">function</span> newCounter<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="co1">// return a counter that is incremented on call (starting at 0)</span>
    <span class="co1">// and which returns its new value</span>
    <span class="kw1">var</span> a <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    <span class="kw1">var</span> b <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span> a<span class="sy0">++;</span> <span class="kw1">return</span> a<span class="sy0">;</span> <span class="br0">}</span><span class="sy0">;</span>
    <span class="kw1">return</span> b<span class="sy0">;</span>
<span class="br0">}</span>
 
c <span class="sy0">=</span> newCounter<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
alert<span class="br0">(</span>c<span class="br0">(</span><span class="br0">)</span> <span class="sy0">+</span> <span class="st0">' '</span> <span class="sy0">+</span> c<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// outputs "1 2"</span>
</pre></div>
</div>
<p>Closures are frequently used in JavaScript, due to being used for callbacks. Indeed, any hooking of a function in the local environment as a callback or returning it from a function creates a closure if there are any unbound variables in the function body (with the environment of the closure based on the nested scopes of the current lexical environment, or "scope chain"); this may be accidental. When creating a callback based on parameters, the parameters must be stored in a closure, otherwise it will accidentally create a closure that refers to the variables in the enclosing environment, which may change.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13"><span>[</span>13<span>]</span></a></sup></p>
<p>Name resolution of properties of JavaScript objects is based on inheritance in the prototype tree – a path to the root in the tree is called a <i>prototype chain</i> – and is separate from name resolution of variables and functions.</p>
<h3><span class="mw-headline" id="Lisp">Lisp</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=21" title="Edit section: Lisp">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="Lisp_(programming_language).html" title="Lisp (programming language)">Lisp</a> dialects have various rules for scoping. The original Lisp used dynamic scoping; it was <a href="http://en.wikipedia.org/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a> that introduced static (lexical) scoping to the Lisp family. <a href="http://en.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> adopted lexical scoping from Scheme, as did <a href="http://en.wikipedia.org/wiki/Clojure" title="Clojure">Clojure</a>, but some other Lisps including <a href="http://en.wikipedia.org/wiki/Emacs_Lisp" title="Emacs Lisp">Emacs Lisp</a> still use dynamic scoping.</p>
<h3><span class="mw-headline" id="Pascal">Pascal</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=22" title="Edit section: Pascal">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h3><span class="mw-headline" id="Python">Python</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=23" title="Edit section: Python">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>For variables, Python has function scope, module scope, and global scope. Names enter scope at the start of a context (function, module, or globally), and exit scope when a non-nested function is called or the context ends. If a name is used prior to variable initialization, this raises a syntax error. If a variable is simply accessed (not assigned to) in a context, name resolution follows the LEGB rule (Local, Enclosing, Global, Built-in). However, if a variable is assigned to, it defaults to creating a local variable, which is in scope for the entire context. Both these rules can be overridden with a <code>global</code> or <code>nonlocal</code> (in Python 3) declaration prior to use, which allows accessing global variables even if there is an intervening nonlocal variable, and assigning to global or nonlocal variables.</p>
<p>As a simple example, a function resolves a variable to the global scope:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
<span class="kw1">def</span> f<span class="br0">(</span><span class="br0">)</span>:
    <span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
 
x <span class="sy0">=</span> <span class="st0">'global'</span>
f<span class="br0">(</span><span class="br0">)</span>
</pre></div>
</div>
<p>Note that <var>x</var> is initialized before <code>f</code> is called, so no syntax error is raised, even though it is declared after <code>f</code> is declared. Lexically this is a <a href="http://en.wikipedia.org/wiki/Forward_reference" title="Forward reference" class="mw-redirect">forward reference</a>, which is allowed in Python.</p>
<p>Here assignment creates a new local variable, which does not change the value of the global variable:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
<span class="kw1">def</span> f<span class="br0">(</span><span class="br0">)</span>:
    x <span class="sy0">=</span> <span class="st0">'f'</span>
    <span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
 
x <span class="sy0">=</span> <span class="st0">'global'</span>
<span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
f<span class="br0">(</span><span class="br0">)</span>
<span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
</pre></div>
</div>
<p>Assignment to a variable within a function causes it to be declared local to the function (hence the local variable is in scope for the entire function), and thus using it prior to this assignment raises a syntax error. This differs from C, where the local variable is only in scope from its declaration, not for the entire function. This code raises a syntax error:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
<span class="kw1">def</span> f<span class="br0">(</span><span class="br0">)</span>:
    <span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
    x <span class="sy0">=</span> <span class="st0">'f'</span>
 
x <span class="sy0">=</span> <span class="st0">'global'</span>
f<span class="br0">(</span><span class="br0">)</span>
</pre></div>
</div>
<p>The default name resolution rules can be overridden with the <code>global</code> or <code>nonlocal</code> (in Python 3) keywords. In the below code, the <code>global x</code> declaration in <code>g</code> means that <var>x</var> resolves to the global variable. It thus can be accessed (as it has already been initialized), and assignment assigns to the global variable, rather than declaring a new local variable. Note that no <code>global</code> declaration is needed in <code>f</code> – since it does not assign to the variable, it defaults to resolving to the global variable.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
<span class="kw1">def</span> f<span class="br0">(</span><span class="br0">)</span>:
    <span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
 
<span class="kw1">def</span> g<span class="br0">(</span><span class="br0">)</span>:
    <span class="kw1">global</span> x
    <span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
    x <span class="sy0">=</span> <span class="st0">'g'</span>
 
x <span class="sy0">=</span> <span class="st0">'global'</span>
f<span class="br0">(</span><span class="br0">)</span>
g<span class="br0">(</span><span class="br0">)</span>
f<span class="br0">(</span><span class="br0">)</span>
</pre></div>
</div>
<p><code>global</code> can also be used for nested functions. In addition to allowing assignment to a global variable, as in an unnested function, this can also be used to access the global variable in the presence of a nonlocal variable:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
x <span class="sy0">=</span> <span class="st0">'global'</span>
<span class="kw1">def</span> f<span class="br0">(</span><span class="br0">)</span>:
    <span class="kw1">def</span> g<span class="br0">(</span><span class="br0">)</span>:
        <span class="kw1">global</span> x
        <span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
    x <span class="sy0">=</span> <span class="st0">'f'</span>
    g<span class="br0">(</span><span class="br0">)</span>
 
f<span class="br0">(</span><span class="br0">)</span>
</pre></div>
</div>
<p>For nested functions, there is also the <code>nonlocal</code> declaration, for assigning to a nonlocal variable, similar to using <code>global</code> in an unnested function:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="python source-python">
<pre class="de1">
<span class="kw1">def</span> f<span class="br0">(</span><span class="br0">)</span>:
    <span class="kw1">def</span> g<span class="br0">(</span><span class="br0">)</span>:
        <span class="kw1">nonlocal</span> x
        x <span class="sy0">=</span> <span class="st0">'g'</span>
    x <span class="sy0">=</span> <span class="st0">'f'</span>
    g<span class="br0">(</span><span class="br0">)</span>
    <span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
 
x <span class="sy0">=</span> <span class="st0">'global'</span>
f<span class="br0">(</span><span class="br0">)</span>
<span class="kw1">print</span><span class="br0">(</span>x<span class="br0">)</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="R">R</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=24" title="Edit section: R">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>R is a lexically scoped language. The scoping environments may be accessed using a variety of features (such as parent.frame()) which can simulate the experience of dynamic scoping should the programmer desire.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=25" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Closure_(computer_science)" title="Closure (computer science)" class="mw-redirect">Closure (computer science)</a></li>
<li><a href="http://en.wikipedia.org/wiki/Global_variable" title="Global variable">Global variable</a></li>
<li><a href="http://en.wikipedia.org/wiki/Local_variable" title="Local variable">Local variable</a></li>
<li><a href="http://en.wikipedia.org/wiki/Let_expression" title="Let expression">Let expression</a></li>
<li><a href="http://en.wikipedia.org/wiki/Non-local_variable" title="Non-local variable">Non-local variable</a></li>
<li><a href="http://en.wikipedia.org/wiki/Name_binding" title="Name binding">Name binding</a></li>
<li><a href="http://en.wikipedia.org/wiki/Name_resolution" title="Name resolution">Name resolution</a></li>
<li><a href="Variable_(programming).html#Scope_and_extent" title="Variable (programming)" class="mw-redirect">Variables (scope and extent)</a></li>
<li><a href="http://en.wikipedia.org/wiki/Information_hiding" title="Information hiding">Information hiding</a></li>
<li><a href="http://en.wikipedia.org/wiki/Immediately-invoked_function_expression" title="Immediately-invoked function expression">Immediately-invoked function expressions</a> in Javascript</li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=26" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks ambox ambox-content ambox-Refimprove" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article <b>needs additional citations for <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit">improve this article</a> by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and removed.</span> <small><i>(December 2008)</i></small></span></td>
</tr>
</table>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation journal">Backus, J. W.; Wegstein, J. H.; Van Wijngaarden, A.; Woodger, M.; Bauer, F. L.; Green, J.; Katz, C.; McCarthy, J.; Perlis, A. J.; Rutishauser, H.; Samelson, K.; Vauquois, B. (1960). "Report on the algorithmic language ALGOL 60". <i>Communications of the ACM</i> <b>3</b> (5): 299. <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F367236.367262">10.1145/367236.367262</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AScope+%28computer+science%29&amp;rft.atitle=Report+on+the+algorithmic+language+ALGOL+60&amp;rft.au=Backus%2C+J.+W.&amp;rft.au=Bauer%2C+F.+L.&amp;rft.aufirst=J.+W.&amp;rft.au=Green%2C+J.&amp;rft.au=Katz%2C+C.&amp;rft.aulast=Backus&amp;rft.au=McCarthy%2C+J.&amp;rft.au=Perlis%2C+A.+J.&amp;rft.au=Rutishauser%2C+H.&amp;rft.au=Samelson%2C+K.&amp;rft.au=Van+Wijngaarden%2C+A.&amp;rft.au=Vauquois%2C+B.&amp;rft.au=Wegstein%2C+J.+H.&amp;rft.au=Woodger%2C+M.&amp;rft.date=1960&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1145%2F367236.367262&amp;rft.issue=5&amp;rft.jtitle=Communications+of+the+ACM&amp;rft.pages=299&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=3" class="Z3988"><span style="display:none;">&#160;</span></span> <span class="plainlinks noprint" style="font-size:smaller"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Cite_doi/10.1145.2F367236.367262&amp;action=edit&amp;editintro=Template:Cite_doi/editintro2">edit</a></span></span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text">Scott 2006, p. 135</span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text">Scott 2006, p. 135</span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text">"<a rel="nofollow" class="external text" href="http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Fzexscope_c.htm">Scope</a>", <i>XL C/C++ V8.0 for Linux,</i> IBM</span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://golang.org/ref/spec#Declarations_and_scope">The Go Programming Language Specification: Declarations and scope</a></span></li>
<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text">"<a rel="nofollow" class="external text" href="http://www.coolcoder.in/2014/03/everything-you-need-to-know-about.html">Everything you need to know about Javascript variable scope</a>", <a rel="nofollow" class="external text" href="http://www.coolcoder.in/p/about-us.html">Saurab Parakh</a>, <i><a rel="nofollow" class="external text" href="http://www.coolcoder.in/">Coding is Cool</a>,</i> 2010-02-08</span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://es5.github.io/#x10.2">10.2 Lexical Environments</a></span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope">Functions and function scope</a></span></li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text">"<a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/let">let</a>", JavaScript Reference</span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text">"<a rel="nofollow" class="external text" href="http://es5.github.io/#x12.2">12.2 Variable Statement</a>", Annotated ECMAScript 5.1, Last updated: 2012-05-28</span></li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text">"<a rel="nofollow" class="external text" href="http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html">JavaScript Scoping and Hoisting</a>", <a rel="nofollow" class="external text" href="http://www.adequatelygood.com/about.html">Ben Cherry</a>, <i><a rel="nofollow" class="external text" href="http://www.adequatelygood.com/">Adequately Good</a>,</i> 2010-02-08</span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://jibbering.com/faq/notes/closures/">Javascript Closures</a>, Richard Cornford. March 2004</span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text">"<a rel="nofollow" class="external text" href="http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/">Explaining JavaScript Scope And Closures</a>", Robert Nyman, October 9, 2008</span></li>
</ol>
</div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=27" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Harold_Abelson" title="Harold Abelson" class="mw-redirect">Harold Abelson</a> and <a href="http://en.wikipedia.org/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Gerald Jay Sussman</a>. <a rel="nofollow" class="external text" href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-35.html#%_sec_5.5.6">"Lexical addressing"</a>. <i><a href="http://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs" title="Structure and Interpretation of Computer Programs">Structure and Interpretation of Computer Programs</a></i>.</li>
<li>Scott, M. (2006). <i>Programming Language Pragmatics</i>, 2nd edition. Morgan Kauffman Publishers, San Francisco, CA.</li>
</ul>


<!-- 
NewPP limit report
Parsed by mw1213
CPU time usage: 1.204 seconds
Real time usage: 1.261 seconds
Preprocessor visited node count: 1462/1000000
Preprocessor generated node count: 7329/1500000
Post‐expand include size: 21271/2048000 bytes
Template argument size: 1980/2048000 bytes
Highest expansion depth: 13/40
Expensive parser function count: 4/500
Lua time usage: 0.058/10.000 seconds
Lua memory usage: 1.56 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:62068-0!*!0!!en!4!* and timestamp 20140328103256
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;oldid=601635455">http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;oldid=601635455</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Programming_language_concepts" title="Category:Programming language concepts">Programming language concepts</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_June_2012" title="Category:Articles with unsourced statements from June 2012">Articles with unsourced statements from June 2012</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_August_2012" title="Category:Articles with unsourced statements from August 2012">Articles with unsourced statements from August 2012</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_to_be_expanded_from_April_2013" title="Category:Articles to be expanded from April 2013">Articles to be expanded from April 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_to_be_expanded" title="Category:All articles to be expanded">All articles to be expanded</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_containing_potentially_dated_statements_from_2013" title="Category:Articles containing potentially dated statements from 2013">Articles containing potentially dated statements from 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_containing_potentially_dated_statements" title="Category:All articles containing potentially dated statements">All articles containing potentially dated statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_needing_additional_references_from_December_2008" title="Category:Articles needing additional references from December 2008">Articles needing additional references from December 2008</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Scope+%28computer+science%29&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Scope+%28computer+science%29" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="http://en.wikipedia.org/wiki/Scope_(computer_science)"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Scope_(computer_science)"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://en.wikipedia.org/wiki/Scope_(computer_science)" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Scope_(computer_science)" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Scope_(computer_science)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;oldid=601635455" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q2137596" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Scope_%28computer_science%29&amp;id=601635455" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Scope+%28computer+science%29">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Scope+%28computer+science%29&amp;oldid=601635455&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-ar"><a href="http://ar.wikipedia.org/wiki/مجال_(علم_الحاسوب)" title="مجال (علم الحاسوب) – Arabic" lang="ar" hreflang="ar">العربية</a></li>
			<li class="interlanguage-link interwiki-de"><a href="http://de.wikipedia.org/wiki/Variable_(Programmierung)#G.C3.BCltigkeitsbereich_von_Variablen_.28Scope.29" title="Variable (Programmierung) – German" lang="de" hreflang="de">Deutsch</a></li>
			<li class="interlanguage-link interwiki-es"><a href="http://es.wikipedia.org/wiki/Ámbito_(programación)" title="Ámbito (programación) – Spanish" lang="es" hreflang="es">Español</a></li>
			<li class="interlanguage-link interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Portée_(informatique)" title="Portée (informatique) – French" lang="fr" hreflang="fr">Français</a></li>
			<li class="interlanguage-link interwiki-ko"><a href="http://ko.wikipedia.org/wiki/변수_영역" title="변수 영역 – Korean" lang="ko" hreflang="ko">한국어</a></li>
			<li class="interlanguage-link interwiki-is"><a href="http://is.wikipedia.org/wiki/Gildissvið" title="Gildissvið – Icelandic" lang="is" hreflang="is">Íslenska</a></li>
			<li class="interlanguage-link interwiki-it"><a href="http://it.wikipedia.org/wiki/Visibilità_(programmazione)" title="Visibilità (programmazione) – Italian" lang="it" hreflang="it">Italiano</a></li>
			<li class="interlanguage-link interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Variabelenbereik" title="Variabelenbereik – Dutch" lang="nl" hreflang="nl">Nederlands</a></li>
			<li class="interlanguage-link interwiki-ja"><a href="http://ja.wikipedia.org/wiki/スコープ" title="スコープ – Japanese" lang="ja" hreflang="ja">日本語</a></li>
			<li class="interlanguage-link interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Zasięg_(programowanie)" title="Zasięg (programowanie) – Polish" lang="pl" hreflang="pl">Polski</a></li>
			<li class="interlanguage-link interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Escopo_(computação)" title="Escopo (computação) – Portuguese" lang="pt" hreflang="pt">Português</a></li>
			<li class="interlanguage-link interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Область_видимости" title="Область видимости – Russian" lang="ru" hreflang="ru">Русский</a></li>
			<li class="interlanguage-link interwiki-zh"><a href="http://zh.wikipedia.org/wiki/作用域" title="作用域 – Chinese" lang="zh" hreflang="zh">中文</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q2137596#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 28 March 2014 at 10:32.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Scope_(computer_science)" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf19/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["ext.cite","mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1039 in 0.407 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Scope_(programming) by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:57:03 GMT -->
</html>
