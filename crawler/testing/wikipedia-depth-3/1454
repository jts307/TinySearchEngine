http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Non-blocking_I/O.html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Non-blocking_I/O by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:58:41 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Asynchronous I/O - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf19" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/Non-blocking_I/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Asynchronous_I/O" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="http://en.wikipedia.org/wiki/Asynchronous_I/O" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cext.wikihiero%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Asynchronous_I/O","wgTitle":"Asynchronous I/O","wgCurRevisionId":594416741,"wgRevisionId":594416741,"wgArticleId":1880953,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles lacking sources from December 2011","All articles lacking sources","All articles with unsourced statements","Articles with unsourced statements from November 2013","Articles using fixed number of columns in reflist","Concurrency control","Events (computing)","Input/output"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Asynchronous_I/O","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Non-blocking_I/O","wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf19/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["en-us"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q4812198"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":false,
"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:868e43d07ede2616d2d1dc3507cd8145 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","skins.vector.compactPersonalBar.defaultTracking","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf19/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Asynchronous_I_O skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Asynchronous I/O</span></h1>
						<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub">  (Redirected from <a href="http://en.wikipedia.org/w/index.php?title=Non-blocking_I/O&amp;redirect=no" title="Non-blocking I/O">Non-blocking I/O</a>)</div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><table class="metadata plainlinks ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This article <b>does not <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit">improve this article</a> by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(December 2011)</i></small></span></td>
</tr>
</table>
<p>In computer science, <b>asynchronous I/O</b>, or <b>non-blocking I/O</b> is a form of <a href="../Input/output.html" title="Input/output">input/output</a> processing that permits other <a href="../Process_(computing).html" title="Process (computing)">processing</a> to continue before the <a href="../Data_transmission.html" title="Data transmission">transmission</a> has finished.</p>
<p>Input and output (I/O) operations on a computer can be extremely slow compared to the processing of data. An I/O device can incorporate mechanical devices that must physically move, such as a hard drive seeking a track to read or write; this is often <a href="http://en.wikipedia.org/wiki/Orders_of_magnitude" title="Orders of magnitude" class="mw-redirect">orders of magnitude</a> slower than the switching of electric current. For example, during a disk operation that takes ten milliseconds to perform, a processor that is clocked at one <a href="http://en.wikipedia.org/wiki/Gigahertz" title="Gigahertz" class="mw-redirect">gigahertz</a> could have performed ten million instruction-processing cycles.</p>
<p>A simple approach to I/O would be to start the access and then wait for it to complete. But such an approach (called <b>synchronous I/O</b> or <b>blocking I/O</b>) would block the progress of a program while the communication is in progress, leaving <a href="http://en.wikipedia.org/wiki/System_resources" title="System resources" class="mw-redirect">system resources</a> idle. When a program makes many I/O operations, this means that the processor can spend almost all of its time idle waiting for I/O operations to complete.</p>
<p>Alternatively, it is possible to start the communication and then perform processing that does not require that the I/O has completed. This approach is called <a href="http://en.wikipedia.org/wiki/Asynchronous" title="Asynchronous" class="mw-redirect">asynchronous</a> input/output. Any task that actually depends on the I/O having completed (this includes both using the input values and critical operations that claim to assure that a write operation has been completed) still needs to wait for the I/O operation to complete, and thus is still blocked, but other processing that does not have a dependency on the I/O operation can continue.</p>
<p>Many operating system functions exist to implement asynchronous I/O at many levels. In fact, one of the main functions of all but the most rudimentary of <a href="../Operating_systems.html" title="Operating systems" class="mw-redirect">operating systems</a> is to perform at least some form of basic asynchronous I/O, though this may not be particularly apparent to the operator or programmer. In the simplest software solution, the hardware device status is <a href="http://en.wikipedia.org/wiki/Polling_(computer_science)" title="Polling (computer science)">polled</a> at intervals to detect whether the device is ready for its next operation. (For example the <a href="../CP/M.html" title="CP/M">CP/M</a> operating system was built this way. Its <a href="../System_call.html" title="System call">system call</a> semantics did not require any more elaborate I/O structure than this, though most implementations were more complex, and thereby more efficient.) <a href="http://en.wikipedia.org/wiki/Direct_memory_access" title="Direct memory access">Direct memory access (DMA)</a> can greatly increase the efficiency of a polling-based system, and <a href="http://en.wikipedia.org/wiki/Hardware_interrupt" title="Hardware interrupt" class="mw-redirect">hardware interrupts</a> can eliminate the need for polling entirely. <a href="../Computer_multitasking.html" title="Computer multitasking">Multitasking</a> operating systems can exploit the functionality provided by hardware interrupts, whilst hiding the complexity of interrupt handling from the user. <a href="http://en.wikipedia.org/wiki/Spooling" title="Spooling">Spooling</a> was one of the first forms of multitasking designed to exploit asynchronous I/O. Finally, <a href="http://en.wikipedia.org/wiki/Thread_(computer_science)" title="Thread (computer science)" class="mw-redirect">multithreading</a> and explicit asynchronous I/O <a href="../API.html" title="API" class="mw-redirect">APIs</a> within user processes can exploit asynchronous I/O further, at the cost of extra software complexity.</p>
<p>Asynchronous I/O is used to improve throughput, latency, and/or responsiveness.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Forms"><span class="tocnumber">1</span> <span class="toctext">Forms</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Process"><span class="tocnumber">1.1</span> <span class="toctext">Process</span></a></li>
<li class="toclevel-2 tocsection-3"><a href="#Polling"><span class="tocnumber">1.2</span> <span class="toctext">Polling</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="#Select.28.2Fpoll.29_loops"><span class="tocnumber">1.3</span> <span class="toctext">Select(/poll) loops</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Signals_.28interrupts.29"><span class="tocnumber">1.4</span> <span class="toctext">Signals (interrupts)</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Callback_functions"><span class="tocnumber">1.5</span> <span class="toctext">Callback functions</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="#Light-weight_processes_or_threads"><span class="tocnumber">1.6</span> <span class="toctext">Light-weight processes or threads</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="#Completion_queues.2Fports"><span class="tocnumber">1.7</span> <span class="toctext">Completion queues/ports</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Event_flags"><span class="tocnumber">1.8</span> <span class="toctext">Event flags</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-10"><a href="#Implementation"><span class="tocnumber">2</span> <span class="toctext">Implementation</span></a>
<ul>
<li class="toclevel-2 tocsection-11"><a href="#Synthesis"><span class="tocnumber">2.1</span> <span class="toctext">Synthesis</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-12"><a href="#See_also"><span class="tocnumber">3</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#References"><span class="tocnumber">4</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#External_links"><span class="tocnumber">5</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Forms">Forms</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=1" title="Edit section: Forms">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>All forms of asynchronous I/O open applications up to potential resource conflicts and associated failure. Careful programming (often using <a href="http://en.wikipedia.org/wiki/Mutual_exclusion" title="Mutual exclusion">mutual exclusion</a>, <a href="http://en.wikipedia.org/wiki/Semaphores" title="Semaphores" class="mw-redirect">semaphores</a>, etc.) is required to prevent this.</p>
<p>When exposing asynchronous I/O to applications there are a few broad classes of implementation. The form of the <a href="../API.html" title="API" class="mw-redirect">API</a> provided to the application does not necessarily correspond with the mechanism actually provided by the operating system; emulations are possible. Furthermore, more than one method may be used by a single application, depending on its needs and the desires of its programmer(s). Many operating systems provide more than one of these mechanisms, it is possible that some may provide all of them.</p>
<h3><span class="mw-headline" id="Process">Process</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=2" title="Edit section: Process">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Available in early Unix. In a <a href="../Computer_multitasking.html" title="Computer multitasking">multitasking</a> operating system, processing can be distributed across different processes, which run independently, have their own memory, and process their own I/O flows; these flows are typically connected in <a href="http://en.wikipedia.org/wiki/Pipe_(Unix)" title="Pipe (Unix)" class="mw-redirect">pipelines</a>. Processes are fairly expensive to create and maintain,<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2013)">citation needed</span></a></i>]</sup> so this solution only works well if the set of processes is small and relatively stable. It also assumes that the individual processes can operate independently, apart from processing each other's I/O; if they need to communicate in other ways, coordinating them can become difficult.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2013)">citation needed</span></a></i>]</sup></p>
<p>An extension of this approach is <a href="http://en.wikipedia.org/wiki/Dataflow_programming" title="Dataflow programming">dataflow programming</a>, which allows more complicated networks than just the chains that pipes support.</p>
<h3><span class="mw-headline" id="Polling">Polling</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=3" title="Edit section: Polling">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Variations:</p>
<ul>
<li>Error if it cannot be done yet (reissue later)</li>
<li>Report when it can be done without blocking (then issue it)</li>
</ul>
<p>Available in traditional Unix and <a href="http://en.wikipedia.org/wiki/Windows" title="Windows" class="mw-redirect">Windows</a>. Its major problem is that it can waste CPU time polling repeatedly when there is nothing else for the issuing process to do, reducing the time available for other processes. Also, because a polling application is essentially single-threaded it may be unable to fully exploit I/O parallelism that the hardware is capable of.</p>
<h3><span class="mw-headline" id="Select.28.2Fpoll.29_loops">Select(/poll) loops</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=4" title="Edit section: Select(/poll) loops">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Available in <a href="../BSD.html" title="BSD" class="mw-redirect">BSD</a> <a href="../Unix.html" title="Unix">Unix</a>, and almost anything else with a <a href="../TCP/IP.html" title="TCP/IP" class="mw-redirect">TCP/IP</a> protocol stack that either utilizes or is modeled after the BSD implementation. A variation on the theme of polling, a select loop uses the <code><a href="http://en.wikipedia.org/wiki/Select_(Unix)" title="Select (Unix)">select</a></code> system call to <a href="http://en.wikipedia.org/wiki/Sleep_(operating_system)" title="Sleep (operating system)" class="mw-redirect">sleep</a> until a condition occurs on a <a href="http://en.wikipedia.org/wiki/File_descriptor" title="File descriptor">file descriptor</a> (e.g., when data is available for reading), a <a href="http://en.wikipedia.org/wiki/Timeout_(computing)" title="Timeout (computing)">timeout</a> occurs, or a <a href="http://en.wikipedia.org/wiki/Signal_(computing)" title="Signal (computing)" class="mw-redirect">signal</a> is received (e.g., when a child process dies). By examining the return parameters of the <code>select</code> call, the loop finds out which file descriptor has changed and executes the appropriate code. Often, for ease of use, the select loop is implemented as an <a href="http://en.wikipedia.org/wiki/Event_loop" title="Event loop">event loop</a>, perhaps using <a href="http://en.wikipedia.org/wiki/Callback_(computer_science)" title="Callback (computer science)" class="mw-redirect">callback functions</a>; the situation lends itself particularly well to <a href="http://en.wikipedia.org/wiki/Event-driven_programming" title="Event-driven programming">event-driven programming</a>.</p>
<p>While this method is reliable and relatively efficient, it depends heavily on the <a href="../Unix.html" title="Unix">Unix</a> paradigm that "<a href="http://en.wikipedia.org/wiki/Everything_is_a_file" title="Everything is a file">everything is a file</a>"; any blocking I/O that does not involve a file descriptor will block the process. The select loop also relies on being able to involve all I/O in the central <code>select</code> call; libraries that conduct their own I/O are particularly problematic in this respect. An additional potential problem is that the select and the I/O operations are still sufficiently decoupled that select's result may effectively be a lie: if two processes are reading from a single file descriptor (arguably bad design) the select may indicate the availability of read data that has disappeared by the time that the read is issued, thus resulting in blocking; if two processes are writing to a single file descriptor (not that uncommon) the select may indicate immediate writability yet the write may still block, because a buffer has been filled by the other process in the interim, or due to the write being too large for the available buffer or in other ways unsuitable to the recipient.</p>
<p>The select loop doesn't reach the ultimate system efficiencies possible with, say, the <i>completion queues</i> method, because the semantics of the <code>select</code> call, allowing as it does for per-call tuning of the acceptable event set, consumes some amount of time per invocation traversing the selection array. This creates little overhead for user applications that might have open one file descriptor for the windowing system and a few for open files, but becomes more of a problem as the number of potential event sources grows, and can hinder development of many-client server applications; other asynchronous methods may be noticeably more efficient in such cases. Some Unixes provide system-specific calls with better scaling; for example, <code><a href="http://en.wikipedia.org/wiki/Epoll" title="Epoll">epoll</a></code> in <a href="../Linux.html" title="Linux">Linux</a> (that fills the return selection array with only those event sources on which an event has occurred), <code><a href="http://en.wikipedia.org/wiki/Kqueue" title="Kqueue">kqueue</a></code> in <a href="../FreeBSD.html" title="FreeBSD">FreeBSD</a>, and <code>/dev/poll</code> in <a href="http://en.wikipedia.org/wiki/Solaris_Operating_System" title="Solaris Operating System" class="mw-redirect">Solaris</a>.</p>
<p><a href="../UNIX_System_V.html" title="UNIX System V">SVR3</a> <a href="../Unix.html" title="Unix">Unix</a> provided the <code>poll</code> system call. Arguably better-named than <code>select</code>, for the purposes of this discussion it is essentially the same thing. SVR4 Unixes (and thus <a href="../POSIX.html" title="POSIX">POSIX</a>) offer both calls.</p>
<h3><span class="mw-headline" id="Signals_.28interrupts.29">Signals (interrupts)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=5" title="Edit section: Signals (interrupts)">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Available in <a href="../BSD.html" title="BSD" class="mw-redirect">BSD</a> and <a href="../POSIX.html" title="POSIX">POSIX</a> Unix. I/O is issued asynchronously, and when it is complete a <a href="http://en.wikipedia.org/wiki/Signal_(computing)" title="Signal (computing)" class="mw-redirect">signal</a> (<a href="../Interrupt.html" title="Interrupt">interrupt</a>) is generated. As in low-level kernel programming, the facilities available for safe use within the signal handler are limited, and the main flow of the process could have been interrupted at nearly any point, resulting in inconsistent data structures as seen by the signal handler. The signal handler is usually not able to issue further asynchronous I/O by itself.</p>
<p>The <i>signal</i> approach, though relatively simple to implement within the OS, brings to the application program the unwelcome baggage associated with writing an operating system's kernel interrupt system. Its worst characteristic is that <i>every</i> blocking (synchronous) system call is potentially interruptible; the programmer must usually incorporate retry code at each call .<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2013)">citation needed</span></a></i>]</sup></p>
<h3><span class="mw-headline" id="Callback_functions">Callback functions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=6" title="Edit section: Callback functions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Available in <a href="../Mac_OS.html" title="Mac OS">Mac OS</a> (pre-<a href="http://en.wikipedia.org/wiki/Mac_OS_X" title="Mac OS X" class="mw-redirect">Mac OS X</a>), <a href="../OpenVMS.html" title="OpenVMS">VMS</a> and <a href="../Microsoft_Windows.html" title="Microsoft Windows">Windows</a>. Bears many of the characteristics of the <i>signal</i> method as it is fundamentally the same thing, though rarely recognized as such. The difference is that each I/O request usually can have its own completion function, whereas the <i>signal</i> system has a single callback.</p>
<p>A potential problem is that stack depth can grow unmanageably, as an extremely common thing to do when one I/O is finished is to schedule another. If this should be satisfied immediately, the first <a href="http://en.wikipedia.org/wiki/Callback_(computer_science)" title="Callback (computer science)" class="mw-redirect">callback</a> is not 'unwound' off the stack before the next one is invoked. Systems to prevent this (like 'mid-ground' scheduling of new work) add complexity and reduce performance. In practice, however, this is generally not a problem because the new I/O will itself usually return as soon as the new I/O is started allowing the stack to be 'unwound'. The problem can also be prevented by avoiding any further callbacks, by means of a queue, until the first callback returns.</p>
<h3><span class="mw-headline" id="Light-weight_processes_or_threads">Light-weight processes or threads</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=7" title="Edit section: Light-weight processes or threads">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p><a href="http://en.wikipedia.org/wiki/Light-weight_process" title="Light-weight process">Light-weight processes</a> (LWPs) or <a href="http://en.wikipedia.org/wiki/Thread_(computer_science)" title="Thread (computer science)" class="mw-redirect">threads</a> are available in more modern Unixes, originating in <a href="../Plan_9_from_Bell_Labs.html" title="Plan 9 from Bell Labs">Plan 9</a> .<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2013)">citation needed</span></a></i>]</sup> Like the <i>process</i> method, but without the data isolation that hampers coordination of the flows. This lack of isolation introduces its own problems, usually requiring kernel-provided synchronization mechanisms and <a href="http://en.wikipedia.org/wiki/Thread-safe" title="Thread-safe" class="mw-redirect">thread-safe</a> libraries. Each LWP or thread itself uses traditional blocking synchronous I/O. The requisite separate per-thread stack may preclude large-scale implementations using very large numbers of threads. The separation of textual (code) and time (event) flows provides fertile ground for errors.</p>
<p>This approach is also used in the <a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)" title="Erlang (programming language)">Erlang</a> programming language runtime system. The Erlang <a href="http://en.wikipedia.org/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> uses asynchronous I/O using a small pool of only a few threads or sometimes just one process, to handle I/O from up to millions of Erlang processes. I/O handling in each process is written mostly using blocking synchronous I/O. This way high performance of asynchronous I/O is merged with simplicity of normal I/O. Many I/O problems in Erlang are mapped to message passing, which can be easily processed using built-in selective receive.</p>
<h3><span class="mw-headline" id="Completion_queues.2Fports">Completion queues/ports</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=8" title="Edit section: Completion queues/ports">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Available in <a href="../Microsoft_Windows.html" title="Microsoft Windows">Microsoft Windows</a>, <a href="http://en.wikipedia.org/wiki/Solaris_Operating_System" title="Solaris Operating System" class="mw-redirect">Solaris</a> and <a href="http://en.wikipedia.org/wiki/DNIX" title="DNIX">DNIX</a>. I/O requests are issued asynchronously, but notifications of completion are provided via a synchronizing queue mechanism in the order they are completed. Usually associated with a <a href="http://en.wikipedia.org/wiki/Finite_state_machine" title="Finite state machine" class="mw-redirect">state-machine</a> structuring of the main process (<a href="http://en.wikipedia.org/wiki/Event-driven_programming" title="Event-driven programming">event-driven programming</a>), which can bear little resemblance to a process that does not use asynchronous I/O or that uses one of the other forms, hampering code reuse. Does not require additional special synchronization mechanisms or <a href="http://en.wikipedia.org/wiki/Thread-safe" title="Thread-safe" class="mw-redirect">thread-safe</a> libraries, nor are the textual (code) and time (event) flows separated.</p>
<h3><span class="mw-headline" id="Event_flags">Event flags</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=9" title="Edit section: Event flags">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Available in <a href="../OpenVMS.html" title="OpenVMS">VMS</a>. Bears many of the characteristics of the <i>completion queue</i> method, as it is essentially a completion queue of depth one. To simulate the effect of queue 'depth', an additional event flag is required for each potential unprocessed (but completed) event, or event information can be lost. Waiting for the next available event in such a clump requires synchronizing mechanisms that may not scale well to larger numbers of potentially parallel events.</p>
<h2><span class="mw-headline" id="Implementation">Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=10" title="Edit section: Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The vast majority of general-purpose computing hardware relies entirely upon two methods of implementing asynchronous I/O: polling and interrupts. Usually both methods are used together, the balance depends heavily upon the design of the hardware and its required performance characteristics. (<a href="http://en.wikipedia.org/wiki/Direct_memory_access" title="Direct memory access">DMA</a> is not itself another independent method, it is merely a means by which more work can be done per poll or interrupt.)</p>
<p>Pure polling systems are entirely possible, small microcontrollers (such as systems using the <a href="http://en.wikipedia.org/wiki/PIC_microcontroller" title="PIC microcontroller">PIC</a>) are often built this way. <a href="../CP/M.html" title="CP/M">CP/M</a> systems could also be built this way (though rarely were), with or without DMA. Also, when the utmost performance is necessary for only a <i>few</i> tasks, at the expense of any other potential tasks, polling may also be appropriate as the overhead of taking interrupts may be unwelcome. (Servicing an interrupt requires time [and space] to save at least part of the processor state, along with the time required to resume the interrupted task.)</p>
<p>Most general-purpose computing systems rely heavily upon interrupts. A pure interrupt system may be possible, though usually some component of polling is also required, as it is very common for multiple potential sources of interrupts to share a common interrupt signal line, in which case polling is used within the <a href="../Device_driver.html" title="Device driver">device driver</a> to resolve the actual source. (This resolution time also contributes to an interrupt system's performance penalty. Over the years a great deal of work has been done to try to minimize the overhead associated with servicing an interrupt. Current interrupt systems are rather <a href="http://en.wiktionary.org/wiki/lackadaisical" class="extiw" title="wiktionary:lackadaisical">lackadaisical</a> when compared to some highly-tuned earlier ones, but the general increase in hardware performance has greatly mitigated this.)</p>
<p>Hybrid approaches are also possible, wherein an interrupt can trigger the beginning of some burst of asynchronous I/O, and polling is used within the burst itself. This technique is common in high-speed device drivers, such as network or disk, where the time lost in returning to the pre-interrupt task is greater than the time until the next required servicing. (Common I/O hardware in use these days relies heavily upon DMA and large data buffers to make up for a relatively poorly-performing interrupt system. These characteristically use polling inside the driver loops, and can exhibit tremendous throughput. Ideally the per-datum polls are always successful, or at most repeated a small number of times.)</p>
<p>At one time this sort of hybrid approach was common in disk and network drivers where there was not DMA or significant buffering available. Because the desired transfer speeds were faster even than could tolerate the minimum four-operation per-datum loop (bit-test, conditional-branch-to-self, fetch, and store), the hardware would often be built with automatic <a href="http://en.wikipedia.org/wiki/Wait_state" title="Wait state">wait state</a> generation on the I/O device, pushing the data ready poll out of software and onto the processor's fetch or store hardware and reducing the programmed loop to two operations. (In effect using the processor itself as a DMA engine.) The <a href="http://en.wikipedia.org/wiki/MOS_Technology_6502" title="MOS Technology 6502">6502</a> processor offered an unusual means to provide a three-element per-datum loop, as it had a hardware pin that, when asserted, would cause the processor's Overflow bit to be set directly. (Obviously one would have to take great care in the hardware design to avoid overriding the Overflow bit outside of the device driver!)</p>
<h3><span class="mw-headline" id="Synthesis">Synthesis</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=11" title="Edit section: Synthesis">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Using only these two tools (polling, and interrupts), all the other forms of asynchronous I/O discussed above may be (and in fact, are) synthesized.</p>
<p>In an environment such as a <a href="http://en.wikipedia.org/wiki/Java_Virtual_Machine" title="Java Virtual Machine" class="mw-redirect">Java Virtual Machine</a> (JVM), asynchronous I/O can be synthesized <i>even though</i> the environment the JVM is running in may not offer it at all. This is due to the interpreted nature of the JVM. The JVM may poll (or take an interrupt) periodically to institute an internal flow of control change, effecting the appearance of multiple simultaneous processes, at least some of which presumably exist in order to perform asynchronous I/O. (Of course, at the microscopic level the parallelism may be rather coarse and exhibit some non-ideal characteristics, but on the surface it will appear to be as desired.)</p>
<p>That, in fact, is the problem with using polling in any form to synthesize a different form of asynchronous I/O. Every CPU cycle that is a poll is wasted, and lost to overhead rather than accomplishing a desired task. Every CPU cycle that is <i>not</i> a poll represents an increase in latency of reaction to pending I/O. Striking an acceptable balance between these two opposing forces is difficult. (This is why hardware interrupt systems were invented in the first place.)</p>
<p>The trick to maximize efficiency is to minimize the amount of work that has to be done upon reception of an interrupt in order to awaken the appropriate application. Secondarily (but perhaps no less important) is the method the application itself uses to determine what it needs to do.</p>
<p>Particularly problematic (for application efficiency) are the exposed polling methods, including the select/poll mechanisms. Though the underlying I/O events they are interested in are in all likelihood interrupt-driven, the interaction <i>to</i> this mechanism is polled and can consume a large amount of time in the poll. This is particularly true of the potentially large-scale polling possible through select (and poll). Interrupts map very well to Signals, Callback functions, Completion Queues, and Event flags, such systems can be very efficient.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=12" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Input/output_completion_port" title="Input/output completion port">Input/output completion port</a> (IOCP)</li>
<li><a href="http://en.wikipedia.org/wiki/Asynchronous_Transfer_Mode" title="Asynchronous Transfer Mode">Asynchronous Transfer Mode</a></li>
<li><a href="http://en.wikipedia.org/wiki/Asynchronous_semaphore" title="Asynchronous semaphore">Asynchronous semaphore</a></li>
<li><a href="http://en.wikipedia.org/wiki/C10k_problem" title="C10k problem">C10k problem</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=13" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist columns references-column-count references-column-count-2" style="-moz-column-count: 2; -webkit-column-count: 2; column-count: 2; list-style-type: decimal;"></div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><span class="citation web"><a rel="nofollow" class="external text" href="http://www.haberdar.org/#tutorials">"Non-blocking communication example using MPI (Message Passing Interface)"</a>. Hakan Haberdar, University of Houston, Texas, USA<span class="reference-accessdate">. Retrieved October 2012</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AAsynchronous+I%2FO&amp;rft.btitle=Non-blocking+communication+example+using+MPI+%28Message+Passing+Interface%29&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.haberdar.org%2F%23tutorials&amp;rft.pub=Hakan+Haberdar%2C+University+of+Houston%2C+Texas%2C+USA&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
<li><a rel="nofollow" class="external text" href="http://www.kegel.com/c10k.html">The C10K Problem</a>; a survey of asynchronous I/O methods with emphasis on scaling – by Dan Kegel</li>
<li>Article "<a rel="nofollow" class="external text" href="http://www-128.ibm.com/developerworks/linux/library/l-async/?ca=dgr-lnxw02aUsingPOISIXAIOAPI">Boost application performance using asynchronous I/O</a>" by <a href="http://en.wikipedia.org/w/index.php?title=M._Tim_Jones&amp;action=edit&amp;redlink=1" class="new" title="M. Tim Jones (page does not exist)">M. Tim Jones</a></li>
<li>Article "<a rel="nofollow" class="external text" href="http://www.usenix.org/event/usenix04/tech/general/full_papers/elmeleegy/elmeleegy_html/html.html">Lazy Asynchronous I/O For Event-Driven Servers</a>" by <a href="http://en.wikipedia.org/w/index.php?title=Willy_Zwaenepoel&amp;action=edit&amp;redlink=1" class="new" title="Willy Zwaenepoel (page does not exist)">Willy Zwaenepoel</a>, <a href="http://en.wikipedia.org/w/index.php?title=Khaled_Elmeleegy&amp;action=edit&amp;redlink=1" class="new" title="Khaled Elmeleegy (page does not exist)">Khaled Elmeleegy</a>, <a href="http://en.wikipedia.org/w/index.php?title=Anupam_Chanda&amp;action=edit&amp;redlink=1" class="new" title="Anupam Chanda (page does not exist)">Anupam Chanda</a> and <a href="http://en.wikipedia.org/w/index.php?title=Alan_L._Cox&amp;action=edit&amp;redlink=1" class="new" title="Alan L. Cox (page does not exist)">Alan L. Cox</a></li>
<li><a rel="nofollow" class="external text" href="http://www.gnu.org/software/libc/manual/html_node/Asynchronous-I_002fO.html">Perform I/O Operations in Parallel</a></li>
<li><a rel="nofollow" class="external text" href="http://opengroup.org/onlinepubs/009695399/basedefs/aio.h.html">Description from POSIX standard</a></li>
<li><a rel="nofollow" class="external text" href="http://doc.sch130.nsc.ru/www.sysinternals.com/ntw2k/info/comport.shtml">Inside I/O Completion Ports</a> by <a href="http://en.wikipedia.org/wiki/Mark_Russinovich" title="Mark Russinovich">Mark Russinovich</a></li>
<li><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-US/library/kztecsys(v=vs.100).aspx">Description from .NET Framework Developer's Guide</a></li>
<li><a rel="nofollow" class="external text" href="http://www.flounder.com/asynchexplorer.htm">Asynchronous I/O and The Asynchronous Disk I/O Explorer</a></li>
<li><a rel="nofollow" class="external text" href="http://software.schmorp.de/pkg/IO-AIO.html">IO::AIO is a Perl module offering an asynchronous interface for most I/O operations</a></li>
<li><a rel="nofollow" class="external text" href="http://www.cs.wustl.edu/~schmidt/PDF/proactor.pdf">ACE Proactor</a></li>
</ul>


<!-- 
NewPP limit report
Parsed by mw1107
CPU time usage: 0.552 seconds
Real time usage: 0.601 seconds
Preprocessor visited node count: 744/1000000
Preprocessor generated node count: 1819/1500000
Post‐expand include size: 13315/2048000 bytes
Template argument size: 2172/2048000 bytes
Highest expansion depth: 11/40
Expensive parser function count: 3/500
Lua time usage: 0.089/10.000 seconds
Lua memory usage: 1.56 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:1880953-0!*!0!!en!4!* and timestamp 20140325041611
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;oldid=594416741">http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;oldid=594416741</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Concurrency_control" title="Category:Concurrency control">Concurrency control</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Events_(computing)" title="Category:Events (computing)">Events (computing)</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Input/output" title="Category:Input/output">Input/output</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Articles_lacking_sources_from_December_2011" title="Category:Articles lacking sources from December 2011">Articles lacking sources from December 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_lacking_sources" title="Category:All articles lacking sources">All articles lacking sources</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_November_2013" title="Category:Articles with unsourced statements from November 2013">Articles with unsourced statements from November 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_using_fixed_number_of_columns_in_reflist" title="Category:Articles using fixed number of columns in reflist">Articles using fixed number of columns in reflist</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Asynchronous+I%2FO&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Asynchronous+I%2FO" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="http://en.wikipedia.org/wiki/Asynchronous_I/O"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Asynchronous_I/O"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="http://en.wikipedia.org/wiki/Asynchronous_I/O" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="../Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="../Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Asynchronous_I/O" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Asynchronous_I/O" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;oldid=594416741" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q4812198" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Asynchronous_I%2FO&amp;id=594416741" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Asynchronous+I%2FO">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Asynchronous+I%2FO&amp;oldid=594416741&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Asynchronous_I/O&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-de"><a href="http://de.wikipedia.org/wiki/Asynchrone_Kommunikation" title="Asynchrone Kommunikation – German" lang="de" hreflang="de">Deutsch</a></li>
			<li class="interlanguage-link interwiki-ja"><a href="http://ja.wikipedia.org/wiki/非同期IO" title="非同期IO – Japanese" lang="ja" hreflang="ja">日本語</a></li>
			<li class="interlanguage-link interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Асинхронний_ввід/вивід" title="Асинхронний ввід/вивід – Ukrainian" lang="uk" hreflang="uk">Українська</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q4812198#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 7 February 2014 at 20:26.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Asynchronous_I/O" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf19/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1164 in 0.317 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Non-blocking_I/O by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:58:41 GMT -->
</html>
