http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Objective-C.html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Objective-C by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:56:49 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Objective-C - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf18" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Objective-C" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="Objective-C.html" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.rtlcite%2Cwikihiero%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Objective-C","wgTitle":"Objective-C","wgCurRevisionId":601487303,"wgRevisionId":601487303,"wgArticleId":39809523,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["CS1 errors: dates","All articles with dead external links","Articles with dead external links from September 2010","All articles with unsourced statements","Articles with unsourced statements from April 2013","Articles with unsourced statements from November 2013","Articles needing additional references from November 2012","All articles needing additional references","Articles needing additional references from December 2011","All articles with specifically marked weasel-worded phrases","Articles with specifically marked weasel-worded phrases from June 2013","Use dmy dates from January 2012","C programming language family","Object-oriented programming languages","Dynamically typed programming languages","Class-based programming languages","NeXT","GNUstep","Objective-C","Programming languages created in 1986"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Objective-C","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf18/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["en-us","en"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q188531"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-enable-mwmath":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":
false,"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:0378eace27e3aee431624f77f4809281 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000ff;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #666666;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es1 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es2 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es3 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es4 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es5 {color: #006699; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #FF0000;}
.cpp.source-cpp .nu0 {color: #0000dd;}
.cpp.source-cpp .nu6 {color: #208080;}
.cpp.source-cpp .nu8 {color: #208080;}
.cpp.source-cpp .nu12 {color: #208080;}
.cpp.source-cpp .nu16 {color:#800080;}
.cpp.source-cpp .nu17 {color:#800080;}
.cpp.source-cpp .nu18 {color:#800080;}
.cpp.source-cpp .nu19 {color:#800080;}
.cpp.source-cpp .me1 {color: #007788;}
.cpp.source-cpp .me2 {color: #007788;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-objc {line-height: normal;}
.source-objc li, .source-objc pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for objc
 * CSS class: source-objc, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.objc.source-objc .de1, .objc.source-objc .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.objc.source-objc  {font-family:monospace;}
.objc.source-objc .imp {font-weight: bold; color: red;}
.objc.source-objc li, .objc.source-objc .li1 {font-weight: normal; vertical-align:top;}
.objc.source-objc .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.objc.source-objc .li2 {font-weight: bold; vertical-align:top;}
.objc.source-objc .kw1 {color: #a61390;}
.objc.source-objc .kw2 {color: #a61390;}
.objc.source-objc .kw3 {color: #a61390;}
.objc.source-objc .kw4 {color: #a61390;}
.objc.source-objc .kw5 {color: #400080;}
.objc.source-objc .kw6 {color: #2a6f76;}
.objc.source-objc .kw7 {color: #400080;}
.objc.source-objc .kw8 {color: #2a6f76;}
.objc.source-objc .kw9 {color: #400080;}
.objc.source-objc .co1 {color: #6e371a;}
.objc.source-objc .co2 {color: #11740a; font-style: italic;}
.objc.source-objc .co3 {color: #bf1d1a;}
.objc.source-objc .coMULTI {color: #11740a; font-style: italic;}
.objc.source-objc .es0 {color: #2400d9;}
.objc.source-objc .br0 {color: #002200;}
.objc.source-objc .sy0 {color: #002200;}
.objc.source-objc .st0 {color: #bf1d1a;}
.objc.source-objc .nu0 {color: #2400d9;}
.objc.source-objc .ln-xtra, .objc.source-objc li.ln-xtra, .objc.source-objc div.ln-xtra {background-color: #ffc;}
.objc.source-objc span.xtra { display:block; }

/*]]>*/
</style><style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf18/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Objective-C skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Objective-C</span></h1>
			<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><table class="infobox vevent" cellspacing="3" style="border-spacing:3px;width:22em;">
<caption class="summary">Objective-C</caption>
<tr>
<th scope="row" style="text-align:left;"><a href="Programming_paradigm.html" title="Programming paradigm">Paradigm(s)</a></th>
<td><a href="http://en.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">Reflective</a>, <a href="http://en.wikipedia.org/wiki/Class-based_programming" title="Class-based programming">class-based</a> <a href="Object-oriented_programming.html" title="Object-oriented programming">object-oriented</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Software_design.html" title="Software design">Designed by</a></th>
<td><a href="http://en.wikipedia.org/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a> and Tom Love</td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Software_developer.html" title="Software developer">Developer</a></th>
<td class="organiser"><a href="http://en.wikipedia.org/wiki/Apple_Inc." title="Apple Inc.">Apple</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;">Appeared in</th>
<td>1983</td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Software_release_life_cycle.html" title="Software release life cycle">Stable release</a></th>
<td>2.0</td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Type_system.html" title="Type system">Typing discipline</a></th>
<td><a href="Static_typing.html" title="Static typing" class="mw-redirect">static</a>, <a href="http://en.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic</a>, <a href="Weak_typing.html" title="Weak typing" class="mw-redirect">weak</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Programming_language_implementation.html" title="Programming language implementation">Major implementations</a></th>
<td><a href="Clang.html" title="Clang">Clang</a>, <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;">Influenced by</th>
<td><a href="C_(programming_language).html" title="C (programming language)">C</a>, <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;">Influenced</th>
<td><a href="Java_(programming_language).html" title="Java (programming language)">Java</a>, <a href="http://en.wikipedia.org/wiki/Objective-J" title="Objective-J">Objective-J</a>, <a href="http://en.wikipedia.org/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a>, <a href="http://en.wikipedia.org/wiki/Nu_(programming_language)" title="Nu (programming language)">Nu</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Operating_system.html" title="Operating system">OS</a></th>
<td><a href="Cross-platform.html" title="Cross-platform">Cross-platform</a></td>
</tr>
<tr>
<th scope="row" style="text-align:left;"><a href="Filename_extension.html" title="Filename extension">Filename extension(s)</a></th>
<td>.h, .m, .mm</td>
</tr>
<tr>
<th scope="row" style="text-align:left;">Website</th>
<td><span class="url"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/navigation">developer.apple.com/library/mac/navigation</a></span></td>
</tr>
<tr>
<td colspan="2" class="hlist" style="text-align:center;">
<ul>
<li><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/16px-Wikibooks-logo-en-noslogan.svg.png" width="16" height="16" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/24px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/32px-Wikibooks-logo-en-noslogan.svg.png 2x" /> <a href="http://en.wikibooks.org/wiki/Objective-C_Programming" class="extiw" title="wikibooks:Objective-C Programming">Objective-C Programming</a> at Wikibooks</li>
</ul>
</td>
</tr>
</table>
<p><b>Objective-C</b> is a <a href="http://en.wikipedia.org/wiki/General-purpose_programming_language" title="General-purpose programming language">general-purpose</a>, <a href="Object-oriented_programming.html" title="Object-oriented programming">object-oriented</a> <a href="Programming_language.html" title="Programming language">programming language</a> that adds <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a>-style <a href="http://en.wikipedia.org/wiki/Message_passing" title="Message passing">messaging</a> to the <a href="C_(programming_language).html" title="C (programming language)">C</a> programming language. It is the main programming language used by <a href="http://en.wikipedia.org/wiki/Apple_Inc." title="Apple Inc.">Apple</a> for the <a href="OS_X.html" title="OS X">OS X</a> and <a href="IOS.html" title="IOS">iOS</a> operating systems and their respective <a href="API.html" title="API" class="mw-redirect">APIs</a>, <a href="http://en.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> and <a href="http://en.wikipedia.org/wiki/Cocoa_Touch" title="Cocoa Touch">Cocoa Touch</a>.</p>
<p>Originally developed in the early 1980s, it was selected as the main language used by <a href="http://en.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a> for its <a href="NeXTSTEP.html" title="NeXTSTEP">NeXTSTEP</a> operating system, from which OS X and iOS are derived.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span>[</span>1<span>]</span></a></sup> Generic Objective-C programs that do not use the <a href="http://en.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a> or <a href="http://en.wikipedia.org/wiki/Cocoa_Touch" title="Cocoa Touch">Cocoa Touch</a> libraries, or using parts that may be ported or reimplemented for other systems can also be compiled for any system supported by <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a> or <a href="Clang.html" title="Clang">Clang</a>.</p>
<p>Objective-C source code program files usually have <code>.m</code> filename extensions, while Objective-C header files have <code>.h</code> extensions, the same as for C header files.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#History"><span class="tocnumber">1</span> <span class="toctext">History</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Popularization_through_NeXT"><span class="tocnumber">1.1</span> <span class="toctext">Popularization through NeXT</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-3"><a href="#Syntax"><span class="tocnumber">2</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#Messages"><span class="tocnumber">2.1</span> <span class="toctext">Messages</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Interfaces_and_implementations"><span class="tocnumber">2.2</span> <span class="toctext">Interfaces and implementations</span></a>
<ul>
<li class="toclevel-3 tocsection-6"><a href="#Interface"><span class="tocnumber">2.2.1</span> <span class="toctext">Interface</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="#Implementation"><span class="tocnumber">2.2.2</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-3 tocsection-8"><a href="#Instantiation"><span class="tocnumber">2.2.3</span> <span class="toctext">Instantiation</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-9"><a href="#Protocols"><span class="tocnumber">2.3</span> <span class="toctext">Protocols</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="#Dynamic_typing"><span class="tocnumber">2.4</span> <span class="toctext">Dynamic typing</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="#Forwarding"><span class="tocnumber">2.5</span> <span class="toctext">Forwarding</span></a>
<ul>
<li class="toclevel-3 tocsection-12"><a href="#Example"><span class="tocnumber">2.5.1</span> <span class="toctext">Example</span></a></li>
<li class="toclevel-3 tocsection-13"><a href="#Notes"><span class="tocnumber">2.5.2</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-14"><a href="#Categories"><span class="tocnumber">2.6</span> <span class="toctext">Categories</span></a>
<ul>
<li class="toclevel-3 tocsection-15"><a href="#Example_usage_of_categories"><span class="tocnumber">2.6.1</span> <span class="toctext">Example usage of categories</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#Notes_2"><span class="tocnumber">2.6.2</span> <span class="toctext">Notes</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-17"><a href="#Posing"><span class="tocnumber">2.7</span> <span class="toctext">Posing</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="#.23import"><span class="tocnumber">2.8</span> <span class="toctext">#import</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-19"><a href="#Other_features"><span class="tocnumber">3</span> <span class="toctext">Other features</span></a></li>
<li class="toclevel-1 tocsection-20"><a href="#Language_variants"><span class="tocnumber">4</span> <span class="toctext">Language variants</span></a>
<ul>
<li class="toclevel-2 tocsection-21"><a href="#Objective-C.2B.2B"><span class="tocnumber">4.1</span> <span class="toctext">Objective-C++</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="#Objective-C_2.0"><span class="tocnumber">4.2</span> <span class="toctext">Objective-C 2.0</span></a>
<ul>
<li class="toclevel-3 tocsection-23"><a href="#Garbage_collection"><span class="tocnumber">4.2.1</span> <span class="toctext">Garbage collection</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="#Properties"><span class="tocnumber">4.2.2</span> <span class="toctext">Properties</span></a></li>
<li class="toclevel-3 tocsection-25"><a href="#Non-fragile_instance_variables"><span class="tocnumber">4.2.3</span> <span class="toctext">Non-fragile instance variables</span></a></li>
<li class="toclevel-3 tocsection-26"><a href="#Fast_enumeration"><span class="tocnumber">4.2.4</span> <span class="toctext">Fast enumeration</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="#Class_Extensions"><span class="tocnumber">4.2.5</span> <span class="toctext">Class Extensions</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="#Implications_for_Cocoa_development"><span class="tocnumber">4.2.6</span> <span class="toctext">Implications for Cocoa development</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-29"><a href="#Blocks"><span class="tocnumber">4.3</span> <span class="toctext">Blocks</span></a></li>
<li class="toclevel-2 tocsection-30"><a href="#Modern_Objective-C"><span class="tocnumber">4.4</span> <span class="toctext">Modern Objective-C</span></a>
<ul>
<li class="toclevel-3 tocsection-31"><a href="#Automatic_Reference_Counting"><span class="tocnumber">4.4.1</span> <span class="toctext">Automatic Reference Counting</span></a></li>
<li class="toclevel-3 tocsection-32"><a href="#Literals"><span class="tocnumber">4.4.2</span> <span class="toctext">Literals</span></a></li>
<li class="toclevel-3 tocsection-33"><a href="#Subscripting"><span class="tocnumber">4.4.3</span> <span class="toctext">Subscripting</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-34"><a href="#.22Modern.22_Objective-C_syntax_.281997.29"><span class="tocnumber">4.5</span> <span class="toctext">"Modern" Objective-C syntax (1997)</span></a></li>
<li class="toclevel-2 tocsection-35"><a href="#Portable_Object_Compiler"><span class="tocnumber">4.6</span> <span class="toctext">Portable Object Compiler</span></a></li>
<li class="toclevel-2 tocsection-36"><a href="#GEOS_Objective-C"><span class="tocnumber">4.7</span> <span class="toctext">GEOS Objective-C</span></a></li>
<li class="toclevel-2 tocsection-37"><a href="#Clang"><span class="tocnumber">4.8</span> <span class="toctext">Clang</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-38"><a href="#Library_use"><span class="tocnumber">5</span> <span class="toctext">Library use</span></a></li>
<li class="toclevel-1 tocsection-39"><a href="#Analysis_of_the_language"><span class="tocnumber">6</span> <span class="toctext">Analysis of the language</span></a>
<ul>
<li class="toclevel-2 tocsection-40"><a href="#Philosophical_differences_between_Objective-C_and_C.2B.2B"><span class="tocnumber">6.1</span> <span class="toctext">Philosophical differences between Objective-C and C++</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-41"><a href="#See_also"><span class="tocnumber">7</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-42"><a href="#References"><span class="tocnumber">8</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-43"><a href="#Further_reading"><span class="tocnumber">9</span> <span class="toctext">Further reading</span></a></li>
<li class="toclevel-1 tocsection-44"><a href="#External_links"><span class="tocnumber">10</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="History">History</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=1" title="Edit section: History">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C was created primarily by <a href="http://en.wikipedia.org/wiki/Brad_Cox" title="Brad Cox">Brad Cox</a> and Tom Love in the early 1980s at their company <a href="http://en.wikipedia.org/wiki/Stepstone" title="Stepstone">Stepstone</a>.<sup id="cite_ref-Wired1_2-0" class="reference"><a href="#cite_note-Wired1-2"><span>[</span>2<span>]</span></a></sup> Both had been introduced to <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a> while at <a href="http://en.wikipedia.org/wiki/ITT_Corporation" title="ITT Corporation">ITT Corporation</a>'s Programming Technology Center in 1981. The earliest work on Objective-C traces back to around that time.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span>[</span>3<span>]</span></a></sup> Cox was intrigued by problems of true reusability in <a href="Software_engineering.html" title="Software engineering">software design</a> and programming. He realized that a language like Smalltalk would be invaluable in building development environments for system developers at ITT. However, he and Tom Love also recognized that backward compatibility with C was critically important in ITT's telecom engineering milieu.<sup id="cite_ref-love2009_4-0" class="reference"><a href="#cite_note-love2009-4"><span>[</span>4<span>]</span></a></sup></p>
<p>Cox began writing a pre-processor for C to add some of the capabilities of Smalltalk. He soon had a working implementation of an object-oriented extension to the C language, which he called "OOPC" for Object-Oriented Pre-Compiler.<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup> Love was hired by Schlumberger Research in 1982 and had the opportunity to acquire the first commercial copy of Smalltalk-80, which further influenced the development of their brainchild.</p>
<p>In order to demonstrate that real progress could be made, Cox showed that making interchangeable <a href="http://en.wikipedia.org/wiki/Software_component" title="Software component" class="mw-redirect">software components</a> really needed only a few practical changes to existing tools. Specifically, they needed to support objects in a flexible manner, come supplied with a usable set of libraries, and allow for the code (and any resources needed by the code) to be bundled into a single cross-platform format.</p>
<p>Love and Cox eventually formed a new venture, <a href="http://en.wikipedia.org/wiki/Stepstone" title="Stepstone">Productivity Products International (PPI)</a>, to commercialize their product, which coupled an Objective-C compiler with class libraries. In 1986, Cox published the main description of Objective-C in its original form in the book <i>Object-Oriented Programming, An Evolutionary Approach</i>. Although he was careful to point out that there is more to the problem of reusability than just the language, Objective-C often found itself compared feature for feature with other languages.</p>
<h3><span class="mw-headline" id="Popularization_through_NeXT">Popularization through NeXT</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=2" title="Edit section: Popularization through NeXT">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In 1988, <a href="http://en.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a> licensed Objective-C from StepStone (the new name of PPI, the owner of the Objective-C trademark) and extended the <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a> compiler to support Objective-C, and developed the <a href="http://en.wikipedia.org/wiki/Application_Kit" title="Application Kit">AppKit</a> and <a href="http://en.wikipedia.org/wiki/Foundation_Kit" title="Foundation Kit">Foundation Kit</a> libraries on which the <a href="http://en.wikipedia.org/wiki/NeXTstep" title="NeXTstep" class="mw-redirect">NeXTstep</a> user interface and Interface Builder were based. While the NeXT workstations failed to make a great impact in the marketplace, the tools were widely lauded in the industry. This led NeXT to drop hardware production and focus on software tools, selling NeXTstep (and OpenStep) as a platform for custom programming.</p>
<p>The work to extend <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a> was led by Steve Naroff, who joined NeXT from StepStone. The compiler changes were made available as per <a href="http://en.wikipedia.org/wiki/GNU_Public_License" title="GNU Public License" class="mw-redirect">GPL</a> license terms, but the runtime libraries were not, rendering the open source contribution unusable to the general public. This led to other parties developing such runtime libraries under open source license. Later, Steve Naroff was also principal contributor to work at Apple to build the Objective-C frontend to <a href="Clang.html" title="Clang">Clang</a>.</p>
<p>The <a href="GNU.html" title="GNU">GNU</a> project started work on its free software implementation of Cocoa, named <a href="http://en.wikipedia.org/wiki/GNUstep" title="GNUstep">GNUstep</a>, based on the <a href="http://en.wikipedia.org/wiki/OpenStep" title="OpenStep">OpenStep</a> standard.<sup id="cite_ref-GNUstep_site_6-0" class="reference"><a href="#cite_note-GNUstep_site-6"><span>[</span>6<span>]</span></a></sup> Dennis Glatting wrote the first GNU Objective-C <a href="http://en.wikipedia.org/wiki/Run_time_system" title="Run time system" class="mw-redirect">runtime</a> in 1992. The GNU Objective-C runtime, which has been in use since 1993, is the one developed by Kresten Krab Thorup when he was a university student in <a href="http://en.wikipedia.org/wiki/Denmark" title="Denmark">Denmark</a>.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2013)">citation needed</span></a></i>]</sup> Thorup also worked at NeXT from 1993 to 1996.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (April 2013)">citation needed</span></a></i>]</sup></p>
<p>After acquiring NeXT in 1996, <a href="http://en.wikipedia.org/wiki/Apple_Computer" title="Apple Computer" class="mw-redirect">Apple Computer</a> used OpenStep in its new operating system, <a href="http://en.wikipedia.org/wiki/Mac_OS_X" title="Mac OS X" class="mw-redirect">Mac OS X</a>. This included Objective-C and NeXT's Objective-C based developer tool, <a href="http://en.wikipedia.org/wiki/Project_Builder" title="Project Builder">Project Builder</a> (which had been expanded and is now called <a href="Xcode.html" title="Xcode">Xcode</a>), as well as its interface design tool, <a href="http://en.wikipedia.org/wiki/Interface_Builder" title="Interface Builder">Interface Builder</a>. Most of Apple's present-day <a href="http://en.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa API</a> is based on OpenStep interface objects, and is the most significant Objective-C environment being used for active development.</p>
<h2><span class="mw-headline" id="Syntax">Syntax</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=3" title="Edit section: Syntax">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C is a thin layer on top of C, and moreover is a <i>strict <a href="Superset.html" title="Superset" class="mw-redirect">superset</a></i> of C; it is possible to compile any C program with an Objective-C compiler, and to freely include C code within an Objective-C class.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7"><span>[</span>7<span>]</span></a></sup></p>
<p>Objective-C derives its object syntax from <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a>. All of the syntax for non-object-oriented operations (including primitive variables, pre-processing, expressions, function declarations, and function calls) are identical to that of C, while the syntax for object-oriented features is an implementation of Smalltalk-style messaging.</p>
<h3><span class="mw-headline" id="Messages">Messages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=4" title="Edit section: Messages">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The Objective-C model of object-oriented programming is based on <a href="http://en.wikipedia.org/wiki/Message_passing" title="Message passing">message passing</a> to object instances. In Objective-C one does not simply <i>call a method</i>; one <i>sends a message</i>. This is unlike the <a href="http://en.wikipedia.org/wiki/Simula" title="Simula">Simula</a>-style programming model used by <a href="C%2b%2b.html" title="C++">C++</a>. The difference between these two concepts is in how the code referenced by the method or message name is executed. In a Simula-style language, the method name is in most cases <a href="http://en.wikipedia.org/wiki/Name_binding" title="Name binding">bound</a> to a section of code in the target class by the compiler. In <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a> and Objective-C, the target of a message is resolved at runtime, with the receiving object itself interpreting the message. A method is identified by a <i>selector</i> or <tt>SEL</tt> — a <tt>NUL</tt>-terminated string representing its name — and resolved to a C method <a href="Pointer_(computer_programming).html" title="Pointer (computer programming)">pointer</a> implementing it: an <tt>IMP</tt>.<sup id="cite_ref-8" class="reference"><a href="#cite_note-8"><span>[</span>8<span>]</span></a></sup> A consequence of this is that the message-passing system has no type checking. The object to which the message is directed — the <i>receiver</i> — is not guaranteed to respond to a message, and if it does not, it simply raises an exception.<sup id="cite_ref-9" class="reference"><a href="#cite_note-9"><span>[</span>9<span>]</span></a></sup></p>
<p>Sending the message <tt>method</tt> to the object pointed to by the pointer <tt>obj</tt> would require the following code in <a href="C%2b%2b.html" title="C++">C++</a>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
obj<span class="sy2">-</span><span class="sy1">&gt;</span>method<span class="br0">(</span>argument<span class="br0">)</span><span class="sy4">;</span>
</pre></div>
</div>
<p>In Objective-C, this is written as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="br0">[</span>obj method<span class="sy0">:</span>argument<span class="br0">]</span>;
</pre></div>
</div>
<p>Both styles of programming have their strengths and weaknesses. Object-oriented programming in the Simula (C++) style allows <a href="http://en.wikipedia.org/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> and faster execution by using <a href="http://en.wikipedia.org/wiki/Compile-time_binding" title="Compile-time binding" class="mw-redirect">compile-time binding</a> whenever possible, but it does not support <a href="http://en.wikipedia.org/wiki/Dynamic_dispatch" title="Dynamic dispatch">dynamic binding</a> by default. It also forces all methods to have a corresponding implementation unless they are <a href="http://en.wikipedia.org/wiki/Method_(computer_programming)#Abstract_methods" title="Method (computer programming)">abstract</a>. The Smalltalk-style programming as used in Objective-C allows messages to go unimplemented, with the method resolved to its implementation at runtime. For example, a message may be sent to a collection of objects, to which only some will be expected to respond, without fear of producing runtime errors. Message passing also does not require that an object be defined at compile time. An implementation is still required for the method to be called in the derived object. (See the <a href="#Dynamic_typing">dynamic typing</a> section below for more advantages of dynamic (late) binding.)</p>
<h3><span class="mw-headline" id="Interfaces_and_implementations">Interfaces and implementations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=5" title="Edit section: Interfaces and implementations">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C requires that the interface and implementation of a class be in separately declared code blocks. By convention, developers place the interface in a <a href="Header_file.html" title="Header file" class="mw-redirect">header file</a> and the implementation in a code file. The header files, normally suffixed .h, are similar to C header files while the implementation (method) files, normally suffixed .m, can be very similar to C code files.</p>
<h4><span class="mw-headline" id="Interface">Interface</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=6" title="Edit section: Interface">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In other programming languages, this is called a "class definition".</p>
<p>The interface of a class is usually defined in a header file. A common convention is to name the header file after the name of the class, e.g. <tt>Ball.h</tt> would contain the interface for the class <tt>Ball</tt>.</p>
<p>An interface declaration takes the form:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> classname <span class="sy0">:</span> superclassname <span class="br0">{</span>
 <span class="co2">// instance variables</span>
<span class="br0">}</span>
<span class="sy0">+</span> classMethod1;
<span class="sy0">+</span> <span class="br0">(</span>return_type<span class="br0">)</span>classMethod2;
<span class="sy0">+</span> <span class="br0">(</span>return_type<span class="br0">)</span>classMethod3<span class="sy0">:</span><span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName;
 
<span class="sy0">-</span> <span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod1With1Parameter<span class="sy0">:</span><span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName;
<span class="sy0">-</span> <span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod2With2Parameters<span class="sy0">:</span><span class="br0">(</span>param1_type<span class="br0">)</span>param1_varName param2_callName<span class="sy0">:</span><span class="br0">(</span>param2_type<span class="br0">)</span>param2_varName;
<span class="kw1">@end</span>
</pre></div>
</div>
<p>In the above, plus signs denote <a href="http://en.wikipedia.org/wiki/Class_method" title="Class method" class="mw-redirect">class methods</a>, or methods that can be called on the class itself (not on an instance), and minus signs denote <a href="http://en.wikipedia.org/wiki/Instance_method" title="Instance method" class="mw-redirect">instance methods</a>, which can only be called on a particular instance of the class. Class methods also have no access to instance variables.</p>
<p>The code above is roughly equivalent to the following <a href="C%2b%2b.html" title="C++">C++</a> interface:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="kw2">class</span> classname <span class="sy4">:</span> <span class="kw2">public</span> superclassname <span class="br0">{</span>
 <span class="kw2">protected</span><span class="sy4">:</span>
 <span class="co1">// instance variables</span>
 
 <span class="kw2">public</span><span class="sy4">:</span>
 <span class="co1">// Class (static) functions</span>
 <span class="kw4">static</span> <span class="kw4">void</span> <span class="sy2">*</span> classMethod1<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
 <span class="kw4">static</span> return_type classMethod2<span class="br0">(</span><span class="br0">)</span><span class="sy4">;</span>
 <span class="kw4">static</span> return_type classMethod3<span class="br0">(</span>param1_type param1_varName<span class="br0">)</span><span class="sy4">;</span>
 
 <span class="co1">// Instance (member) functions</span>
 return_type instanceMethod1With1Parameter <span class="br0">(</span>param1_type param1_varName<span class="br0">)</span><span class="sy4">;</span>
 return_type instanceMethod2With2Parameters <span class="br0">(</span>param1_type param1_varName, param2_type param2_varName<span class="sy1">=</span><span class="kw1">default</span><span class="br0">)</span><span class="sy4">;</span>
<span class="br0">}</span><span class="sy4">;</span>
</pre></div>
</div>
<p>Note that <tt>instanceMethod2With2Parameters:param2_callName:</tt> demonstrates the interleaving of selector segments with argument expressions, for which there is no direct equivalent in C/C++.</p>
<p>Return types can be any standard C type, a pointer to a generic Objective-C object, a pointer to a specific type of object such as NSArray *, NSImage *, or NSString *, or a pointer to the class to which the method belongs (instancetype). The default return type is the generic Objective-C type <tt>id</tt>.</p>
<p>Method arguments begin with a name labeling the argument that is part of the method name, followed by a colon followed by the expected argument type in parentheses and the argument name. The label can be omitted.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setRangeStart<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>start end<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>end;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>importDocumentWithName<span class="sy0">:</span><span class="br0">(</span><span class="kw5">NSString</span> <span class="sy0">*</span><span class="br0">)</span>name withSpecifiedPreferences<span class="sy0">:</span>
<span class="br0">(</span>Preferences <span class="sy0">*</span><span class="br0">)</span>prefs beforePage<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>insertPage;
</pre></div>
</div>
<h4><span class="mw-headline" id="Implementation">Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=7" title="Edit section: Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>The interface only declares the class interface and not the methods themselves: the actual code is written in the implementation file. Implementation (method) files normally have the file extension <code>.m</code>, which originally signified "messages".<sup id="cite_ref-10" class="reference"><a href="#cite_note-10"><span>[</span>10<span>]</span></a></sup></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@implementation</span> classname
<span class="sy0">+</span> <span class="br0">(</span>return_type<span class="br0">)</span>classMethod
<span class="br0">{</span>
 <span class="co2">// implementation</span>
<span class="br0">}</span>
<span class="sy0">-</span> <span class="br0">(</span>return_type<span class="br0">)</span>instanceMethod
<span class="br0">{</span>
 <span class="co2">// implementation</span>
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre></div>
</div>
<p>Methods are written using their interface declarations. Comparing Objective-C and C:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>method<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>i
<span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>self square_root<span class="sy0">:</span>i<span class="br0">]</span>;
<span class="br0">}</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> <span class="kw2">function</span> <span class="br0">(</span><span class="kw4">int</span> i<span class="br0">)</span>
<span class="br0">{</span>
 <span class="kw1">return</span> square_root<span class="br0">(</span>i<span class="br0">)</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>The syntax allows pseudo-<a href="http://en.wikipedia.org/wiki/Named_parameter" title="Named parameter">naming of arguments</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>changeColorToRed<span class="sy0">:</span><span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>red green<span class="sy0">:</span><span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>green blue<span class="sy0">:</span><span class="br0">(</span><span class="kw4">float</span><span class="br0">)</span>blue;
 
<span class="br0">[</span>myColor changeColorToRed<span class="sy0">:</span><span class="nu0">5.0</span> green<span class="sy0">:</span><span class="nu0">2.0</span> blue<span class="sy0">:</span><span class="nu0">6.0</span><span class="br0">]</span>;
</pre></div>
</div>
<p>Internal representations of a method vary between different implementations of Objective-C. If myColor is of the class <tt>Color</tt>, instance method <tt>-changeColorToRed:green:blue:</tt> might be internally labeled <tt>_i_Color_changeColorToRed_green_blue</tt>. The <tt>i</tt> is to refer to an instance method, with the class and then method names appended and colons changed to underscores. As the order of parameters is part of the method name, it cannot be changed to suit coding style or expression as with true named parameters.</p>
<p>However, internal names of the function are rarely used directly. Generally, messages are converted to function calls defined in the Objective-C runtime library. It is not necessarily known at link time which method will be called because the class of the receiver (the object being sent the message) need not be known until runtime.</p>
<h4><span class="mw-headline" id="Instantiation">Instantiation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=8" title="Edit section: Instantiation">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Once an Objective-C class is written, it can be instantiated. This is done by first allocating an uninitialized instance of the class (an object) and then by initializing it. An object is not fully functional until both steps have been completed. These steps should be accomplished with a single line of code so that there is never an allocated object that hasn't undergone initialization (and because it is not advisable to keep the intermediate result since <code>-init</code> can return a different object than that which it is called on).</p>
<p>Instantiation with the default, no-parameter initializer:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span>MyObject alloc<span class="br0">]</span> init<span class="br0">]</span>;
</pre></div>
</div>
<p>Instantiation with a custom initializer:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span>MyObject alloc<span class="br0">]</span> initWithString<span class="sy0">:</span>myString<span class="br0">]</span>;
</pre></div>
</div>
<p>In the case where no custom initialization is being performed, the "new" method can often be used in place of the alloc-init messages:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span>MyObject new<span class="br0">]</span>;
</pre></div>
</div>
<p>Also, some classes implement class method initializers. Like <code>+new</code>, they combine <code>+alloc</code> and <code>-init</code>, but unlike <code>+new</code>, they return an autoreleased instance. Some class method initializers take parameters:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
MyObject <span class="sy0">*</span>o <span class="sy0">=</span> <span class="br0">[</span>MyObject object<span class="br0">]</span>;
MyObject <span class="sy0">*</span>o2 <span class="sy0">=</span> <span class="br0">[</span>MyObject objectWithString<span class="sy0">:</span>myString<span class="br0">]</span>;
</pre></div>
</div>
<p>The <i>alloc</i> message allocates enough memory to hold all the instance variables for an object, sets all the instance variables to zero values, and turns the memory into an instance of the class; at no point during the initialization is the memory an instance of the superclass.</p>
<p>The <i>init</i> message performs the set-up of the instance upon creation. The <i>init</i> method is often written as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>init <span class="br0">{</span>
    self <span class="sy0">=</span> <span class="br0">[</span>super init<span class="br0">]</span>;
    <span class="kw1">if</span> <span class="br0">(</span>self<span class="br0">)</span> <span class="br0">{</span>
        <span class="co2">// perform initialization of object here</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> self;
<span class="br0">}</span>
</pre></div>
</div>
<p>In the above example, notice the <code>id</code> return type. This type stands for "pointer to any object" in Objective-C (See the <a href="#Dynamic_typing">Dynamic typing</a> section).</p>
<p>The initializer pattern is used to assure that the object is properly initialized by its superclass before the init method performs its initialization. It performs the following actions:</p>
<ol>
<li>self = [super init]
<dl>
<dd>Sends the superclass instance an <i>init</i> message and assigns the result to <i>self</i> (pointer to the current object).</dd>
</dl>
</li>
<li>if (self)
<dl>
<dd>Checks if the returned object pointer is valid before performing any initialization.</dd>
</dl>
</li>
<li>return self
<dl>
<dd>Returns the value of self to the caller.</dd>
</dl>
</li>
</ol>
<p>A non-valid object pointer has the value <i>nil</i>; conditional statements like "if" treat nil like a null pointer, so the initialization code will not be executed if [super init] returned nil. If there is an error in initialization the init method should perform any necessary cleanup, including sending a "release" message to self, and return <i>nil</i> to indicate that initialization failed. Any checking for such errors must only be performed after having called the superclass initialization to ensure that destroying the object will be done correctly.</p>
<p>If a class has more than one initialization method, only one of them (the "designated initializer") needs to follow this pattern; others should call the designated initializer instead of the superclass initializer.</p>
<h3><span class="mw-headline" id="Protocols">Protocols</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=9" title="Edit section: Protocols">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In other programming languages, these are called "interfaces".</p>
<p>Objective-C was extended at <a href="http://en.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a> to introduce the concept of <a href="http://en.wikipedia.org/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a> of specification, but not implementation, through the introduction of <a href="http://en.wikipedia.org/wiki/Protocol_(object-oriented_programming)" title="Protocol (object-oriented programming)">protocols</a>. This is a pattern achievable either as an abstract multiple inherited base class in <a href="C%2b%2b.html" title="C++">C++</a>, or as an "interface" (as in Java and C#). Objective-C makes use of ad hoc protocols called <i>informal protocols</i> and compiler-enforced protocols called <i>formal protocols</i>.</p>
<p>An informal protocol is a list of methods that a class can opt to implement. It is specified in the documentation, since it has no presence in the language. Informal protocols often include optional methods, which, if implemented, can change the behavior of a class. For example, a text field class might have a <a href="http://en.wikipedia.org/wiki/Delegation_(programming)" title="Delegation (programming)">delegate</a> that implements an informal protocol with an optional method for performing auto-completion of user-typed text. The text field discovers whether the delegate implements that method (via <a href="http://en.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflection</a>) and, if so, calls the delegate's method to support the auto-complete feature.</p>
<p>A formal protocol is similar to an <a href="http://en.wikipedia.org/wiki/Interface_(computer_science)" title="Interface (computer science)" class="mw-redirect">interface</a> in Java or C#. It is a list of methods that any class can declare itself to implement. Versions of Objective-C before 2.0 required that a class must implement all methods in a protocol it declares itself as adopting; the compiler will emit an error if the class does not implement every method from its declared protocols. Objective-C 2.0 added support for marking certain methods in a protocol optional, and the compiler will not enforce implementation of optional methods.</p>
<p>A class must be declared to implement that protocol to be said to conform to it. This is detectable at runtime. Formal protocols cannot provide any implementations; they simply assure callers that classes that conform to the protocol will provide implementations. In the NeXT/Apple library, protocols are frequently used by the Distributed Objects system to represent the capabilities of an object executing on a remote system.</p>
<p>The syntax</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@protocol</span> <span class="kw6">NSLocking</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>lock;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>unlock;
<span class="kw1">@end</span>
</pre></div>
</div>
<p>denotes that there is the abstract idea of locking. By stating in the class definition that the protocol is implemented,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> <span class="kw5">NSLock</span> <span class="sy0">:</span> <span class="kw5">NSObject</span> &lt;NSLocking&gt;
<span class="co2">//...</span>
<span class="kw1">@end</span>
</pre></div>
</div>
<p>instances of NSLock claim that they will provide an implementation for the two instance methods.</p>
<h3><span class="mw-headline" id="Dynamic_typing">Dynamic typing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=10" title="Edit section: Dynamic typing">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C, like Smalltalk, can use <a href="http://en.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a>: an object can be sent a message that is not specified in its interface. This can allow for increased flexibility, as it allows an object to "capture" a message and send the message to a different object that can respond to the message appropriately, or likewise send the message on to another object. This behavior is known as <i>message forwarding</i> or <i>delegation</i> (see below). Alternatively, an error handler can be used in case the message cannot be forwarded. If an object does not forward a message, respond to it, or handle an error, then the system will generate a runtime exception.<sup id="cite_ref-11" class="reference"><a href="#cite_note-11"><span>[</span>11<span>]</span></a></sup> If messages are sent to <i>nil</i> (the null object pointer), they will be silently ignored or raise a generic exception, depending on compiler options.</p>
<p>Static typing information may also optionally be added to variables. This information is then checked at compile time. In the following four statements, increasingly specific type information is provided. The statements are equivalent at runtime, but the additional information allows the compiler to warn the programmer if the passed argument does not match the type specified.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>foo;
</pre></div>
</div>
<p>In the above statement, <i>foo</i> may be of any class.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span>id&lt;NSCopying&gt;<span class="br0">)</span>foo;
</pre></div>
</div>
<p>In the above statement, <i>foo</i> may be an instance of any class that conforms to the <i><code>NSCopying</code></i> protocol.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span><span class="kw5">NSNumber</span> <span class="sy0">*</span><span class="br0">)</span>foo;
</pre></div>
</div>
<p>In the above statement, <i>foo</i> must be an instance of the <i>NSNumber</i> class.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>setMyValue<span class="sy0">:</span><span class="br0">(</span>NSNumber&lt;NSCopying&gt; <span class="sy0">*</span><span class="br0">)</span>foo;
</pre></div>
</div>
<p>In the above statement, <i>foo</i> must be an instance of the <i>NSNumber</i> class, and it must conform to the <i><code>NSCopying</code></i> protocol.</p>
<h3><span class="mw-headline" id="Forwarding">Forwarding</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=11" title="Edit section: Forwarding">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C permits the sending of a message to an object that may not respond. Rather than responding or simply dropping the message, an object can forward the message to an object that can respond. Forwarding can be used to simplify implementation of certain <a href="http://en.wikipedia.org/wiki/Design_pattern_(computer_science)" title="Design pattern (computer science)" class="mw-redirect">design patterns</a>, such as the <a href="http://en.wikipedia.org/wiki/Observer_pattern" title="Observer pattern">observer pattern</a> or the <a href="http://en.wikipedia.org/wiki/Proxy_pattern" title="Proxy pattern">proxy pattern</a>.</p>
<p>The Objective-C runtime specifies a pair of methods in <tt>Object</tt></p>
<ul>
<li>forwarding methods:</li>
</ul>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span>retval_t<span class="br0">)</span>forward<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>arglist_t<span class="br0">)</span>args; <span class="co2">// with GCC</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>forward<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>marg_list<span class="br0">)</span>args; <span class="co2">// with NeXT/Apple systems</span>
</pre></div>
</div>
<ul>
<li>action methods:</li>
</ul>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span> <span class="br0">(</span>retval_t<span class="br0">)</span>performv<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>arglist_t<span class="br0">)</span>args; <span class="co2">// with GCC</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>performv<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>marg_list<span class="br0">)</span>args; <span class="co2">// with NeXT/Apple systems</span>
</pre></div>
</div>
<p>An object wishing to implement forwarding needs only to override the forwarding method with a new method to define the forwarding behavior. The action method <tt>performv::</tt> need not be overridden, as this method merely performs an action based on the selector and arguments. Notice the <code lang="objc" xml:lang="objc">SEL</code> type, which is the type of messages in Objective-C.</p>
<p>Note: in OpenStep, Cocoa, and GNUstep, the commonly used frameworks of Objective-C, one does not use the <tt>Object</tt> class. The <tt>- (void)forwardInvocation:(NSInvocation *)anInvocation</tt> method of the <tt>NSObject</tt> class is used to do forwarding.</p>
<h4><span class="mw-headline" id="Example">Example</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=12" title="Edit section: Example">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Here is an example of a program that demonstrates the basics of forwarding.</p>
<dl>
<dt><i>Forwarder.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import &lt;objc/Object.h&gt;</span>
 
<span class="kw1">@interface</span> Forwarder <span class="sy0">:</span> Object <span class="br0">{</span>
 <span class="kw4">id</span> recipient; <span class="co2">//The object we want to forward the message to.</span>
<span class="br0">}</span>
 
<span class="co2">//Accessor methods.</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>recipient;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>setRecipient<span class="sy0">:</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>_recipient;
 
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Forwarder.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Forwarder.h"</span>
 
<span class="kw1">@implementation</span> Forwarder
 
<span class="sy0">-</span> <span class="br0">(</span>retval_t<span class="br0">)</span>forward<span class="sy0">:</span><span class="br0">(</span><span class="kw4">SEL</span><span class="br0">)</span>sel args<span class="sy0">:</span><span class="br0">(</span>arglist_t<span class="br0">)</span> args <span class="br0">{</span>
 <span class="coMULTI">/*
 * Check whether the recipient actually responds to the message.
 * This may or may not be desirable, for example, if a recipient
 * in turn does not respond to the message, it might do forwarding
 * itself.
 */</span>
 <span class="kw1">if</span><span class="br0">(</span><span class="br0">[</span>recipient respondsToSelector<span class="sy0">:</span>sel<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>
  <span class="kw1">return</span> <span class="br0">[</span>recipient performv<span class="sy0">:</span>sel args<span class="sy0">:</span>args<span class="br0">]</span>;
 <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
  <span class="kw1">return</span> <span class="br0">[</span>self error<span class="sy0">:</span><span class="st0">"Recipient does not respond"</span><span class="br0">]</span>;
 <span class="br0">}</span>
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>setRecipient<span class="sy0">:</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>_recipient <span class="br0">{</span>
 <span class="br0">[</span>recipient autorelease<span class="br0">]</span>;
 recipient <span class="sy0">=</span> <span class="br0">[</span>_recipient retain<span class="br0">]</span>;
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> recipient <span class="br0">{</span>
 <span class="kw1">return</span> recipient;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Recipient.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import &lt;objc/Object.h&gt;</span>
 
<span class="co2">// A simple Recipient object.</span>
<span class="kw1">@interface</span> Recipient <span class="sy0">:</span> Object
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>hello;
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Recipient.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Recipient.h"</span>
 
<span class="kw1">@implementation</span> Recipient
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>hello <span class="br0">{</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Recipient says hello!<span class="es0">\n</span>"</span><span class="br0">)</span>;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Forwarder.h"</span>
<span class="co1"># import "Recipient.h"</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
 Forwarder <span class="sy0">*</span>forwarder <span class="sy0">=</span> <span class="br0">[</span>Forwarder new<span class="br0">]</span>;
 Recipient <span class="sy0">*</span>recipient <span class="sy0">=</span> <span class="br0">[</span>Recipient new<span class="br0">]</span>;
 
 <span class="br0">[</span>forwarder setRecipient<span class="sy0">:</span>recipient<span class="br0">]</span>; <span class="co2">//Set the recipient.</span>
 <span class="coMULTI">/*
 * Observe forwarder does not respond to a hello message! It will
 * be forwarded. All unrecognized methods will be forwarded to
 * the recipient
 * (if the recipient responds to them, as written in the Forwarder)
 */</span>
 <span class="br0">[</span>forwarder hello<span class="br0">]</span>;
 
 <span class="br0">[</span>recipient release<span class="br0">]</span>;
 <span class="br0">[</span>forwarder release<span class="br0">]</span>;
 
 <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=13" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>When compiled using <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">gcc</a>, the compiler reports:</p>
<pre>
$ gcc -x objective-c -Wno-import Forwarder.m Recipient.m main.m -lobjc
main.m: In function `main':
main.m:12: warning: `Forwarder' does not respond to `hello'
$
</pre>
<p>The compiler is reporting the point made earlier, that <tt>Forwarder</tt> does not respond to hello messages. In this circumstance, it is safe to ignore the warning since forwarding was implemented. Running the program produces this output:</p>
<pre>
$ ./a.out
Recipient says hello!
</pre>
<h3><span class="mw-headline" id="Categories">Categories</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=14" title="Edit section: Categories">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>During the design of Objective-C, one of the main concerns was the maintainability of large code bases. Experience from the <a href="Structured_programming.html" title="Structured programming">structured programming</a> world had shown that one of the main ways to improve code was to break it down into smaller pieces. Objective-C borrowed and extended the concept of <i>categories</i> from Smalltalk implementations to help with this process.<sup id="cite_ref-12" class="reference"><a href="#cite_note-12"><span>[</span>12<span>]</span></a></sup></p>
<p>Furthermore, the methods within a category are added to a class at <a href="Run_time_(program_lifecycle_phase).html" title="Run time (program lifecycle phase)">run-time</a>. Thus, categories permit the programmer to add methods to an existing class without the need to recompile that class or even have access to its source code. For example, if a system does not contain a <a href="Spell_checker.html" title="Spell checker">spell checker</a> in its String implementation, it could be added without modifying the String source code.</p>
<p>Methods within categories become indistinguishable from the methods in a class when the program is run. A category has full access to all of the instance variables within the class, including private variables.</p>
<p>If a category declares a method with the same <a href="http://en.wikipedia.org/wiki/Method_signature" title="Method signature" class="mw-redirect">method signature</a> as an existing method in a class, the category’s method is adopted. Thus categories can not only add methods to a class, but also replace existing methods. This feature can be used to fix bugs in other classes by rewriting their methods, or to cause a global change to a class’s behavior within a program. If two categories have methods with the same name (not to be confused with method signature), it is undefined which category’s method is adopted.</p>
<p>Other languages have attempted to add this feature in a variety of ways. <a href="http://en.wikipedia.org/wiki/TOM_(object-oriented_programming_language)" title="TOM (object-oriented programming language)">TOM</a> took the Objective-C system a step further and allowed for the addition of variables as well. Other languages have used <a href="http://en.wikipedia.org/wiki/Prototype-based_programming" title="Prototype-based programming">prototype oriented</a> solutions instead, with the most notable being <a href="http://en.wikipedia.org/wiki/Self_(programming_language)" title="Self (programming language)">Self</a>.</p>
<p>The C# and Visual Basic.NET languages implement superficially similar functionality in the form of <a href="http://en.wikipedia.org/wiki/Extension_method" title="Extension method">extension methods</a>, but these do not have access to the private variables of the class.<sup id="cite_ref-13" class="reference"><a href="#cite_note-13"><span>[</span>13<span>]</span></a></sup> <a href="Ruby_(programming_language).html" title="Ruby (programming language)">Ruby</a> and several other dynamic programming languages refer to the technique as "<a href="http://en.wikipedia.org/wiki/Monkey_patch" title="Monkey patch">monkey patching</a>".</p>
<p><a href="http://en.wikipedia.org/wiki/Logtalk" title="Logtalk">Logtalk</a> implements a concept of categories (as first-class entities) that subsumes Objective-C categories functionality (Logtalk categories can also be used as fine-grained units of composition when defining e.g. new classes or prototypes; in particular, a Logtalk category can be virtually imported by any number of classes and prototypes).</p>
<h4><span class="mw-headline" id="Example_usage_of_categories">Example usage of categories</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=15" title="Edit section: Example usage of categories">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>This example builds up an <tt>Integer</tt> class, by defining first a basic class with only <a href="http://en.wikipedia.org/wiki/Method_(computer_science)" title="Method (computer science)" class="mw-redirect">accessor methods</a> implemented, and adding two categories, <tt>Arithmetic</tt> and <tt>Display</tt>, which extend the basic class. While categories can access the base class’ private data members, it is often good practice to access these private data members through the accessor methods, which helps keep categories more independent from the base class. This is one typical usage of categories—the other is to use categories to add or replace certain methods in the base class (however it is not regarded as good practice to use categories for subclass overriding, also known as <a href="http://en.wikipedia.org/wiki/Monkey_patch" title="Monkey patch">monkey patching</a>). By convention files containing categories that extend base classes will take the name <u>BaseClass+ExtensionClass.h</u>.</p>
<dl>
<dt><i>Integer.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import &lt;objc/Object.h&gt;</span>
 
<span class="kw1">@interface</span> Integer <span class="sy0">:</span> Object <span class="br0">{</span>
 <span class="kw4">int</span> integer;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> integer;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> integer<span class="sy0">:</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> _integer;
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Integer.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
 
<span class="kw1">@implementation</span> Integer
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> integer <span class="br0">{</span>
 <span class="kw1">return</span> integer;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> integer<span class="sy0">:</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> _integer <span class="br0">{</span>
 integer <span class="sy0">=</span> _integer;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Integer+Arithmetic.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
 
<span class="kw1">@interface</span> Integer <span class="br0">(</span>Arithmetic<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> add<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> addend;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> sub<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> subtrahend;
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Integer+Arithmetic.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer+Arithmetic.h"</span>
 
<span class="kw1">@implementation</span> Integer <span class="br0">(</span>Arithmetic<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> add<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> addend <span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>self integer<span class="sy0">:</span> <span class="br0">[</span>self integer<span class="br0">]</span> <span class="sy0">+</span> <span class="br0">[</span>addend integer<span class="br0">]</span><span class="br0">]</span>;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> sub<span class="sy0">:</span> <span class="br0">(</span>Integer <span class="sy0">*</span><span class="br0">)</span> subtrahend <span class="br0">{</span>
 <span class="kw1">return</span> <span class="br0">[</span>self integer<span class="sy0">:</span> <span class="br0">[</span>self integer<span class="br0">]</span> <span class="sy0">-</span> <span class="br0">[</span>subtrahend integer<span class="br0">]</span><span class="br0">]</span>;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Integer+Display.h</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
 
<span class="kw1">@interface</span> Integer <span class="br0">(</span>Display<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showstars;
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showint;
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>Integer+Display.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer+Display.h"</span>
 
<span class="kw1">@implementation</span> Integer <span class="br0">(</span>Display<span class="br0">)</span>
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showstars <span class="br0">{</span>
 <span class="kw4">int</span> i, x <span class="sy0">=</span> <span class="br0">[</span>self integer<span class="br0">]</span>;
 <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span>; i &lt; x; i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"*"</span><span class="br0">)</span>;
 <span class="br0">}</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"<span class="es0">\n</span>"</span><span class="br0">)</span>;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span> showint <span class="br0">{</span>
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es0">\n</span>"</span>, <span class="br0">[</span>self integer<span class="br0">]</span><span class="br0">)</span>;
 
 <span class="kw1">return</span> self;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre></div>
</div>
<dl>
<dt><i>main.m</i></dt>
</dl>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1"># import "Integer.h"</span>
<span class="co1"># import "Integer+Arithmetic.h"</span>
<span class="co1"># import "Integer+Display.h"</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
 Integer <span class="sy0">*</span>num1 <span class="sy0">=</span> <span class="br0">[</span>Integer new<span class="br0">]</span>, <span class="sy0">*</span>num2 <span class="sy0">=</span> <span class="br0">[</span>Integer new<span class="br0">]</span>;
 <span class="kw4">int</span> x;
 
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Enter an integer: "</span><span class="br0">)</span>;
 <span class="kw3">scanf</span><span class="br0">(</span><span class="st0">"%d"</span>, <span class="sy0">&amp;</span>x<span class="br0">)</span>;
 
 <span class="br0">[</span>num1 integer<span class="sy0">:</span>x<span class="br0">]</span>;
 <span class="br0">[</span>num1 showstars<span class="br0">]</span>;
 
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Enter an integer: "</span><span class="br0">)</span>;
 <span class="kw3">scanf</span><span class="br0">(</span><span class="st0">"%d"</span>, <span class="sy0">&amp;</span>x<span class="br0">)</span>;
 
 <span class="br0">[</span>num2 integer<span class="sy0">:</span>x<span class="br0">]</span>;
 <span class="br0">[</span>num2 showstars<span class="br0">]</span>;
 
 <span class="br0">[</span>num1 add<span class="sy0">:</span>num2<span class="br0">]</span>;
 <span class="br0">[</span>num1 showint<span class="br0">]</span>;
 
 <span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Notes_2">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=16" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Compilation is performed, for example, by:</p>
<pre>
gcc -x objective-c main.m Integer.m Integer+Arithmetic.m Integer+Display.m -lobjc
</pre>
<p>One can experiment by omitting the <tt>#import "Integer+Arithmetic.h"</tt> and <tt>[num1 add:num2]</tt> lines and omit <tt>Integer+Arithmetic.m</tt> in compilation. The program will still run. This means that it is possible to "mix-and-match" added categories if necessary; if one does not need to have some capability provided in a category, one can simply not compile it in.</p>
<h3><span class="mw-headline" id="Posing">Posing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=17" title="Edit section: Posing">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C permits a class to wholly replace another class within a program. The replacing class is said to "pose as" the target class.</p>
<p>Note: Class posing was declared deprecated with <a href="http://en.wikipedia.org/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5" class="mw-redirect">Mac OS X v10.5</a>, and is unavailable in the 64-bit runtime.</p>
<p>For the versions still supporting posing, all messages sent to the target class are instead received by the posing class. There are several restrictions:</p>
<ul>
<li>A class may only pose as one of its direct or indirect superclasses.</li>
<li>The posing class must not define any new instance variables that are absent from the target class (though it may define or override methods).</li>
<li>The target class may not have received any messages prior to the posing.</li>
</ul>
<p>Posing, similarly with categories, allows global augmentation of existing classes. Posing permits two features absent from categories:</p>
<ul>
<li>A posing class can call overridden methods through super, thus incorporating the implementation of the target class.</li>
<li>A posing class can override methods defined in categories.</li>
</ul>
<p>For example,</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> CustomNSApplication <span class="sy0">:</span> <span class="kw7">NSApplication</span>
<span class="kw1">@end</span>
 
<span class="kw1">@implementation</span> CustomNSApplication
<span class="sy0">-</span> <span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> setMainMenu<span class="sy0">:</span> <span class="br0">(</span><span class="kw7">NSMenu</span><span class="sy0">*</span><span class="br0">)</span> menu <span class="br0">{</span>
 <span class="co2">// do something with menu</span>
<span class="br0">}</span>
<span class="kw1">@end</span>
 
class_poseAs <span class="br0">(</span><span class="br0">[</span>CustomNSApplication class<span class="br0">]</span>, <span class="br0">[</span><span class="kw7">NSApplication</span> class<span class="br0">]</span><span class="br0">)</span>;
</pre></div>
</div>
<p>This intercepts every invocation of setMainMenu to NSApplication.</p>
<h3><span class="mw-headline" id=".23import">#import</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=18" title="Edit section: #import">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In the C language, the <code>#include</code> pre-compile directive always causes a file's contents to be inserted into the source at that point. Objective-C has the equivalent <code>#import</code> directive except each file is included only once per compilation unit, obviating the need for <a href="http://en.wikipedia.org/wiki/Include_guard" title="Include guard">include guards</a>.</p>
<h2><span class="mw-headline" id="Other_features">Other features</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=19" title="Edit section: Other features">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C's features often allow for flexible, and often easy, solutions to programming issues.</p>
<ul>
<li>Delegating methods to other objects and <a href="http://en.wikipedia.org/wiki/Remote_procedure_call" title="Remote procedure call">remote invocation</a> can be easily implemented using categories and message forwarding.</li>
<li><a href="http://en.wikipedia.org/wiki/Pointer_swizzling" title="Pointer swizzling">Swizzling</a> of the <var>isa</var> pointer allows for classes to change at runtime. Typically used for <a href="http://en.wikipedia.org/wiki/Debugging" title="Debugging">debugging</a> where freed objects are swizzled into zombie objects whose only purpose is to report an error when someone calls them. Swizzling was also used in <a href="http://en.wikipedia.org/wiki/Enterprise_Objects_Framework" title="Enterprise Objects Framework">Enterprise Objects Framework</a> to create database faults. Swizzling is used today by Apple’s Foundation Framework to implement <a href="http://en.wikipedia.org/w/index.php?title=Key-Value_Observing&amp;action=edit&amp;redlink=1" class="new" title="Key-Value Observing (page does not exist)">Key-Value Observing</a>.</li>
</ul>
<h2><span class="mw-headline" id="Language_variants">Language variants</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=20" title="Edit section: Language variants">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Objective-C.2B.2B">Objective-C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=21" title="Edit section: Objective-C++">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Objective-C++ is a language variant accepted by the front-end to the <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GNU Compiler Collection</a> and <a href="Clang.html" title="Clang">Clang</a>, which can compile source files that use a combination of C++ and Objective-C syntax. Objective-C++ adds to C++ the extensions that Objective-C adds to C. As nothing is done to unify the semantics behind the various language features, certain restrictions apply:</p>
<ul>
<li>A C++ class cannot derive from an Objective-C class and vice versa.</li>
<li>C++ namespaces cannot be declared inside an Objective-C declaration.</li>
<li>Objective-C declarations may appear only in global scope, not inside a C++ namespace</li>
<li>Objective-C classes cannot have instance variables of C++ classes that do not have a default constructor or that have one or more virtual methods,<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (November 2013)">citation needed</span></a></i>]</sup> but pointers to C++ objects can be used as instance variables without restriction (allocate them with new in the -init method).</li>
<li>C++ "by value" semantics cannot be applied to Objective-C objects, which are only accessible through pointers.</li>
<li>An Objective-C declaration cannot be within a C++ template declaration and vice versa. However, Objective-C types, (e.g., Classname *) can be used as C++ template parameters.</li>
<li>Objective-C and C++ exception handling is distinct; the handlers of each cannot handle exceptions of the other type. This is mitigated in recent runtimes as Objective-C exceptions are either replaced by C++ exceptions completely (Apple runtime), or partly when Objective-C++ library is linked (GNUstep libobjc2).</li>
<li>Care must be taken since the destructor calling conventions of Objective-C and C++’s exception run-time models do not match (i.e., a C++ destructor will not be called when an Objective-C exception exits the C++ object’s scope). The new 64-bit runtime resolves this by introducing interoperability with C++ exceptions in this sense.<sup id="cite_ref-14" class="reference"><a href="#cite_note-14"><span>[</span>14<span>]</span></a></sup></li>
<li>Objective-C blocks and C++11 lambdas are distinct entities, however a block is transparently generated on Mac OS X when passing a lambda where a block is expected.<sup id="cite_ref-15" class="reference"><a href="#cite_note-15"><span>[</span>15<span>]</span></a></sup></li>
</ul>
<h3><span class="mw-headline" id="Objective-C_2.0">Objective-C 2.0</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=22" title="Edit section: Objective-C 2.0">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>At the 2006 <a href="http://en.wikipedia.org/wiki/Worldwide_Developers_Conference" title="Worldwide Developers Conference" class="mw-redirect">Worldwide Developers Conference</a>, Apple announced the release of "Objective-C 2.0," a revision of the Objective-C language to include "modern garbage collection, syntax enhancements,<sup id="cite_ref-16" class="reference"><a href="#cite_note-16"><span>[</span>16<span>]</span></a></sup> runtime performance improvements,<sup id="cite_ref-17" class="reference"><a href="#cite_note-17"><span>[</span>17<span>]</span></a></sup> and 64-bit support". <a href="http://en.wikipedia.org/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5" class="mw-redirect">Mac OS X v10.5</a>, released in October 2007, included an Objective-C 2.0 compiler. <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC 4.6</a> supports many new Objective-C features, such as declared and synthesized properties, dot syntax, fast enumeration, optional protocol methods, method/protocol/class attributes, class extensions and a new GNUnn Objective-C runtime API.<sup id="cite_ref-18" class="reference"><a href="#cite_note-18"><span>[</span>18<span>]</span></a></sup></p>
<h4><span class="mw-headline" id="Garbage_collection">Garbage collection</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=23" title="Edit section: Garbage collection">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Objective-C 2.0 provided an optional conservative, generational <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collector</a>. When run in <a href="http://en.wikipedia.org/wiki/Backwards-compatible" title="Backwards-compatible" class="mw-redirect">backwards-compatible</a> mode, the runtime turned <a href="http://en.wikipedia.org/wiki/Reference_counting" title="Reference counting">reference counting</a> operations such as "retain" and "release" into <a href="http://en.wikipedia.org/wiki/No-op" title="No-op" class="mw-redirect">no-ops</a>. All objects were subject to garbage collection when garbage collection was enabled. Regular C pointers could be qualified with "__strong" to also trigger the underlying write-barrier compiler intercepts and thus participate in garbage collection.<sup id="cite_ref-19" class="reference"><a href="#cite_note-19"><span>[</span>19<span>]</span></a></sup> A zero-ing weak subsystem was also provided such that pointers marked as "__weak" are set to zero when the object (or more simply, GC memory) is collected. The garbage collector did not exist on the iOS implementation of Objective-C 2.0.<sup id="cite_ref-20" class="reference"><a href="#cite_note-20"><span>[</span>20<span>]</span></a></sup> Garbage collection in Objective-C ran on a low-priority background thread, and can halt on user events, with the intention of keeping the user experience responsive.<sup id="cite_ref-21" class="reference"><a href="#cite_note-21"><span>[</span>21<span>]</span></a></sup></p>
<p>Garbage collection was never made available in iOS due to performance concerns. It was deprecated in OS X v10.8 in favour of <a href="http://en.wikipedia.org/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a> (ARC) and is scheduled to be removed in a future version of OS X.<sup id="cite_ref-22" class="reference"><a href="#cite_note-22"><span>[</span>22<span>]</span></a></sup></p>
<h4><span class="mw-headline" id="Properties">Properties</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=24" title="Edit section: Properties">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Objective-C 2.0 introduces a new syntax to declare instance variables as <a href="http://en.wikipedia.org/wiki/Property_(programming)" title="Property (programming)">properties</a>, with optional attributes to configure the generation of accessor methods. Properties are, in a sense, public instance variables; that is, declaring an instance variable as a property provides external classes with access (possibly limited, e.g. read only) to that property. A property may be declared as "readonly", and may be provided with storage semantics such as "assign", "copy" or "retain". By default, properties are considered atomic, which results in a lock preventing multiple threads from accessing them at the same time. A property can be declared as "nonatomic", which removes this lock.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@interface</span> Person <span class="sy0">:</span> <span class="kw5">NSObject</span> <span class="br0">{</span>
 <span class="kw1">@public</span>
 <span class="kw5">NSString</span> <span class="sy0">*</span>name;
 <span class="kw1">@private</span>
 <span class="kw4">int</span> age;
<span class="br0">}</span>
 
<span class="kw1">@property</span><span class="br0">(</span>copy<span class="br0">)</span> <span class="kw5">NSString</span> <span class="sy0">*</span>name;
<span class="kw1">@property</span><span class="br0">(</span>readonly<span class="br0">)</span> <span class="kw4">int</span> age;
 
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>initWithAge<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>age;
<span class="kw1">@end</span>
</pre></div>
</div>
<p>Properties are implemented by way of the @synthesize keyword, which generates getter (and setter, if not read-only) methods according to the property declaration. Alternatively, the getter and setter methods must be implemented explicitly, or the @dynamic keyword can be used to indicate that accessor methods will be provided by other means. When compiled using clang 3.1 or higher, all properties which are not explicitly declared with <code>@dynamic</code>, marked <code>readonly</code> or have complete user-implemented getter and setter will be automatically implicitly <code>@synthesize</code>'d.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw1">@implementation</span> Person
<span class="kw1">@synthesize</span> name;
 
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">id</span><span class="br0">)</span>initWithAge<span class="sy0">:</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>initAge <span class="br0">{</span>
 self <span class="sy0">=</span> <span class="br0">[</span>super init<span class="br0">]</span>;
 <span class="kw1">if</span> <span class="br0">(</span>self<span class="br0">)</span> <span class="br0">{</span>
 age <span class="sy0">=</span> initAge; <span class="co2">// NOTE: direct instance variable assignment, not property setter</span>
 <span class="br0">}</span>
 <span class="kw1">return</span> self;
<span class="br0">}</span>
 
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span>age <span class="br0">{</span>
 <span class="kw1">return</span> age;
<span class="br0">}</span>
<span class="kw1">@end</span>
</pre></div>
</div>
<p>Properties can be accessed using the traditional message passing syntax, dot notation, or, in Key-Value Coding, by name via the "valueForKey:"/"setValue:forKey:" methods.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
Person <span class="sy0">*</span>aPerson <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span>Person alloc<span class="br0">]</span> initWithAge<span class="sy0">:</span> <span class="nu0">53</span><span class="br0">]</span>;
aPerson.name <span class="sy0">=</span> <span class="co3">@</span><span class="st0">"Steve"</span>; <span class="co2">// NOTE: dot notation, uses synthesized setter,</span>
 <span class="co2">// equivalent to [aPerson setName: @"Steve"];</span>
NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"Access by message (%@), dot notation(%@),
property name(%@) and direct instance variable access (%@)"</span>,
 <span class="br0">[</span>aPerson name<span class="br0">]</span>, aPerson.name, <span class="br0">[</span>aPerson valueForKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"name"</span><span class="br0">]</span>, aPerson<span class="sy0">-</span>&gt;name<span class="br0">)</span>;
</pre></div>
</div>
<p>In order to use dot notation to invoke property accessors within an instance method, the "self" keyword should be used:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="sy0">-</span><span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> introduceMyselfWithProperties<span class="sy0">:</span><span class="br0">(</span><span class="kw4">BOOL</span><span class="br0">)</span>useGetter <span class="br0">{</span>
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"Hi, my name is %@."</span>, <span class="br0">(</span>useGetter ? self.name <span class="sy0">:</span> name<span class="br0">)</span><span class="br0">)</span>;
<span class="co2">// NOTE: getter vs. ivar access</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>A class or protocol's properties may be dynamically <a href="http://en.wikipedia.org/wiki/Type_introspection" title="Type introspection">introspected</a>.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw4">int</span> i;
<span class="kw4">int</span> propertyCount <span class="sy0">=</span> <span class="nu0">0</span>;
objc_property_t <span class="sy0">*</span>propertyList <span class="sy0">=</span> class_copyPropertyList<span class="br0">(</span><span class="br0">[</span>aPerson class<span class="br0">]</span>, <span class="sy0">&amp;</span>propertyCount<span class="br0">)</span>;
 
<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span>; i &lt; propertyCount; i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
 objc_property_t <span class="sy0">*</span>thisProperty <span class="sy0">=</span> propertyList <span class="sy0">+</span> i;
 <span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> propertyName <span class="sy0">=</span> property_getName<span class="br0">(</span><span class="sy0">*</span>thisProperty<span class="br0">)</span>;
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"Person has a property: '%s'"</span>, propertyName<span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Non-fragile_instance_variables">Non-fragile instance variables</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=25" title="Edit section: Non-fragile instance variables">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Objective-C 2.0 provides non-fragile instance variables where supported by the runtime (i.e. when building 64-bit Mac OS X code as well as all iOS code). Under the modern runtime, an extra layer of indirection is added to instance variable access, allowing the dynamic linker to adjust instance layout at runtime. This feature allows for two important improvements to Objective-C code:</p>
<ul>
<li>This eliminates the <a href="http://en.wikipedia.org/wiki/Fragile_binary_interface_problem" title="Fragile binary interface problem">fragile binary interface problem</a>—superclasses can change sizes without affecting binary compatibility.</li>
<li>This allows instance variables that provide the backing for properties to be synthesized at runtime without them being declared in the class’ interface.</li>
</ul>
<h4><span class="mw-headline" id="Fast_enumeration">Fast enumeration</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=26" title="Edit section: Fast enumeration">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Instead of using an NSEnumerator object or indices to iterate through a collection, Objective-C 2.0 offers the fast enumeration syntax. In Objective-C 2.0, the following loops are functionally equivalent, but have different performance characteristics.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co2">// Using NSEnumerator</span>
<span class="kw5">NSEnumerator</span> <span class="sy0">*</span>enumerator <span class="sy0">=</span> <span class="br0">[</span>thePeople objectEnumerator<span class="br0">]</span>;
Person <span class="sy0">*</span>p;
 
<span class="kw1">while</span> <span class="br0">(</span><span class="br0">(</span>p <span class="sy0">=</span> <span class="br0">[</span>enumerator nextObject<span class="br0">]</span><span class="br0">)</span> <span class="sy0">!=</span> <span class="kw2">nil</span><span class="br0">)</span> <span class="br0">{</span>
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p name<span class="br0">]</span>, <span class="br0">[</span>p age<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co2">// Using indexes</span>
<span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span>; i &lt; <span class="br0">[</span>thePeople count<span class="br0">]</span>; i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span>
 Person <span class="sy0">*</span>p <span class="sy0">=</span> <span class="br0">[</span>thePeople objectAtIndex<span class="sy0">:</span>i<span class="br0">]</span>;
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p name<span class="br0">]</span>, <span class="br0">[</span>p age<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
</div>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co2">// Using fast enumeration</span>
<span class="kw1">for</span> <span class="br0">(</span>Person <span class="sy0">*</span>p <span class="kw1">in</span> thePeople<span class="br0">)</span> <span class="br0">{</span>
 NSLog<span class="br0">(</span><span class="co3">@</span><span class="st0">"%@ is %i years old."</span>, <span class="br0">[</span>p name<span class="br0">]</span>, <span class="br0">[</span>p age<span class="br0">]</span><span class="br0">)</span>;
<span class="br0">}</span>
</pre></div>
</div>
<p>Fast enumeration generates more efficient code than standard enumeration because method calls to enumerate over objects are replaced by pointer arithmetic using the NSFastEnumeration protocol.<sup id="cite_ref-23" class="reference"><a href="#cite_note-23"><span>[</span>23<span>]</span></a></sup></p>
<h4><span class="mw-headline" id="Class_Extensions">Class Extensions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=27" title="Edit section: Class Extensions">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>A class extension has the same syntax as a category declaration with no category name, and the methods and properties declared in it are added directly to the main class. It is mostly used as an alternative to a category to add methods to a class without advertising them in the public headers, with the advantage that for class extensions the compiler checks that all the privately declared methods are actually implemented.<sup id="cite_ref-24" class="reference"><a href="#cite_note-24"><span>[</span>24<span>]</span></a></sup></p>
<h4><span class="mw-headline" id="Implications_for_Cocoa_development">Implications for Cocoa development</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=28" title="Edit section: Implications for Cocoa development">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<table class="metadata plainlinks ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <span class="hide-when-compact">Please help improve this section by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(November 2012)</i></small></span></td>
</tr>
</table>
<p>All Objective-C applications developed for Mac OS X that make use of the above improvements for Objective-C 2.0 are incompatible with all operating systems prior to 10.5 (Leopard). Since fast enumeration does not generate exactly the same binaries as standard enumeration, its use will cause an application to crash on OS X version 10.4 or earlier.</p>
<h3><span class="mw-headline" id="Blocks">Blocks</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=29" title="Edit section: Blocks">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Blocks_(C_language_extension)" title="Blocks (C language extension)">Blocks (C language extension)</a></div>
<p>Blocks is a nonstandard extension for Objective-C (as well as <a href="C_(programming_language).html" title="C (programming language)">C</a> and <a href="C%2b%2b.html" title="C++">C++</a>) that uses special syntax to create <a href="http://en.wikipedia.org/wiki/Closure_(programming)" title="Closure (programming)" class="mw-redirect">closures</a>. Blocks are only supported in <a href="http://en.wikipedia.org/wiki/Mac_OS_X_Snow_Leopard" title="Mac OS X Snow Leopard">Mac OS X 10.6 "Snow Leopard"</a> or later and <a href="http://en.wikipedia.org/wiki/IOS_4" title="IOS 4">iOS 4</a> or later, as well as GNUstep with libobjc2 1.7 and compiling with <a href="Clang.html" title="Clang">clang</a> 3.1 or later.<sup id="cite_ref-Blocks_requirements_25-0" class="reference"><a href="#cite_note-Blocks_requirements-25"><span>[</span>25<span>]</span></a></sup></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="co1">#include &lt;stdio.h&gt;</span>
<span class="co1">#include &lt;Block.h&gt;</span>
<span class="kw4">typedef</span> <span class="kw4">int</span> <span class="br0">(</span><span class="sy0">^</span>IntBlock<span class="br0">)</span><span class="br0">(</span><span class="br0">)</span>;
 
IntBlock MakeCounter<span class="br0">(</span><span class="kw4">int</span> start, <span class="kw4">int</span> increment<span class="br0">)</span> <span class="br0">{</span>
	__block <span class="kw4">int</span> i <span class="sy0">=</span> start;
 
	<span class="kw1">return</span> Block_copy<span class="br0">(</span> <span class="sy0">^</span> <span class="br0">{</span>
		<span class="kw4">int</span> ret <span class="sy0">=</span> i;
		i <span class="sy0">+=</span> increment;
		<span class="kw1">return</span> ret;
	<span class="br0">}</span><span class="br0">)</span>;
 
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
	IntBlock mycounter <span class="sy0">=</span> MakeCounter<span class="br0">(</span><span class="nu0">5</span>, <span class="nu0">2</span><span class="br0">)</span>;
	<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"First call: %d<span class="es0">\n</span>"</span>, mycounter<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
	<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Second call: %d<span class="es0">\n</span>"</span>, mycounter<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
	<span class="kw3">printf</span><span class="br0">(</span><span class="st0">"Third call: %d<span class="es0">\n</span>"</span>, mycounter<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>;
 
	<span class="coMULTI">/* because it was copied, it must also be released */</span>
	Block_release<span class="br0">(</span>mycounter<span class="br0">)</span>;
 
	<span class="kw1">return</span> <span class="nu0">0</span>;
<span class="br0">}</span>
<span class="coMULTI">/* Output:
	First call: 5
	Second call: 7
	Third call: 9
*/</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="Modern_Objective-C">Modern Objective-C</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=30" title="Edit section: Modern Objective-C">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h4><span class="mw-headline" id="Automatic_Reference_Counting">Automatic Reference Counting</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=31" title="Edit section: Automatic Reference Counting">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a></div>
<p>Automatic Reference Counting (ARC) is a compile-time feature that eliminates the need for programmers to manually manage retain counts using <code>retain</code> and <code>release</code>.<sup id="cite_ref-Transitioning_to_ARC_26-0" class="reference"><a href="#cite_note-Transitioning_to_ARC-26"><span>[</span>26<span>]</span></a></sup> Unlike <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>, which occurs at run time, ARC eliminates the overhead of a separate process managing retain counts. ARC and manual memory management are not mutually exclusive; programmers can continue to use non-ARC code in ARC-enabled projects by disabling ARC for individual code files. XCode can also attempt to automatically upgrade a project to ARC.</p>
<h4><span class="mw-headline" id="Literals">Literals</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=32" title="Edit section: Literals">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>NeXT and Apple Obj-C runtimes have long included a short-form way to create new strings, using the literal syntax <code>@"a new string"</code>. Using this format saves the programmer from having to use the longer <code>initWithString</code> or similar methods when doing certain operations.</p>
<p>When using Apple <a href="http://en.wikipedia.org/wiki/LLVM" title="LLVM">LLVM</a> compiler 4.0 or later, arrays, dictionaries, and numbers (<code>NSArray</code>, <code>NSDictionary</code>, <code>NSNumber</code> classes) can also be created using literal syntax instead of methods.<sup id="cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_27-0" class="reference"><a href="#cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-27"><span>[</span>27<span>]</span></a></sup> Literal syntax uses the <code>@</code> symbol combined with <code>[]</code>, <code>{}</code>, <code>()</code>, to create the classes mentioned above, respectively.<sup id="cite_ref-ObjCLiterals_28-0" class="reference"><a href="#cite_note-ObjCLiterals-28"><span>[</span>28<span>]</span></a></sup></p>
<p>Example without literals:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw5">NSArray</span> <span class="sy0">*</span>myArray <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSArray</span> arrayWithObjects<span class="sy0">:</span>object1,object2,object3,<span class="kw2">nil</span><span class="br0">]</span>;
<span class="kw5">NSDictionary</span> <span class="sy0">*</span>myDictionary1 <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSDictionary</span> dictionaryWithObject<span class="sy0">:</span>someObject forKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
<span class="kw5">NSDictionary</span> <span class="sy0">*</span>myDictionary2 <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSDictionary</span> dictionaryWithObjectsAndKeys<span class="sy0">:</span>object1, key1, object2, key2, <span class="kw2">nil</span><span class="br0">]</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>myNumber <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSNumber</span> numberWithInt<span class="sy0">:</span>myInt<span class="br0">]</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>mySumNumber <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSNumber</span> numberWithInt<span class="sy0">:</span><span class="br0">(</span><span class="nu0">2</span> <span class="sy0">+</span> <span class="nu0">3</span><span class="br0">)</span><span class="br0">]</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>myBoolNumber <span class="sy0">=</span> <span class="br0">[</span><span class="kw5">NSNumber</span> numberWithBool<span class="sy0">:</span><span class="kw2">YES</span><span class="br0">]</span>;
</pre></div>
</div>
<p>Example with literals:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw5">NSArray</span> <span class="sy0">*</span>myArray <span class="sy0">=</span> @<span class="br0">[</span> object1, object2, object3 <span class="br0">]</span>;
<span class="kw5">NSDictionary</span> <span class="sy0">*</span>myDictionary1 <span class="sy0">=</span> @<span class="br0">{</span> <span class="co3">@</span><span class="st0">"key"</span> <span class="sy0">:</span> someObject <span class="br0">}</span>;
<span class="kw5">NSDictionary</span> <span class="sy0">*</span>myDictionary2 <span class="sy0">=</span> @<span class="br0">{</span> key1<span class="sy0">:</span> object1, key2<span class="sy0">:</span> object2 <span class="br0">}</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>myNumber <span class="sy0">=</span> @<span class="br0">(</span>myInt<span class="br0">)</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>mySumNumber <span class="sy0">=</span> @<span class="br0">(</span><span class="nu0">2</span><span class="sy0">+</span><span class="nu0">3</span><span class="br0">)</span>;
<span class="kw5">NSNumber</span> <span class="sy0">*</span>myBoolNumber <span class="sy0">=</span> @<span class="kw2">YES</span>;
</pre></div>
</div>
<p>However, different from string literals, which compile to actual constants in the executable, these literals compile to code equivalent to the above method calls. In particular, under manually reference-counted memory management, these objects are autoreleased, which requires additional care when e.g. used with function-static variables or other kinds of globals.</p>
<h4><span class="mw-headline" id="Subscripting">Subscripting</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=33" title="Edit section: Subscripting">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>When using Apple <a href="http://en.wikipedia.org/wiki/LLVM" title="LLVM">LLVM</a> compiler 4.0 or later, arrays and dictionaries (<code>NSArray</code> and <code>NSDictionary</code> classes) can be manipulated using subscripting.<sup id="cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_27-1" class="reference"><a href="#cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-27"><span>[</span>27<span>]</span></a></sup> Subscripting can be used to retrieve values from indexes (array) or keys (dictionary), and with mutable objects, can also be used to set objects to indexes or keys. In code, subscripting is represented using brackets <code>[ ]</code>.<sup id="cite_ref-ObjCLiterals_28-1" class="reference"><a href="#cite_note-ObjCLiterals-28"><span>[</span>28<span>]</span></a></sup></p>
<p>Example without subscripting:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw4">id</span> object1 <span class="sy0">=</span> <span class="br0">[</span>someArray objectAtIndex<span class="sy0">:</span><span class="nu0">0</span><span class="br0">]</span>;
<span class="kw4">id</span> object2 <span class="sy0">=</span> <span class="br0">[</span>someDictionary objectForKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
<span class="br0">[</span>someMutableArray replaceObjectAtIndex<span class="sy0">:</span><span class="nu0">0</span> withObject<span class="sy0">:</span>object3<span class="br0">]</span>;
<span class="br0">[</span>someMutableDictionary setObject<span class="sy0">:</span>object4 forKey<span class="sy0">:</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
</pre></div>
</div>
<p>Example with subscripting:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="objc source-objc">
<pre class="de1">
<span class="kw4">id</span> object1 <span class="sy0">=</span> someArray<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>;
<span class="kw4">id</span> object2 <span class="sy0">=</span> someDictionary<span class="br0">[</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span>;
someMutableArray<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> object3;
someMutableDictionary<span class="br0">[</span><span class="co3">@</span><span class="st0">"key"</span><span class="br0">]</span> <span class="sy0">=</span> object4;
</pre></div>
</div>
<h3><span class="mw-headline" id=".22Modern.22_Objective-C_syntax_.281997.29">"Modern" Objective-C syntax (1997)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=34" title="Edit section: &quot;Modern&quot; Objective-C syntax (1997)">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>After the purchase of NeXT by Apple, attempts were made to make the language more familiar to existing programmers. One of these attempts was the introduction of what was dubbed "Modern Syntax" for Objective-C at the time<sup id="cite_ref-29" class="reference"><a href="#cite_note-29"><span>[</span>29<span>]</span></a></sup> (as opposed to the current, "classic" syntax). There was no change in actual behaviour, this was merely an alternative syntax. Instead of writing a method invocation like</p>
<pre>
   object = [[Class alloc] init];
   [object firstLabel: param1 secondLabel: param2];
</pre>
<p>It was instead written as</p>
<pre>
   object = (Class.alloc).init;
   object.firstLabel ( param1, param2 );
</pre>
<p>Similarly, declarations went from the form</p>
<pre>
   -(void) firstLabel: (int)param1 secondLabel: (int)param2;
</pre>
<p>to</p>
<pre>
   -(void) firstLabel ( int param1, int param2 );
</pre>
<p>This "modern" syntax is no longer supported in current dialects of the Objective-C language.</p>
<h3><span class="mw-headline" id="Portable_Object_Compiler">Portable Object Compiler</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=35" title="Edit section: Portable Object Compiler">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Besides the <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a>/<a href="http://en.wikipedia.org/wiki/NeXT" title="NeXT">NeXT</a>/<a href="http://en.wikipedia.org/wiki/Apple_Inc." title="Apple Inc.">Apple</a> implementation, which added several extensions to the original <a href="http://en.wikipedia.org/wiki/Stepstone" title="Stepstone">Stepstone</a> implementation, another <a href="http://en.wikipedia.org/wiki/Free_and_open_source_software" title="Free and open source software" class="mw-redirect">free, open-source</a> Objective-C implementation called the Portable Object Compiler<sup id="cite_ref-30" class="reference"><a href="#cite_note-30"><span>[</span>30<span>]</span></a></sup> also exists. The set of extensions implemented by the Portable Object Compiler differs from the GCC/NeXT/Apple implementation; in particular, it includes <a href="Smalltalk.html" title="Smalltalk">Smalltalk</a>-like blocks for Objective-C, while it lacks protocols and categories, two features used extensively in OpenStep and its derivatives and relatives. Overall, POC represents an older, pre-NeXT stage in the language's evolution, roughly conformant to Brad Cox's 1991 book.</p>
<p>It also includes a runtime library called ObjectPak, which is based on Cox's original ICPak101 library (which in turn derives from the Smalltalk-80 class library), and is quite radically different from the OpenStep FoundationKit.</p>
<h3><span class="mw-headline" id="GEOS_Objective-C">GEOS Objective-C</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=36" title="Edit section: GEOS Objective-C">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The <a href="http://en.wikipedia.org/wiki/GEOS_(16-bit_operating_system)" title="GEOS (16-bit operating system)">PC GEOS</a> system used a programming language known as <b>GEOS Objective-C</b> or <b>goc</b>;<sup id="cite_ref-31" class="reference"><a href="#cite_note-31"><span>[</span>31<span>]</span></a></sup> despite the name similarity, the two languages are similar only in overall concept and the use of keywords prefixed with an @ sign.</p>
<h3><span class="mw-headline" id="Clang">Clang</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=37" title="Edit section: Clang">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The <a href="Clang.html" title="Clang">Clang</a> compiler suite, part of the <a href="http://en.wikipedia.org/wiki/LLVM" title="LLVM">LLVM</a> project, implements Objective-C as well as other languages.</p>
<h2><span class="mw-headline" id="Library_use">Library use</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=38" title="Edit section: Library use">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Objective-C today is often used in tandem with a fixed library of standard objects (often known as a "kit" or "framework"), such as <a href="http://en.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>, <a href="http://en.wikipedia.org/wiki/GNUstep" title="GNUstep">GNUstep</a> or <a href="http://en.wikipedia.org/w/index.php?title=ObjFW&amp;action=edit&amp;redlink=1" class="new" title="ObjFW (page does not exist)">ObjFW</a>. These libraries often come with the operating system: the GNUstep libraries often come with <a href="http://en.wikipedia.org/wiki/GNU/Linux" title="GNU/Linux" class="mw-redirect">GNU/Linux</a> based distributions and Cocoa comes with OS X. The programmer is not forced to inherit functionality from the existing base class (NSObject / OFObject). Objective-C allows for the declaration of new root classes that do not inherit any existing functionality. Originally, Objective-C based programming environments typically offered an Object class as the base class from which almost all other classes inherited. With the introduction of OpenStep, NeXT created a new base class named NSObject, which offered additional features over Object (an emphasis on using object references and reference counting instead of raw pointers, for example). Almost all classes in Cocoa inherit from NSObject.</p>
<p>Not only did the renaming serve to differentiate the new default behavior of classes within the OpenStep API, but it allowed code that used Object—the original base class used on NeXTSTEP (and, more or less, other Objective-C class libraries)—to co-exist in the same runtime with code that used NSObject (with some limitations). The introduction of the two letter prefix also became a simplistic form of namespaces, which Objective-C lacks. Using a prefix to create an informal packaging identifier became an informal coding standard in the Objective-C community, and continues to this day.</p>
<p>More recently, package managers have started appearing, such as <a href="http://en.wikipedia.org/wiki/CocoaPods" title="CocoaPods">CocoaPods</a>, which aims to be both a package manager and a repository of packages. A lot of open-source Objective-C code that was written in the last years can now be installed using CocoaPods.</p>
<h2><span class="mw-headline" id="Analysis_of_the_language">Analysis of the language</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=39" title="Edit section: Analysis of the language">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata plainlinks ambox ambox-content ambox-Refimprove" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>needs additional citations for <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>. <span class="hide-when-compact">Please help <a class="external text" href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit">improve this article</a> by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and removed.</span> <small><i>(December 2011)</i></small></span></td>
</tr>
</table>
<p>Objective-C implementations use a thin <a href="http://en.wikipedia.org/wiki/Run_time_system" title="Run time system" class="mw-redirect">runtime system</a> written in C, which adds little to the size of the application. In contrast, most object-oriented systems at the time that it was created used large <a href="http://en.wikipedia.org/wiki/Virtual_machine" title="Virtual machine">virtual machine</a> runtimes. Programs written in Objective-C tend to be not much larger than the size of their code and that of the libraries (which generally do not need to be included in the software distribution), in contrast to Smalltalk systems where a large amount of memory was used just to open a window. Objective-C applications tend to be larger than similar C or C++ applications because Objective-C dynamic typing does not allow methods to be stripped or inlined. Since the programmer has such freedom to delegate, forward calls, build selectors on the fly and pass them to the runtime system, the Objective-C compiler cannot assume it's safe to remove unused methods or to inline calls.</p>
<p>Likewise, the language can be implemented on top of existing C compilers (in <a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a>, first as a preprocessor, then as a module) rather than as a new compiler. This allows Objective-C to leverage the huge existing collection of C code, libraries, tools, etc. Existing C libraries can be wrapped in Objective-C <a href="http://en.wikipedia.org/wiki/Adapter_pattern" title="Adapter pattern">wrappers</a> to provide an OO-style interface. In this aspect, it is similar to <a href="http://en.wikipedia.org/wiki/GObject" title="GObject">GObject</a> library and <a href="Vala_(programming_language).html" title="Vala (programming language)">Vala</a> language, which are widely used in development of <a href="http://en.wikipedia.org/wiki/GTK" title="GTK" class="mw-redirect">GTK</a> applications.</p>
<p>All of these practical changes lowered the <a href="http://en.wikipedia.org/wiki/Barriers_to_entry" title="Barriers to entry">barrier to entry</a>, likely the biggest problem for the widespread acceptance of Smalltalk in the 1980s.</p>
<p>The first versions of Objective-C did not support <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a>. At the time this decision was a matter of some debate, and many people considered long "dead times" (when Smalltalk did collection) to render the entire system unusable. Some 3rd party implementations have added this feature (most notably GNUstep) and Apple has implemented it as of <a href="http://en.wikipedia.org/wiki/Mac_OS_X_v10.5" title="Mac OS X v10.5" class="mw-redirect">Mac OS X v10.5</a>.<sup id="cite_ref-32" class="reference"><a href="#cite_note-32"><span>[</span>32<span>]</span></a></sup> However in more recent versions of Mac OS X and iOS, garbage collection has been deprecated in favor of ARC (see below).</p>
<p>Another common criticism is that Objective-C does not have language support for <a href="http://en.wikipedia.org/wiki/Namespaces" title="Namespaces" class="mw-redirect">namespaces</a>. Instead, programmers are forced to add prefixes to their class names, which are traditionally shorter than namespace names and thus more prone to collisions. As of 2007, all Mac OS X classes and functions in the <a href="http://en.wikipedia.org/wiki/Cocoa_(software)" title="Cocoa (software)" class="mw-redirect">Cocoa</a> programming environment are prefixed with "NS" (e.g. NSObject, NSButton) to identify them as belonging to the Mac OS X or iOS core; the "NS" derives from the names of the classes as defined during the development of <a href="http://en.wikipedia.org/wiki/NeXTstep" title="NeXTstep" class="mw-redirect">NeXTstep</a>.</p>
<p>Since Objective-C is a strict superset of C, it does not treat C primitive types as <a href="http://en.wikipedia.org/wiki/First-class_object" title="First-class object" class="mw-redirect">first-class objects</a>.</p>
<p>Unlike <a href="C%2b%2b.html" title="C++">C++</a>, Objective-C does not support <a href="http://en.wikipedia.org/wiki/Operator_overloading" title="Operator overloading">operator overloading</a>. Also unlike C++, Objective-C allows an object to directly inherit only from one class (forbidding <a href="http://en.wikipedia.org/wiki/Multiple_inheritance" title="Multiple inheritance">multiple inheritance</a>). However, in most cases, categories and protocols may be used as an alternative way to achieve the same results.</p>
<p>Because Objective-C uses dynamic runtime typing and because all method calls are function calls (or, in some cases, syscalls), many common performance optimizations cannot be applied to Objective-C methods (for example: inlining, constant propagation, interprocedural optimizations, and scalar replacement of aggregates). This limits the performance of Objective-C abstractions relative to similar abstractions in languages such as C++ where such optimizations are possible.</p>
<p>Many programmers<sup class="noprint Inline-Template" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Avoid_weasel_words" title="Wikipedia:Avoid weasel words" class="mw-redirect"><span title="The material near this tag possibly uses too-vague attribution or weasel words. (June 2013)">who?</span></a></i>]</sup> dislike garbage collected languages because of the runtime performance tradeoffs. Apple introduced <a href="http://en.wikipedia.org/wiki/Automatic_Reference_Counting" title="Automatic Reference Counting">Automatic Reference Counting</a> <a rel="nofollow" class="external text" href="http://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">(ARC)</a> in 2011 as an alternative memory management mechanism. With ARC, the compiler inserts retain and release calls automatically into Objective-C code based on static code analysis. The automation relieves the programmer of having to write in memory management code. ARC also adds weak references to the Objective-C language.</p>
<h3><span class="mw-headline" id="Philosophical_differences_between_Objective-C_and_C.2B.2B">Philosophical differences between Objective-C and C++</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=40" title="Edit section: Philosophical differences between Objective-C and C++">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The design and implementation of <a href="C%2b%2b.html" title="C++">C++</a> and Objective-C represent fundamentally different approaches to extending C.</p>
<p>In addition to C’s style of procedural programming, C++ directly supports certain forms of <a href="Object-oriented_programming.html" title="Object-oriented programming">object-oriented programming</a>, <a href="Generic_programming.html" title="Generic programming">generic programming</a>, and <a href="http://en.wikipedia.org/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a>. C++ also comes with a large standard library that includes several <a href="http://en.wikipedia.org/wiki/Container_(data_structure)" title="Container (data structure)" class="mw-redirect">container classes</a>. Similarly, Objective-C adds <a href="http://en.wikipedia.org/wiki/Polymorphism_in_object-oriented_programming" title="Polymorphism in object-oriented programming" class="mw-redirect">object-oriented programming</a>, <a href="http://en.wikipedia.org/wiki/Dynamic_typing" title="Dynamic typing" class="mw-redirect">dynamic typing</a>, and <a href="http://en.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflection</a> to C. Objective-C does not provide a standard library <i>per se</i>, but in most places where Objective-C is used, it is used with an <a href="http://en.wikipedia.org/wiki/OpenStep" title="OpenStep">OpenStep</a>-like library such as <a href="http://en.wikipedia.org/wiki/OPENSTEP" title="OPENSTEP" class="mw-redirect">OPENSTEP</a>, <a href="http://en.wikipedia.org/wiki/Cocoa_(API)" title="Cocoa (API)">Cocoa</a>, or <a href="http://en.wikipedia.org/wiki/GNUstep" title="GNUstep">GNUstep</a>, which provides functionality similar to C++’s standard library.</p>
<p>One notable difference is that Objective-C provides runtime support for <a href="http://en.wikipedia.org/wiki/Reflection_(computer_science)" title="Reflection (computer science)" class="mw-redirect">reflective</a> features, whereas C++ adds only a small amount of runtime support to C. In Objective-C, an object can be queried about its own properties, e.g., whether it will respond to a certain message. In C++ this is not possible without the use of external libraries.</p>
<p>The use of reflection is part of the wider distinction between dynamic (run-time) features versus static (compile-time) features of a language. Although Objective-C and C++ each employ a mix of both features, Objective-C is decidedly geared toward run-time decisions while C++ is geared toward compile-time decisions. The tension between dynamic and static programming involves many of the classic trade-offs in programming: dynamic features add flexibility, static features add speed and type checking.</p>
<p>Generic programming and metaprogramming can be implemented in both languages using runtime polymorphism; in C++ this takes the form of virtual functions and runtime type identification, while Objective-C offers dynamic typing and reflection. Objective-C lacks compile-time polymorphism (generics) entirely, while C++ does support this via function overloading and <a href="http://en.wikipedia.org/wiki/Template_(C++)" title="Template (C++)">templates</a>.</p>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=41" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="C_(programming_language).html" title="C (programming language)">C (programming language)</a></li>
<li><a href="C%2b%2b.html" title="C++">C++</a></li>
<li><a href="Comparison_of_programming_languages.html" title="Comparison of programming languages">Comparison of programming languages</a></li>
<li><a href="Xcode.html" title="Xcode">Xcode</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=42" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist columns references-column-width" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; list-style-type: decimal;">
<ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><span class="citation web">Singh, Amit (December 2003). <a rel="nofollow" class="external text" href="http://osxbook.com/book/bonus/ancient/whatismacosx/history.html">"A Brief History of Mac OS X"</a>. Mac OS X Internals<span class="reference-accessdate">. Retrieved 11 June 2012</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Amit&amp;rft.aulast=Singh&amp;rft.au=Singh%2C+Amit&amp;rft.btitle=A+Brief+History+of+Mac+OS+X&amp;rft.date=December+2003&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fosxbook.com%2Fbook%2Fbonus%2Fancient%2Fwhatismacosx%2Fhistory.html&amp;rft.pub=Mac+OS+X+Internals&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Wired1-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-Wired1_2-0">^</a></b></span> <span class="reference-text"><span class="citation web">Garling, Caleb. <a rel="nofollow" class="external text" href="http://www.wired.com/wiredenterprise/2012/07/apple-objective-c/">"iPhone Coding Language Now World’s Third Most Popular"</a>. <a href="http://en.wikipedia.org/wiki/Wired_(magazine)" title="Wired (magazine)">Wired</a><span class="reference-accessdate">. Retrieved May 20, 2013</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Caleb&amp;rft.au=Garling%2C+Caleb&amp;rft.aulast=Garling&amp;rft.btitle=iPhone+Coding+Language+Now+World%E2%80%99s+Third+Most+Popular&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.wired.com%2Fwiredenterprise%2F2012%2F07%2Fapple-objective-c%2F&amp;rft.pub=Wired&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><span class="citation book">Wentk, Richard (2009). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=vBglDfsAjVQC&amp;pg=PT23&amp;dq=tom.love+objective.c+cocoa&amp;hl=en&amp;ei=TrFbTemfAo-0vgPiiK3UDA&amp;sa=X&amp;oi=book_result&amp;ct=book-preview-link&amp;resnum=1&amp;ved=0CCkQuwUwAA#v=onepage&amp;q=tom.love%20objective.c%20cocoa&amp;f=false"><i>Cocoa: Volume 5 of Developer Reference Apple Developer Series</i></a>. John Wiley and Sons,. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-470-49589-8" title="Special:BookSources/0-470-49589-8">0-470-49589-8</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.aufirst=Richard&amp;rft.aulast=Wentk&amp;rft.au=Wentk%2C+Richard&amp;rft.btitle=Cocoa%3A+Volume+5+of+Developer+Reference+Apple+Developer+Series&amp;rft.date=2009&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DvBglDfsAjVQC%26pg%3DPT23%26dq%3Dtom.love%2Bobjective.c%2Bcocoa%26hl%3Den%26ei%3DTrFbTemfAo-0vgPiiK3UDA%26sa%3DX%26oi%3Dbook_result%26ct%3Dbook-preview-link%26resnum%3D1%26ved%3D0CCkQuwUwAA%23v%3Donepage%26q%3Dtom.love%2520objective.c%2520cocoa%26f%3Dfalse&amp;rft.isbn=0-470-49589-8&amp;rft.pub=John+Wiley+and+Sons%2C&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-love2009-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-love2009_4-0">^</a></b></span> <span class="reference-text"><span class="citation book">Biancuzzi, Federico; Warden, Shane (2009). <a rel="nofollow" class="external text" href="http://books.google.com/books?id=yB1WwURwBUQC&amp;pg=PA242&amp;dq=Engineering.objective.C+tom.love&amp;hl=en&amp;ei=T-NbTem3Fof2vwPRvenzDA&amp;sa=X&amp;oi=book_result&amp;ct=result&amp;resnum=1&amp;ved=0CCoQ6AEwAA#v=onepage&amp;q=Engineering.objective.C%20tom.love&amp;f=false"><i>Masterminds of Programming</i></a>. <a href="http://en.wikipedia.org/wiki/O%27Reilly_Media,_Inc." title="O'Reilly Media, Inc." class="mw-redirect">O'Reilly Media, Inc.</a> pp.&#160;242–246. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-596-51517-0" title="Special:BookSources/0-596-51517-0">0-596-51517-0</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Biancuzzi%2C+Federico&amp;rft.aufirst=Federico&amp;rft.aulast=Biancuzzi&amp;rft.au=Warden%2C+Shane&amp;rft.btitle=Masterminds+of+Programming&amp;rft.date=2009&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DyB1WwURwBUQC%26pg%3DPA242%26dq%3DEngineering.objective.C%2Btom.love%26hl%3Den%26ei%3DT-NbTem3Fof2vwPRvenzDA%26sa%3DX%26oi%3Dbook_result%26ct%3Dresult%26resnum%3D1%26ved%3D0CCoQ6AEwAA%23v%3Donepage%26q%3DEngineering.objective.C%2520tom.love%26f%3Dfalse&amp;rft.isbn=0-596-51517-0&amp;rft.pages=242%E2%80%93246&amp;rft.pub=O%27Reilly+Media%2C+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><span class="citation journal"><a href="http://en.wikipedia.org/wiki/Brad_Cox" title="Brad Cox">Cox, Brad</a> (1983). <a rel="nofollow" class="external text" href="http://portal.acm.org/citation.cfm?id=948095">"The object oriented pre-compiler: programming Smalltalk 80 methods in C language"</a>. <i>ACM SIGPLAN Notices</i> (New York, NY: <a href="Association_for_Computing_Machinery.html" title="Association for Computing Machinery">ACM</a>) <b>18</b> (1). <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F948093.948095">10.1145/948093.948095</a><span class="reference-accessdate">. Retrieved 2011-02-17</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=The+object+oriented+pre-compiler%3A+programming+Smalltalk+80+methods+in+C+language&amp;rft.au=Cox%2C+Brad&amp;rft.aufirst=Brad&amp;rft.aulast=Cox&amp;rft.date=1983&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fportal.acm.org%2Fcitation.cfm%3Fid%3D948095&amp;rft_id=info%3Adoi%2F10.1145%2F948093.948095&amp;rft.issue=1&amp;rft.jtitle=ACM+SIGPLAN+Notices&amp;rft.place=New+York%2C+NY&amp;rft.pub=ACM&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=18" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-GNUstep_site-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-GNUstep_site_6-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.gnustep.org/information/aboutGNUstep.html">"GNUstep: Introduction"</a>. GNUstep developers/GNU Project<span class="reference-accessdate">. Retrieved 2012-07-29</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=GNUstep%3A+Introduction&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.gnustep.org%2Finformation%2FaboutGNUstep.html&amp;rft.pub=GNUstep+developers%2FGNU+Project&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/referencelibrary/GettingStarted/RoadMapOSX/books/WriteObjective-CCode/WriteObjective-CCode/WriteObjective-CCode.html">"Write Objective-C Code"</a>. apple.com. 2013-04-23<span class="reference-accessdate">. Retrieved 2013-12-22</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Write+Objective-C+Code&amp;rft.date=2013-04-23&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2Freferencelibrary%2FGettingStarted%2FRoadMapOSX%2Fbooks%2FWriteObjective-CCode%2FWriteObjective-CCode%2FWriteObjective-CCode.html&amp;rft.pub=apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-8">^</a></b></span> <span class="reference-text"><span class="citation web"><a href="Apple%2c_Inc.html" title="Apple, Inc." class="mw-redirect">Apple, Inc.</a> (19 October 2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtDynamicResolution.html">"Dynamic Method Resolution"</a>. <i>Objective-C Runtime Programming Guide</i><span class="reference-accessdate">. Retrieved {{subst:today}}</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=Dynamic+Method+Resolution&amp;rft.au=Apple%2C+Inc.&amp;rft.aulast=Apple%2C+Inc.&amp;rft.date=19+October+2009&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2FCocoa%2FConceptual%2FObjCRuntimeGuide%2FArticles%2FocrtDynamicResolution.html&amp;rft.jtitle=Objective-C+Runtime+Programming+Guide&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment">Check date values in: <code>|accessdate=</code> (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><span class="citation web"><a href="Apple%2c_Inc.html" title="Apple, Inc." class="mw-redirect">Apple, Inc.</a> (19 October 2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/cocoa/conceptual/ObjectiveC/Articles/ocSelectors.html#//apple_ref/doc/uid/TP30001163-CH23-89447">"Avoiding Messaging Errors"</a>. <i>The Objective-C Programming Language</i><span class="reference-accessdate">. Retrieved {{subst:today}}</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.atitle=Avoiding+Messaging+Errors&amp;rft.au=Apple%2C+Inc.&amp;rft.aulast=Apple%2C+Inc.&amp;rft.date=19+October+2009&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2Fcocoa%2Fconceptual%2FObjectiveC%2FArticles%2FocSelectors.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP30001163-CH23-89447&amp;rft.jtitle=The+Objective-C+Programming+Language&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment">Check date values in: <code>|accessdate=</code> (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#bad_date" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><span class="citation book">Dalrymple, Mark; Knaster, Scott. <i>Learn Objective-C on the Mac</i>. p.&#160;9. "The .m extension originally stood for "messages" when Objective-C was first introduced, referring to a central feature of Objective-C"</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Dalrymple%2C+Mark&amp;rft.aufirst=Mark&amp;rft.au=Knaster%2C+Scott&amp;rft.aulast=Dalrymple&amp;rft.btitle=Learn+Objective-C+on+the+Mac&amp;rft.genre=book&amp;rft.pages=9&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1">"Objective-C Runtime Programming Guide"</a>. Apple Inc.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Objective-C+Runtime+Programming+Guide&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2Fdocumentation%2FCocoa%2FConceptual%2FObjCRuntimeGuide%2FArticles%2FocrtForwarding.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%2FTP40008048-CH105-SW1&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-12">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://video.google.com/videoplay?docid=-7466310348707586940&amp;ei=0dr7SIe6L46qrgLk7dHsDg&amp;q=Smalltalk-80">Example of <i>categories</i> concept</a></span></li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/bb383977.aspx">"Extension Methods (C# Programming Guide)"</a>. Microsoft. October 2010<span class="reference-accessdate">. Retrieved 2011-07-10</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Extension+Methods+%28C%23+Programming+Guide%29&amp;rft.date=October+2010&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fbb383977.aspx&amp;rft.pub=Microsoft&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocCPlusPlus.html#//apple_ref/doc/uid/TP30001163-CH10-SW1">Using C++ With Objective-C</a> in Mac OS X Reference Library, last retrieved in 2010-02-10.</span></li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external autonumber" href="http://clang.llvm.org/docs/LanguageExtensions.html#interoperability-with-c-11-lambdas">[1]</a></span></li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00039.html">"Objective-C 2.0: more clues"</a>. Lists.apple.com. 2006-08-10<span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Objective-C+2.0%3A+more+clues&amp;rft.date=2006-08-10&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Flists.apple.com%2Farchives%2FObjc-language%2F2006%2FAug%2Fmsg00039.html&amp;rft.pub=Lists.apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-17"><span class="mw-cite-backlink"><b><a href="#cite_ref-17">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://lists.apple.com/archives/Objc-language/2006/Aug/msg00018.html">"Re: Objective-C 2.0"</a>. Lists.apple.com<span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Re%3A+Objective-C+2.0&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Flists.apple.com%2Farchives%2FObjc-language%2F2006%2FAug%2Fmsg00018.html&amp;rft.pub=Lists.apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://gcc.gnu.org/gcc-4.6/changes.html">"GCC 4.6 Release Series: Changes, New Features, and Fixes"</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=GCC+4.6+Release+Series%3A+Changes%2C+New+Features%2C+and+Fixes&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fgcc.gnu.org%2Fgcc-4.6%2Fchanges.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-19">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Articles/gcAPI.html">Garbage Collection Programming Guide: Garbage Collection API</a> (Apple developer website - search for "__strong")</span></li>
<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/GarbageCollection/Introduction.html">"Garbage Collection Programming Guide: Introduction to Garbage Collection"</a>. Apple Inc. 2011-10-03.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Garbage+Collection+Programming+Guide%3A+Introduction+to+Garbage+Collection&amp;rft.date=2011-10-03&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23documentation%2FCocoa%2FConceptual%2FGarbageCollection%2FIntroduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-21"><span class="mw-cite-backlink"><b><a href="#cite_ref-21">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://web.archive.org/web/20100724195423/http://developer.apple.com/leopard/overview/objectivec2.html">"Leopard Technology Series for Developers: Objective-C 2.0 Overview"</a>. Apple Inc. 2007-11-06. Archived from <a rel="nofollow" class="external text" href="http://developer.apple.com/leopard/overview/objectivec2.html">the original</a> on July 24, 2010<span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Leopard+Technology+Series+for+Developers%3A+Objective-C+2.0+Overview&amp;rft.date=2007-11-06&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fleopard%2Foverview%2Fobjectivec2.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-22">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">"Transitioning to ARC Release Notes"</a>. Apple Inc. 2012-07-17<span class="reference-accessdate">. Retrieved 2012-08-26</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Transitioning+to+ARC+Release+Notes&amp;rft.date=2012-07-17&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23releasenotes%2FObjectiveC%2FRN-TransitioningToARC%2FIntroduction%2FIntroduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-23"><span class="mw-cite-backlink"><b><a href="#cite_ref-23">^</a></b></span> <span class="reference-text"><span class="citation web">Apple, Inc. (2009). <a rel="nofollow" class="external text" href="http://developer.apple.com/mac/library/documentation/Cocoa/Conceptual/ObjectiveC/Articles/ocFastEnumeration.html">"Fast Enumeration"</a>. apple.com<span class="reference-accessdate">. Retrieved 2009-12-31</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Apple%2C+Inc.&amp;rft.aulast=Apple%2C+Inc.&amp;rft.btitle=Fast+Enumeration&amp;rft.date=2009&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Fmac%2Flibrary%2Fdocumentation%2FCocoa%2FConceptual%2FObjectiveC%2FArticles%2FocFastEnumeration.html&amp;rft.pub=apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-24">^</a></b></span> <span class="reference-text"><span class="citation web">Free Software Foundation, Inc. (2011). <a rel="nofollow" class="external text" href="http://gcc.gnu.org/gcc-4.6/changes.html">"GCC 4.6 Release Series – Changes, New Features, and Fixes"</a>. <a rel="nofollow" class="external free" href="http://gcc.gnu.org/">http://gcc.gnu.org</a><span class="reference-accessdate">. Retrieved 2013-11-27</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Free+Software+Foundation%2C+Inc.&amp;rft.aulast=Free+Software+Foundation%2C+Inc.&amp;rft.btitle=GCC+4.6+Release+Series+%E2%80%93+Changes%2C+New+Features%2C+and+Fixes&amp;rft.date=2011&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fgcc.gnu.org%2Fgcc-4.6%2Fchanges.html&amp;rft.pub=http%3A%2F%2Fgcc.gnu.org&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Blocks_requirements-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-Blocks_requirements_25-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/Blocks/Articles/00_Introduction.html">"Blocks Programming Topics – Mac Developer Library"</a>. Apple Inc. March 8, 2011<span class="reference-accessdate">. Retrieved November 28, 2012</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Blocks+Programming+Topics+%E2%80%93+Mac+Developer+Library&amp;rft.date=March+8%2C+2011&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23documentation%2FCocoa%2FConceptual%2FBlocks%2FArticles%2F00_Introduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Transitioning_to_ARC-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-Transitioning_to_ARC_26-0">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/#releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html">"Transitioning to ARC"</a>. Apple Inc<span class="reference-accessdate">. Retrieved 8 October 2012</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Transitioning+to+ARC&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2F%23releasenotes%2FObjectiveC%2FRN-TransitioningToARC%2FIntroduction%2FIntroduction.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Programming_with_Obj-C_.E2.80.93_Values_and_Collections-27"><span class="mw-cite-backlink">^ <a href="#cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_27-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Programming_with_Obj-C_.E2.80.93_Values_and_Collections_27-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="https://developer.apple.com/library/ios/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/FoundationTypesandCollections/FoundationTypesandCollections.html">"Programming with Objective-C: Values and Collections"</a>. Apple Inc<span class="reference-accessdate">. Retrieved 8 October 2012</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Programming+with+Objective-C%3A+Values+and+Collections&amp;rft.genre=book&amp;rft_id=https%3A%2F%2Fdeveloper.apple.com%2Flibrary%2Fios%2F%23documentation%2FCocoa%2FConceptual%2FProgrammingWithObjectiveC%2FFoundationTypesandCollections%2FFoundationTypesandCollections.html&amp;rft.pub=Apple+Inc.&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-ObjCLiterals-28"><span class="mw-cite-backlink">^ <a href="#cite_ref-ObjCLiterals_28-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-ObjCLiterals_28-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://clang.llvm.org/docs/ObjectiveCLiterals.html">http://clang.llvm.org/docs/ObjectiveCLiterals.html</a></span></li>
<li id="cite_note-29"><span class="mw-cite-backlink"><b><a href="#cite_ref-29">^</a></b></span> <span class="reference-text"><span id="CITEREF1997" class="citation"><i>Rhapsody Developer's Guide</i>, AP Professional, 1997</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Rhapsody+Developer%27s+Guide&amp;rft.date=1997&amp;rft.genre=book&amp;rft.pub=AP+Professional&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-30">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://users.pandora.be/stes/compiler.html">"Portable Object Compiler"</a>. Users.pandora.be. 1970-01-01<span class="reference-accessdate">. Retrieved 2010-05-30</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Portable+Object+Compiler&amp;rft.date=1970-01-01&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fusers.pandora.be%2Fstes%2Fcompiler.html&amp;rft.pub=Users.pandora.be&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-31">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.breadbox.com/downloads.asp?id=54&amp;category=GeosSDK&amp;maincategory=SDK">"Breadbox Computer Company LLC homepage"</a><span class="reference-accessdate">. Retrieved 8 December 2010</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.btitle=Breadbox+Computer+Company+LLC+homepage&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.breadbox.com%2Fdownloads.asp%3Fid%3D54%26category%3DGeosSDK%26maincategory%3DSDK&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-32">^</a></b></span> <span class="reference-text"><span class="citation web">Apple, Inc. (August 22, 2006). <a rel="nofollow" class="external text" href="http://www.apple.com/macosx/developertools/xcode.html">"Mac OS X Leopard – Xcode 3.0"</a>. apple.com<span class="reference-accessdate">. Retrieved 2006-08-22</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Apple%2C+Inc.&amp;rft.aulast=Apple%2C+Inc.&amp;rft.btitle=Mac+OS+X+Leopard+%E2%80%93+Xcode+3.0&amp;rft.date=August+22%2C+2006&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww.apple.com%2Fmacosx%2Fdevelopertools%2Fxcode.html&amp;rft.pub=apple.com&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span><sup class="noprint Inline-Template"><span style="white-space: nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Link_rot" title="Wikipedia:Link rot"><span title="&#160;since September 2010">dead link</span></a></i>]</span></sup></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="Further_reading">Further reading</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=43" title="Edit section: Further reading">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="refbegin" style="">
<ul>
<li><span class="citation book">Cox, Brad J. (1991). <i>Object Oriented Programming: An Evolutionary Approach</i>. Addison Wesley. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-201-54834-8" title="Special:BookSources/0-201-54834-8">0-201-54834-8</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AObjective-C&amp;rft.au=Cox%2C+Brad+J.&amp;rft.aufirst=Brad+J.&amp;rft.aulast=Cox&amp;rft.btitle=Object+Oriented+Programming%3A+An+Evolutionary+Approach&amp;rft.date=1991&amp;rft.genre=book&amp;rft.isbn=0-201-54834-8&amp;rft.pub=Addison+Wesley&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></li>
</ul>
</div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit&amp;section=44" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="metadata mbox-small plainlinks" style="border:1px solid #aaa; background-color:#f9f9f9;">
<tr>
<td class="mbox-image"><img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/60px-Wikibooks-logo-en-noslogan.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/80px-Wikibooks-logo-en-noslogan.svg.png 2x" /></td>
<td class="mbox-text plainlist" style="">Wikibooks has a book on the topic of: <i><b><a href="http://en.wikibooks.org/wiki/Objective-C_Programming" class="extiw" title="wikibooks:Objective-C Programming">Objective-C Programming</a></b></i></td>
</tr>
</table>
<ul>
<li><a rel="nofollow" class="external text" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/">Programming with Objective-C</a>, from Apple (2012-12-13)</li>
<li><i><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html">The Objective-C 2.0 Programming Language</a></i>, from Apple (2011-10-11)</li>
<li><i><a rel="nofollow" class="external text" href="https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html">Objective-C Runtime Programming Guide</a></i>, from Apple (2009-10-19)</li>
<li><a rel="nofollow" class="external text" href="http://www.gnu.org/software/gnustep/resources/documentation/Developer/Base/ProgrammingManual/manual_toc.html">Objective-C GNUstep Base Programming Manual</a></li>
<li><a rel="nofollow" class="external text" href="http://virtualschool.edu/objectivec/">Objective-C by Brad Cox</a></li>
<li><a rel="nofollow" class="external text" href="http://www.cs.indiana.edu/classes/c304/oop-intro.html">Object Oriented Programming in Objective-C</a></li>
<li><a rel="nofollow" class="external text" href="http://www.faqs.org/faqs/computer-lang/Objective-C/faq/">Objective-C FAQ</a></li>
<li><a rel="nofollow" class="external text" href="http://www.informit.com/store/product.aspx?isbn=0321706285">Objective-C Programming: The Big Nerd Ranch Guide</a> by Aaron Hillegass, Pearson Education</li>
<li><a rel="nofollow" class="external text" href="http://www.informit.com/store/product.aspx?isbn=0321811909">Programming in Objective-C, 4th Edition</a> by Stephen Kochan, Addison-Wesley</li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:CProLang" title="Template:CProLang"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:CProLang" title="Template talk:CProLang"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="C_(programming_language).html" title="C (programming language)">C programming language</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><a href="ANSI_C.html" title="ANSI C">ANSI C</a>
<ul>
<li><a href="ANSI_C.html#C89_and_C90" title="ANSI C">C89 and C90</a></li>
</ul>
</li>
<li><a href="C99.html" title="C99">C99</a></li>
<li><a href="C11_(C_standard_revision).html" title="C11 (C standard revision)">C11</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Category:C_compilers" title="Category:C compilers">Compilers</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Amsterdam_Compiler_Kit.html" title="Amsterdam Compiler Kit">Amsterdam Compiler Kit</a></li>
<li><a href="Borland_Turbo_C.html" title="Borland Turbo C">Borland Turbo C</a></li>
<li><a href="Clang.html" title="Clang">Clang</a></li>
<li><a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a></li>
<li><a href="LCC_(compiler).html" title="LCC (compiler)">LCC</a></li>
<li><a href="Pelles_C.html" title="Pelles C">Pelles C</a></li>
<li><a href="Portable_C_Compiler.html" title="Portable C Compiler">PCC</a></li>
<li><a href="Tiny_C_Compiler.html" title="Tiny C Compiler">TCC</a></li>
<li><a href="Visual_C%2b%2b.html" title="Visual C++">Visual C++</a>
<ul>
<li><a href="C%2b%2b/CLI.html" title="C++/CLI">C++/CLI</a></li>
<li><a href="C%2b%2b/CX.html" title="C++/CX">C++/CX</a></li>
</ul>
</li>
<li><a href="Watcom_C/C%2b%2b_compiler.html" title="Watcom C/C++ compiler">Watcom C/C++ compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Category:C_libraries" title="Category:C libraries">Libraries</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="C_standard_library.html" title="C standard library">C standard library</a></li>
<li><a href="Bionic_(software).html" title="Bionic (software)">Bionic</a></li>
<li><a href="Dietlibc.html" title="Dietlibc">dietlibc</a></li>
<li><a href="Embedded_GLIBC.html" title="Embedded GLIBC">EGLIBC</a></li>
<li><a href="GNU_C_Library.html" title="GNU C Library">glibc</a></li>
<li><a href="Klibc.html" title="Klibc">klibc</a></li>
<li><a href="Hybris_(software).html" title="Hybris (software)">libhybris</a></li>
<li><a href="Musl.html" title="Musl">musl</a></li>
<li><a href="Newlib.html" title="Newlib">Newlib</a></li>
<li><a href="UClibc.html" title="UClibc">uClibc</a></li>
<li><a href="BSD_libc.html" title="BSD libc" class="mw-redirect">BSD libc</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Features</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Null-terminated_string.html" title="Null-terminated string">String</a></li>
<li><a href="C_syntax.html" title="C syntax">Syntax</a></li>
<li><a href="C_preprocessor.html" title="C preprocessor">Preprocessor</a></li>
<li><a href="C_data_types.html" title="C data types">Variable types and declarations</a></li>
<li><a href="C_standard_library.html" title="C standard library">Functions</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Select descendants</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="C%2b%2b.html" title="C++">C++</a></li>
<li><a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a></li>
<li><a href="D_(programming_language).html" title="D (programming language)">D</a></li>
<li><strong class="selflink">Objective-C</strong></li>
<li><a href="Alef_(programming_language).html" title="Alef (programming language)">Alef</a></li>
<li><a href="Limbo_(programming_language).html" title="Limbo (programming language)">Limbo</a></li>
<li><a href="Go_(programming_language).html" title="Go (programming language)">Go</a></li>
<li><a href="Vala_(programming_language).html" title="Vala (programming language)">Vala</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">C and other languages</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li>C and C++
<ul>
<li><a href="Compatibility_of_C_and_C%2b%2b.html" title="Compatibility of C and C++">Compatibility</a></li>
<li><a href="Operators_in_C_and_C%2b%2b.html" title="Operators in C and C++">Operators</a></li>
</ul>
</li>
<li><a href="Comparison_of_Pascal_and_C.html" title="Comparison of Pascal and C">Comparison of Pascal and C</a></li>
<li><a href="Java_virtual_machine.html#C_to_bytecode_compilers" title="Java virtual machine">C to Java byte-code compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><img alt="Category" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png" width="16" height="14" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/24px-Folder_Hexagonal_Icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/32px-Folder_Hexagonal_Icon.svg.png 2x" /> <b><a href="http://en.wikipedia.org/wiki/Category:C_programming_language" title="Category:C programming language">Category</a></b></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>
<p><br /></p>


<!-- 
NewPP limit report
Parsed by mw1189
CPU time usage: 1.828 seconds
Real time usage: 1.977 seconds
Preprocessor visited node count: 3791/1000000
Preprocessor generated node count: 17599/1500000
Post‐expand include size: 85406/2048000 bytes
Template argument size: 5108/2048000 bytes
Highest expansion depth: 15/40
Expensive parser function count: 12/500
Lua time usage: 0.151/10.000 seconds
Lua memory usage: 3.36 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:39809523-0!*!0!!en!4!* and timestamp 20140327103734
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;oldid=601487303">http://en.wikipedia.org/w/index.php?title=Objective-C&amp;oldid=601487303</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:C_programming_language_family" title="Category:C programming language family">C programming language family</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Object-oriented_programming_languages" title="Category:Object-oriented programming languages">Object-oriented programming languages</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Dynamically_typed_programming_languages" title="Category:Dynamically typed programming languages">Dynamically typed programming languages</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Class-based_programming_languages" title="Category:Class-based programming languages">Class-based programming languages</a></li><li><a href="http://en.wikipedia.org/wiki/Category:NeXT" title="Category:NeXT">NeXT</a></li><li><a href="http://en.wikipedia.org/wiki/Category:GNUstep" title="Category:GNUstep">GNUstep</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Programming_languages_created_in_1986" title="Category:Programming languages created in 1986">Programming languages created in 1986</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:CS1_errors:_dates" title="Category:CS1 errors: dates">CS1 errors: dates</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_dead_external_links" title="Category:All articles with dead external links">All articles with dead external links</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_dead_external_links_from_September_2010" title="Category:Articles with dead external links from September 2010">Articles with dead external links from September 2010</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_April_2013" title="Category:Articles with unsourced statements from April 2013">Articles with unsourced statements from April 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_November_2013" title="Category:Articles with unsourced statements from November 2013">Articles with unsourced statements from November 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_needing_additional_references_from_November_2012" title="Category:Articles needing additional references from November 2012">Articles needing additional references from November 2012</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_needing_additional_references_from_December_2011" title="Category:Articles needing additional references from December 2011">Articles needing additional references from December 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_specifically_marked_weasel-worded_phrases" title="Category:All articles with specifically marked weasel-worded phrases">All articles with specifically marked weasel-worded phrases</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_specifically_marked_weasel-worded_phrases_from_June_2013" title="Category:Articles with specifically marked weasel-worded phrases from June 2013">Articles with specifically marked weasel-worded phrases from June 2013</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Use_dmy_dates_from_January_2012" title="Category:Use dmy dates from January 2012">Use dmy dates from January 2012</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Objective-C&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Objective-C" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Objective-C.html"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Objective-C"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Objective-C.html" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Objective-C" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Objective-C" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;oldid=601487303" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q188531" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Objective-C&amp;id=601487303" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Objective-C">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Objective-C&amp;oldid=601487303&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Objective-C&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-ar"><a href="http://ar.wikipedia.org/wiki/سي-الكائنية" title="سي-الكائنية – Arabic" lang="ar" hreflang="ar">العربية</a></li>
			<li class="interlanguage-link interwiki-az"><a href="http://az.wikipedia.org/wiki/Objective-C" title="Objective-C – Azerbaijani" lang="az" hreflang="az">Azərbaycanca</a></li>
			<li class="interlanguage-link interwiki-bn"><a href="http://bn.wikipedia.org/wiki/অবজেক্টিভ_সি" title="অবজেক্টিভ সি – Bengali" lang="bn" hreflang="bn">বাংলা</a></li>
			<li class="interlanguage-link interwiki-bg"><a href="http://bg.wikipedia.org/wiki/Objective-C" title="Objective-C – Bulgarian" lang="bg" hreflang="bg">Български</a></li>
			<li class="interlanguage-link interwiki-ca"><a href="http://ca.wikipedia.org/wiki/Objective-C" title="Objective-C – Catalan" lang="ca" hreflang="ca">Català</a></li>
			<li class="interlanguage-link interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Objective-C" title="Objective-C – Czech" lang="cs" hreflang="cs">Čeština</a></li>
			<li class="interlanguage-link interwiki-da"><a href="http://da.wikipedia.org/wiki/Objective-C" title="Objective-C – Danish" lang="da" hreflang="da">Dansk</a></li>
			<li class="interlanguage-link interwiki-de"><a href="http://de.wikipedia.org/wiki/Objective-C" title="Objective-C – German" lang="de" hreflang="de">Deutsch</a></li>
			<li class="interlanguage-link interwiki-es"><a href="http://es.wikipedia.org/wiki/Objective-C" title="Objective-C – Spanish" lang="es" hreflang="es">Español</a></li>
			<li class="interlanguage-link interwiki-eo"><a href="http://eo.wikipedia.org/wiki/Objective-C" title="Objective-C – Esperanto" lang="eo" hreflang="eo">Esperanto</a></li>
			<li class="interlanguage-link interwiki-fa"><a href="http://fa.wikipedia.org/wiki/آبجکتیو-سی" title="آبجکتیو-سی – Persian" lang="fa" hreflang="fa">فارسی</a></li>
			<li class="interlanguage-link interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Objective-C" title="Objective-C – French" lang="fr" hreflang="fr">Français</a></li>
			<li class="interlanguage-link interwiki-gl"><a href="http://gl.wikipedia.org/wiki/Objective-C" title="Objective-C – Galician" lang="gl" hreflang="gl">Galego</a></li>
			<li class="interlanguage-link interwiki-ko"><a href="http://ko.wikipedia.org/wiki/오브젝티브-C" title="오브젝티브-C – Korean" lang="ko" hreflang="ko">한국어</a></li>
			<li class="interlanguage-link interwiki-it"><a href="http://it.wikipedia.org/wiki/Objective-C" title="Objective-C – Italian" lang="it" hreflang="it">Italiano</a></li>
			<li class="interlanguage-link interwiki-he"><a href="http://he.wikipedia.org/wiki/Objective-C" title="Objective-C – Hebrew" lang="he" hreflang="he">עברית</a></li>
			<li class="interlanguage-link interwiki-ka"><a href="http://ka.wikipedia.org/wiki/Objective-C" title="Objective-C – Georgian" lang="ka" hreflang="ka">ქართული</a></li>
			<li class="interlanguage-link interwiki-kk"><a href="http://kk.wikipedia.org/wiki/Objective-C" title="Objective-C – Kazakh" lang="kk" hreflang="kk">Қазақша</a></li>
			<li class="interlanguage-link interwiki-hu"><a href="http://hu.wikipedia.org/wiki/Objective-C" title="Objective-C – Hungarian" lang="hu" hreflang="hu">Magyar</a></li>
			<li class="interlanguage-link interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Objective-C" title="Objective-C – Dutch" lang="nl" hreflang="nl">Nederlands</a></li>
			<li class="interlanguage-link interwiki-ja"><a href="http://ja.wikipedia.org/wiki/Objective-C" title="Objective-C – Japanese" lang="ja" hreflang="ja">日本語</a></li>
			<li class="interlanguage-link interwiki-no"><a href="http://no.wikipedia.org/wiki/Objective-C" title="Objective-C – Norwegian (bokmål)" lang="no" hreflang="no">Norsk bokmål</a></li>
			<li class="interlanguage-link interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Objective-C" title="Objective-C – Polish" lang="pl" hreflang="pl">Polski</a></li>
			<li class="interlanguage-link interwiki-pt"><a href="http://pt.wikipedia.org/wiki/Objective-C" title="Objective-C – Portuguese" lang="pt" hreflang="pt">Português</a></li>
			<li class="interlanguage-link interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Objective-C" title="Objective-C – Russian" lang="ru" hreflang="ru">Русский</a></li>
			<li class="interlanguage-link interwiki-sco"><a href="http://sco.wikipedia.org/wiki/Objective-C" title="Objective-C – Scots" lang="sco" hreflang="sco">Scots</a></li>
			<li class="interlanguage-link interwiki-simple"><a href="http://simple.wikipedia.org/wiki/Objective-C" title="Objective-C – Simple English" lang="simple" hreflang="simple">Simple English</a></li>
			<li class="interlanguage-link interwiki-sk"><a href="http://sk.wikipedia.org/wiki/Objective-C" title="Objective-C – Slovak" lang="sk" hreflang="sk">Slovenčina</a></li>
			<li class="interlanguage-link interwiki-sl"><a href="http://sl.wikipedia.org/wiki/Objective-C" title="Objective-C – Slovenian" lang="sl" hreflang="sl">Slovenščina</a></li>
			<li class="interlanguage-link interwiki-sr"><a href="http://sr.wikipedia.org/wiki/Objective-C" title="Objective-C – Serbian" lang="sr" hreflang="sr">Српски / srpski</a></li>
			<li class="interlanguage-link interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Objective-C" title="Objective-C – Finnish" lang="fi" hreflang="fi">Suomi</a></li>
			<li class="interlanguage-link interwiki-sv"><a href="http://sv.wikipedia.org/wiki/Objective-C" title="Objective-C – Swedish" lang="sv" hreflang="sv">Svenska</a></li>
			<li class="interlanguage-link interwiki-ta"><a href="http://ta.wikipedia.org/wiki/ஒப்செக்டிவ்_சி" title="ஒப்செக்டிவ் சி – Tamil" lang="ta" hreflang="ta">தமிழ்</a></li>
			<li class="interlanguage-link interwiki-th"><a href="http://th.wikipedia.org/wiki/ภาษาอ็อบเจกทีฟ-ซี" title="ภาษาอ็อบเจกทีฟ-ซี – Thai" lang="th" hreflang="th">ไทย</a></li>
			<li class="interlanguage-link interwiki-tg"><a href="http://tg.wikipedia.org/wiki/Objective-C" title="Objective-C – Tajik" lang="tg" hreflang="tg">Тоҷикӣ</a></li>
			<li class="interlanguage-link interwiki-tr"><a href="http://tr.wikipedia.org/wiki/Objective-C" title="Objective-C – Turkish" lang="tr" hreflang="tr">Türkçe</a></li>
			<li class="interlanguage-link interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Objective-C" title="Objective-C – Ukrainian" lang="uk" hreflang="uk">Українська</a></li>
			<li class="interlanguage-link interwiki-zh"><a href="http://zh.wikipedia.org/wiki/Objective-C" title="Objective-C – Chinese" lang="zh" hreflang="zh">中文</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q188531#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 27 March 2014 at 10:37.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Objective-C" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf18/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["ext.cite","mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.wikimediaShopLink.core","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1175 in 0.241 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Objective-C by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:56:49 GMT -->
</html>
