http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/C_syntax.html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/C_syntax by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:56:59 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>C syntax - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf19" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/C_syntax" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="C_syntax.html" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.rtlcite%2Cwikihiero%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"C_syntax","wgTitle":"C syntax","wgCurRevisionId":597042309,"wgRevisionId":597042309,"wgArticleId":456820,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles needing additional references from November 2011","All articles needing additional references","Pages containing cite templates with deprecated parameters","C programming language","Source code","Articles with example C code"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"C_syntax","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf19/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["de-de","de","en-us","en","es"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q590541"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":false,
"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:868e43d07ede2616d2d1dc3507cd8145 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","skins.vector.compactPersonalBar.defaultTracking","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-c {line-height: normal;}
.source-c li, .source-c pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for c
 * CSS class: source-c, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.c.source-c .de1, .c.source-c .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.c.source-c  {font-family:monospace;}
.c.source-c .imp {font-weight: bold; color: red;}
.c.source-c li, .c.source-c .li1 {font-weight: normal; vertical-align:top;}
.c.source-c .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.c.source-c .li2 {font-weight: bold; vertical-align:top;}
.c.source-c .kw1 {color: #b1b100;}
.c.source-c .kw2 {color: #000000; font-weight: bold;}
.c.source-c .kw3 {color: #000066;}
.c.source-c .kw4 {color: #993333;}
.c.source-c .co1 {color: #666666; font-style: italic;}
.c.source-c .co2 {color: #339933;}
.c.source-c .coMULTI {color: #808080; font-style: italic;}
.c.source-c .es0 {color: #000099; font-weight: bold;}
.c.source-c .es1 {color: #000099; font-weight: bold;}
.c.source-c .es2 {color: #660099; font-weight: bold;}
.c.source-c .es3 {color: #660099; font-weight: bold;}
.c.source-c .es4 {color: #660099; font-weight: bold;}
.c.source-c .es5 {color: #006699; font-weight: bold;}
.c.source-c .br0 {color: #009900;}
.c.source-c .sy0 {color: #339933;}
.c.source-c .st0 {color: #ff0000;}
.c.source-c .nu0 {color: #0000dd;}
.c.source-c .nu6 {color: #208080;}
.c.source-c .nu8 {color: #208080;}
.c.source-c .nu12 {color: #208080;}
.c.source-c .nu16 {color:#800080;}
.c.source-c .nu17 {color:#800080;}
.c.source-c .nu18 {color:#800080;}
.c.source-c .nu19 {color:#800080;}
.c.source-c .me1 {color: #202020;}
.c.source-c .me2 {color: #202020;}
.c.source-c .ln-xtra, .c.source-c li.ln-xtra, .c.source-c div.ln-xtra {background-color: #ffc;}
.c.source-c span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf19/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-C_syntax skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">C syntax</span></h1>
						<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>The <b>syntax of the C programming language</b>, the rules governing writing of software in the language, is designed to allow for programs that are extremely terse, have a close relationship with the resulting <a href="http://en.wikipedia.org/wiki/Machine_code" title="Machine code">object code</a>, and yet provide relatively high-level <a href="http://en.wikipedia.org/wiki/Data_abstraction" title="Data abstraction" class="mw-redirect">data abstraction</a>. The development of this syntax was a major milestone in the history of computer science as it was the first widely successful high-level language for <a href="Operating_system.html" title="Operating system">operating-system</a> development.</p>
<p>C syntax makes use of the <a href="http://en.wikipedia.org/wiki/Maximal_munch" title="Maximal munch">maximal munch</a> principle.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Data_structures"><span class="tocnumber">1</span> <span class="toctext">Data structures</span></a>
<ul>
<li class="toclevel-2 tocsection-2"><a href="#Primitive_data_types"><span class="tocnumber">1.1</span> <span class="toctext">Primitive data types</span></a>
<ul>
<li class="toclevel-3 tocsection-3"><a href="#Integer_types"><span class="tocnumber">1.1.1</span> <span class="toctext">Integer types</span></a></li>
<li class="toclevel-3 tocsection-4"><a href="#Enumerated_type"><span class="tocnumber">1.1.2</span> <span class="toctext">Enumerated type</span></a></li>
<li class="toclevel-3 tocsection-5"><a href="#Floating_point_types"><span class="tocnumber">1.1.3</span> <span class="toctext">Floating point types</span></a></li>
<li class="toclevel-3 tocsection-6"><a href="#Storage_duration_specifiers"><span class="tocnumber">1.1.4</span> <span class="toctext">Storage duration specifiers</span></a></li>
<li class="toclevel-3 tocsection-7"><a href="#Type_qualifiers"><span class="tocnumber">1.1.5</span> <span class="toctext">Type qualifiers</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-8"><a href="#Incomplete_types"><span class="tocnumber">1.2</span> <span class="toctext">Incomplete types</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="#Pointers"><span class="tocnumber">1.3</span> <span class="toctext">Pointers</span></a>
<ul>
<li class="toclevel-3 tocsection-10"><a href="#Referencing"><span class="tocnumber">1.3.1</span> <span class="toctext">Referencing</span></a></li>
<li class="toclevel-3 tocsection-11"><a href="#Dereferencing"><span class="tocnumber">1.3.2</span> <span class="toctext">Dereferencing</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-12"><a href="#Arrays"><span class="tocnumber">1.4</span> <span class="toctext">Arrays</span></a>
<ul>
<li class="toclevel-3 tocsection-13"><a href="#Array_definition"><span class="tocnumber">1.4.1</span> <span class="toctext">Array definition</span></a></li>
<li class="toclevel-3 tocsection-14"><a href="#Accessing_elements"><span class="tocnumber">1.4.2</span> <span class="toctext">Accessing elements</span></a></li>
<li class="toclevel-3 tocsection-15"><a href="#Variable-length_arrays"><span class="tocnumber">1.4.3</span> <span class="toctext">Variable-length arrays</span></a></li>
<li class="toclevel-3 tocsection-16"><a href="#Dynamic_arrays"><span class="tocnumber">1.4.4</span> <span class="toctext">Dynamic arrays</span></a></li>
<li class="toclevel-3 tocsection-17"><a href="#Multidimensional_arrays"><span class="tocnumber">1.4.5</span> <span class="toctext">Multidimensional arrays</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-18"><a href="#Strings"><span class="tocnumber">1.5</span> <span class="toctext">Strings</span></a>
<ul>
<li class="toclevel-3 tocsection-19"><a href="#Backslash_escapes"><span class="tocnumber">1.5.1</span> <span class="toctext">Backslash escapes</span></a></li>
<li class="toclevel-3 tocsection-20"><a href="#String_literal_concatenation"><span class="tocnumber">1.5.2</span> <span class="toctext">String literal concatenation</span></a></li>
<li class="toclevel-3 tocsection-21"><a href="#Character_constants"><span class="tocnumber">1.5.3</span> <span class="toctext">Character constants</span></a></li>
<li class="toclevel-3 tocsection-22"><a href="#Wide_character_strings"><span class="tocnumber">1.5.4</span> <span class="toctext">Wide character strings</span></a></li>
<li class="toclevel-3 tocsection-23"><a href="#Variable_width_strings"><span class="tocnumber">1.5.5</span> <span class="toctext">Variable width strings</span></a></li>
<li class="toclevel-3 tocsection-24"><a href="#Library_functions"><span class="tocnumber">1.5.6</span> <span class="toctext">Library functions</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-25"><a href="#Structures_and_unions"><span class="tocnumber">1.6</span> <span class="toctext">Structures and unions</span></a>
<ul>
<li class="toclevel-3 tocsection-26"><a href="#Structures"><span class="tocnumber">1.6.1</span> <span class="toctext">Structures</span></a></li>
<li class="toclevel-3 tocsection-27"><a href="#Unions"><span class="tocnumber">1.6.2</span> <span class="toctext">Unions</span></a></li>
<li class="toclevel-3 tocsection-28"><a href="#Declaration"><span class="tocnumber">1.6.3</span> <span class="toctext">Declaration</span></a></li>
<li class="toclevel-3 tocsection-29"><a href="#Accessing_members"><span class="tocnumber">1.6.4</span> <span class="toctext">Accessing members</span></a></li>
<li class="toclevel-3 tocsection-30"><a href="#Assignment"><span class="tocnumber">1.6.5</span> <span class="toctext">Assignment</span></a></li>
<li class="toclevel-3 tocsection-31"><a href="#Other_operations"><span class="tocnumber">1.6.6</span> <span class="toctext">Other operations</span></a></li>
<li class="toclevel-3 tocsection-32"><a href="#Bit_fields"><span class="tocnumber">1.6.7</span> <span class="toctext">Bit fields</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-33"><a href="#Initialization"><span class="tocnumber">1.7</span> <span class="toctext">Initialization</span></a>
<ul>
<li class="toclevel-3 tocsection-34"><a href="#Designated_initializers"><span class="tocnumber">1.7.1</span> <span class="toctext">Designated initializers</span></a></li>
<li class="toclevel-3 tocsection-35"><a href="#Compound_literals"><span class="tocnumber">1.7.2</span> <span class="toctext">Compound literals</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-36"><a href="#Operators"><span class="tocnumber">2</span> <span class="toctext">Operators</span></a></li>
<li class="toclevel-1 tocsection-37"><a href="#Control_structures"><span class="tocnumber">3</span> <span class="toctext">Control structures</span></a>
<ul>
<li class="toclevel-2 tocsection-38"><a href="#Compound_statements"><span class="tocnumber">3.1</span> <span class="toctext">Compound statements</span></a></li>
<li class="toclevel-2 tocsection-39"><a href="#Selection_statements"><span class="tocnumber">3.2</span> <span class="toctext">Selection statements</span></a></li>
<li class="toclevel-2 tocsection-40"><a href="#Iteration_statements"><span class="tocnumber">3.3</span> <span class="toctext">Iteration statements</span></a></li>
<li class="toclevel-2 tocsection-41"><a href="#Jump_statements"><span class="tocnumber">3.4</span> <span class="toctext">Jump statements</span></a>
<ul>
<li class="toclevel-3 tocsection-42"><a href="#Storing_the_address_of_a_label"><span class="tocnumber">3.4.1</span> <span class="toctext">Storing the address of a label</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-43"><a href="#Functions"><span class="tocnumber">4</span> <span class="toctext">Functions</span></a>
<ul>
<li class="toclevel-2 tocsection-44"><a href="#Syntax"><span class="tocnumber">4.1</span> <span class="toctext">Syntax</span></a>
<ul>
<li class="toclevel-3 tocsection-45"><a href="#Function_Pointers"><span class="tocnumber">4.1.1</span> <span class="toctext">Function Pointers</span></a></li>
</ul>
</li>
<li class="toclevel-2 tocsection-46"><a href="#Global_structure"><span class="tocnumber">4.2</span> <span class="toctext">Global structure</span></a></li>
<li class="toclevel-2 tocsection-47"><a href="#Argument_passing"><span class="tocnumber">4.3</span> <span class="toctext">Argument passing</span></a>
<ul>
<li class="toclevel-3 tocsection-48"><a href="#Array_parameters"><span class="tocnumber">4.3.1</span> <span class="toctext">Array parameters</span></a></li>
</ul>
</li>
</ul>
</li>
<li class="toclevel-1 tocsection-49"><a href="#Miscellaneous"><span class="tocnumber">5</span> <span class="toctext">Miscellaneous</span></a>
<ul>
<li class="toclevel-2 tocsection-50"><a href="#Reserved_keywords"><span class="tocnumber">5.1</span> <span class="toctext">Reserved keywords</span></a></li>
<li class="toclevel-2 tocsection-51"><a href="#Case_sensitivity"><span class="tocnumber">5.2</span> <span class="toctext">Case sensitivity</span></a></li>
<li class="toclevel-2 tocsection-52"><a href="#Comments"><span class="tocnumber">5.3</span> <span class="toctext">Comments</span></a></li>
<li class="toclevel-2 tocsection-53"><a href="#Command-line_arguments"><span class="tocnumber">5.4</span> <span class="toctext">Command-line arguments</span></a></li>
<li class="toclevel-2 tocsection-54"><a href="#Evaluation_order"><span class="tocnumber">5.5</span> <span class="toctext">Evaluation order</span></a></li>
<li class="toclevel-2 tocsection-55"><a href="#Undefined_behavior"><span class="tocnumber">5.6</span> <span class="toctext">Undefined behavior</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-56"><a href="#See_also"><span class="tocnumber">6</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-57"><a href="#References"><span class="tocnumber">7</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-58"><a href="#External_links"><span class="tocnumber">8</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Data_structures">Data structures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=1" title="Edit section: Data structures">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="rellink relarticle mainarticle">Main article: <a href="C_variable_types_and_declarations.html" title="C variable types and declarations">C variable types and declarations</a></div>
<h3><span class="mw-headline" id="Primitive_data_types">Primitive data types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=2" title="Edit section: Primitive data types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The C language represents numbers in three forms: <i>integral</i>, <i>real</i> and <i>complex</i>. This distinction reflects similar distinctions in the <a href="http://en.wikipedia.org/wiki/Instruction_set" title="Instruction set">instruction set</a> architecture of most <a href="http://en.wikipedia.org/wiki/Central_processing_unit" title="Central processing unit">central processing units</a>. <i>Integral</i> data types store numbers in the set of <a href="http://en.wikipedia.org/wiki/Integers" title="Integers" class="mw-redirect">integers</a>, while <i>real</i> and <i>complex</i> numbers represent numbers (or pair of numbers) in the set of <a href="http://en.wikipedia.org/wiki/Real_numbers" title="Real numbers" class="mw-redirect">real numbers</a> in <a href="Floating_point.html" title="Floating point">floating point</a> form.</p>
<p>All C integer types have <tt>signed</tt> and <tt>unsigned</tt> variants. If <tt>signed</tt> or <tt>unsigned</tt> is not specified explicitly, in most circumstances <tt>signed</tt> is assumed. However, for historic reasons plain <tt>char</tt> is a type distinct from both <tt>signed</tt> <tt>char</tt> and <tt>unsigned</tt> <tt>char</tt>. It may be a signed type or an unsigned type, depending on the compiler and the character set (C guarantees that members of the C basic character set have positive values). Also, <a href="http://en.wikipedia.org/wiki/Bit_field" title="Bit field">bit field</a> types specified as plain <tt>int</tt> may be signed or unsigned, depending on the compiler.</p>
<h4><span class="mw-headline" id="Integer_types">Integer types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=3" title="Edit section: Integer types">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>C's integer types come in different fixed sizes, capable of representing various ranges of numbers. The type <tt>char</tt> occupies exactly one <a href="Byte.html" title="Byte">byte</a> (the smallest addressable storage unit), which is typically 8 bits wide. (Although <tt>char</tt> can represent any of C's "basic" characters, a wider type may be required for international character sets.) Most integer types have both <a href="http://en.wikipedia.org/wiki/Signedness" title="Signedness">signed and unsigned</a> varieties, designated by the <tt>signed</tt> and <tt>unsigned</tt> keywords. Signed integer types may use a <a href="http://en.wikipedia.org/wiki/Two%27s_complement" title="Two's complement">two's complement</a>, <a href="http://en.wikipedia.org/wiki/Ones%27_complement" title="Ones' complement">ones' complement</a>, or <a href="http://en.wikipedia.org/wiki/Sign-and-magnitude" title="Sign-and-magnitude" class="mw-redirect">sign-and-magnitude</a> <a href="http://en.wikipedia.org/wiki/Signed_number_representations" title="Signed number representations">representation</a>. In many cases, there are multiple equivalent ways to designate the type; for example, <tt>signed</tt> <tt>short</tt> <tt>int</tt> and <tt>short</tt> are synonymous.</p>
<p>The representation of some types may include unused "padding" bits, which occupy storage but are not included in the width. The following table provides a complete list of the standard integer types and their <i>minimum</i> allowed widths (including any sign bit).</p>
<table class="wikitable">
<caption>Specifications for standard integer types</caption>
<tr>
<th>Shortest form of specifier</th>
<th>Minimum width (bits)</th>
</tr>
<tr>
<td><tt>_Bool</tt></td>
<td style="text-align: center">1</td>
</tr>
<tr>
<td><tt>char</tt></td>
<td style="text-align: center">8</td>
</tr>
<tr>
<td><tt>signed char</tt></td>
<td style="text-align: center">8</td>
</tr>
<tr>
<td><tt>unsigned char</tt></td>
<td style="text-align: center">8</td>
</tr>
<tr>
<td><tt>short</tt></td>
<td style="text-align: center">16</td>
</tr>
<tr>
<td><tt>unsigned short</tt></td>
<td style="text-align: center">16</td>
</tr>
<tr>
<td><tt>int</tt></td>
<td style="text-align: center">16</td>
</tr>
<tr>
<td><tt>unsigned int</tt></td>
<td style="text-align: center">16</td>
</tr>
<tr>
<td><tt>long</tt></td>
<td style="text-align: center">32</td>
</tr>
<tr>
<td><tt>unsigned long</tt></td>
<td style="text-align: center">32</td>
</tr>
<tr>
<td><tt>long long</tt><sup id="cite_ref-long_long_1-0" class="reference"><a href="#cite_note-long_long-1"><span>[</span>1<span>]</span></a></sup></td>
<td style="text-align: center">64</td>
</tr>
<tr>
<td><tt>unsigned long long</tt><sup id="cite_ref-long_long_1-1" class="reference"><a href="#cite_note-long_long-1"><span>[</span>1<span>]</span></a></sup></td>
<td style="text-align: center">64</td>
</tr>
</table>
<p>The <tt>char</tt> type is distinct from both <tt>signed</tt> <tt>char</tt> and <tt>unsigned</tt> <tt>char</tt>, but is guaranteed to have the same representation as one of them. The <tt>_Bool</tt> and <tt>long</tt> <tt>long</tt> types are standardized since 1999, and may not be supported by older C compilers. Type <tt>_Bool</tt> is usually accessed via the typedef name <tt>bool</tt> defined by the standard header <a href="http://en.wikipedia.org/wiki/Stdbool.h" title="Stdbool.h" class="mw-redirect">stdbool.h</a>.</p>
<p>In general, the widths and representation scheme implemented for any given platform are chosen based on the machine architecture, with some consideration given to the ease of importing source code developed for other platforms. The width of the <tt>int</tt> type varies especially widely among C implementations; it often corresponds to the most "natural" word size for the specific platform. The standard header <a href="http://en.wikipedia.org/wiki/Limits.h" title="Limits.h" class="mw-redirect">limits.h</a> defines macros for the minimum and maximum representable values of the standard integer types as implemented on any specific platform.</p>
<p>In addition to the standard integer types, there may be other "extended" integer types, which can be used for typedefs in standard headers. For more precise specification of width, programmers can and should use typedefs from the standard header <a href="http://en.wikipedia.org/wiki/Stdint.h" title="Stdint.h" class="mw-redirect">stdint.h</a>.</p>
<p>Integer constants may be specified in source code in several ways. Numeric values can be specified as <a href="http://en.wikipedia.org/wiki/Decimal" title="Decimal">decimal</a> (example: <tt>1022</tt>), <a href="http://en.wikipedia.org/wiki/Octal" title="Octal">octal</a> with zero (0) as a prefix (<tt>01776</tt>), or <a href="http://en.wikipedia.org/wiki/Hexadecimal" title="Hexadecimal">hexadecimal</a> with 0x (zero x) as a prefix (<tt>0x3FE</tt>). A character in single quotes (example: <tt>'R'</tt>), called a "character constant," represents the value of that character in the execution character set, with type <tt>int</tt>. Except for character constants, the type of an integer constant is determined by the width required to represent the specified value, but is always at least as wide as <tt>int</tt>. This can be overridden by appending an explicit length and/or signedness modifier; for example, <tt>12lu</tt> has type <tt>unsigned</tt> <tt>long</tt>. There are no negative integer constants, but the same effect can often be obtained by using a unary negation operator "-".</p>
<h4><span class="mw-headline" id="Enumerated_type">Enumerated type</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=4" title="Edit section: Enumerated type">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>The <a href="Enumerated_type.html" title="Enumerated type">enumerated type</a> in C, specified with the <tt>enum</tt> keyword, and often just called an "enum" (usually pronounced <i>ee'-num</i> /ˌi.nʌm/ or <i>ee'-noom</i> /ˌi.nuːm/), is a type designed to represent values across a series of named constants. Each of the enumerated constants has type <tt>int</tt>. Each <tt>enum</tt> type itself is compatible with <tt>char</tt> or a signed or unsigned integer type, but each implementation defines its own rules for choosing a type.</p>
<p>Some compilers warn if an object with enumerated type is assigned a value that is not one of its constants. However, such an object can be assigned any values in the range of their compatible type, and <tt>enum</tt> constants can be used anywhere an integer is expected. For this reason, <tt>enum</tt> values are often used in place of preprocessor <tt>#define</tt> directives to create named constants. Such constants are generally safer to use than macros, since they reside within a specific identifier namespace.</p>
<p>An enumerated type is declared with the <tt>enum</tt> specifier and an optional name (or <i>tag</i>) for the enum, followed by a list of one or more constants contained within curly braces and separated by commas, and an optional list of variable names. Subsequent references to a specific enumerated type use the <tt>enum</tt> keyword and the name of the enum. By default, the first constant in an enumeration is assigned the value zero, and each subsequent value is incremented by one over the previous constant. Specific values may also be assigned to constants in the declaration, and any subsequent constants without specific values will be given incremented values from that point onward. For example, consider the following declaration:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw2">enum</span> colors <span class="br0">{</span> RED<span class="sy0">,</span> GREEN<span class="sy0">,</span> BLUE <span class="sy0">=</span> <span class="nu0">5</span><span class="sy0">,</span> YELLOW <span class="br0">}</span> paint_color<span class="sy0">;</span>
</pre></div>
</div>
<p>This declares the <tt>enum</tt> <tt>colors</tt> type; the <tt>int</tt> constants <tt>RED</tt> (whose value is 0), <tt>GREEN</tt> (whose value is one greater than <tt>RED</tt>, 1), <tt>BLUE</tt> (whose value is the given value, 5), and <tt>YELLOW</tt> (whose value is one greater than <tt>BLUE</tt>, 6); and the <tt>enum</tt> <tt>colors</tt> variable <tt>paint_color</tt>. The constants may be used outside of the context of the enum (where any integer value is allowed), and values other than the constants may be assigned to <tt>paint_color</tt>, or any other variable of type <tt>enum</tt> <tt>colors</tt>.</p>
<h4><span class="mw-headline" id="Floating_point_types">Floating point types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=5" title="Edit section: Floating point types">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>The floating-point form is used to represent numbers with a fractional component. They do not, however, represent most rational numbers exactly; they are instead a close approximation. There are three types of real values, denoted by their specifiers: single precision (<tt>float</tt>), double precision (<tt>double</tt>), and double extended precision (<tt>long</tt> <tt>double</tt>). Each of these may represent values in a different form, often one of the <a href="http://en.wikipedia.org/wiki/IEEE_floating-point" title="IEEE floating-point" class="mw-redirect">IEEE floating point</a> formats.</p>
<table class="wikitable" width="80%">
<caption>Floating-point types</caption>
<tr>
<th rowspan="2">Type specifiers</th>
<th colspan="2">Precision (decimal digits)</th>
<th colspan="2">Exponent range</th>
</tr>
<tr>
<th>Minimum</th>
<th>IEEE 754</th>
<th>Minimum</th>
<th>IEEE 754</th>
</tr>
<tr>
<td><tt>float</tt></td>
<td align="center">6</td>
<td align="center">7.2 (24 bits)</td>
<td align="center">±37</td>
<td align="center">±38 (8 bits)</td>
</tr>
<tr>
<td><tt>double</tt></td>
<td align="center">10</td>
<td align="center">15.9 (53 bits)</td>
<td align="center">±37</td>
<td align="center">±307 (11 bits)</td>
</tr>
<tr>
<td><tt>long double</tt></td>
<td align="center">10</td>
<td align="center">34.0 (113 bits)</td>
<td align="center">±37</td>
<td align="center">±4931 (15 bits)</td>
</tr>
</table>
<p>Floating-point constants may be written in decimal notation, e.g. <tt>1.23</tt>. Scientific notation may be used by adding <tt>e</tt> or <tt>E</tt> followed by a decimal exponent, e.g. <tt>1.23e2</tt> (which has the value 123.0). Either a decimal point or an exponent is required (otherwise, the number is parsed as an integer constant). Hexadecimal floating-point constants follow similar rules, except that they must be prefixed by <tt>0x</tt> and use <tt>p</tt> or <tt>P</tt> to specify a binary exponent, e.g. <tt>0xAp-2</tt> (which has the value 2.5, since 10 × 2<sup>−2</sup> = 10 ÷ 4). Both decimal and hexadecimal floating-point constants may be suffixed by <tt>f</tt> or <tt>F</tt> to indicate a constant of type <tt>float</tt>, by <tt>l</tt> (letter <tt>l</tt>) or <tt>L</tt> to indicate type <tt>long</tt> <tt>double</tt>, or left unsuffixed for a <tt>double</tt> constant.</p>
<p>The standard header file <a href="http://en.wikipedia.org/wiki/Float.h" title="Float.h" class="mw-redirect"><tt>float.h</tt></a> defines the minimum and maximum values of the implementation's floating-point types <tt>float</tt>, <tt>double</tt>, and <tt>long</tt> <tt>double</tt>. It also defines other limits that are relevant to the processing of floating-point numbers.</p>
<h4><span class="mw-headline" id="Storage_duration_specifiers">Storage duration specifiers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=6" title="Edit section: Storage duration specifiers">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Every object has a storage class, which may be automatic, static, or allocated.</p>
<table class="wikitable">
<caption>Storage classes</caption>
<tr>
<th>Specifiers</th>
<th>Lifetime</th>
<th>Scope</th>
<th>Default initializer</th>
</tr>
<tr>
<td><tt>auto</tt></td>
<td>Block (stack)</td>
<td>Block</td>
<td>Uninitialized</td>
</tr>
<tr>
<td><tt>register</tt></td>
<td>Block (stack or CPU register)</td>
<td>Block</td>
<td>Uninitialized</td>
</tr>
<tr>
<td><tt>static</tt></td>
<td>Program</td>
<td>Block or compilation unit</td>
<td>Zero</td>
</tr>
<tr>
<td><tt>extern</tt></td>
<td>Program</td>
<td>Block or compilation unit</td>
<td>Zero</td>
</tr>
<tr>
<td><i>(none)</i><sup>1</sup></td>
<td>Dynamic (heap)</td>
<td></td>
<td>Uninitialized</td>
</tr>
</table>
<dl>
<dd><sup>1</sup> Allocated and deallocated using the <tt>malloc()</tt> and <tt>free()</tt> library functions.</dd>
</dl>
<p>Variables declared within a block by default have automatic storage, as do those explicitly declared with the <a href="http://en.wikipedia.org/wiki/Automatic_variable" title="Automatic variable"><tt>auto</tt></a><sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>2<span>]</span></a></sup> or <tt>register</tt> storage class specifiers. The <tt>auto</tt> and <tt>register</tt> specifiers may only be used within functions and function argument declarations; as such, the <tt>auto</tt> specifier is always redundant. Objects declared outside of all blocks and those explicitly declared with the <a href="http://en.wikipedia.org/wiki/Static_variable" title="Static variable"><tt>static</tt></a> storage class specifier have static storage duration. Static variables are initialized to zero by default by the <a href="Compiler.html" title="Compiler">compiler</a>.</p>
<p>Objects with automatic storage are local to the block in which they were declared and are discarded when the block is exited. Additionally, objects declared with the <tt>register</tt> storage class may be given higher priority by the compiler for access to <a href="http://en.wikipedia.org/wiki/Register_(computing)" title="Register (computing)" class="mw-redirect">registers</a>; although they may not actually be stored in registers, objects with this storage class may not be used with the address-of (<tt>&amp;</tt>) unary operator. Objects with static storage persist for the program's entire duration. In this way, the same object can be accessed by a function across multiple calls. Objects with allocated storage duration are created and destroyed explicitly with <a href="Malloc.html" title="Malloc" class="mw-redirect"><tt>malloc</tt></a>, <tt>free</tt>, and related functions.</p>
<p>The <a href="External_variable.html" title="External variable"><tt>extern</tt></a> storage class specifier indicates that the storage for an object has been defined elsewhere. When used inside a block, it indicates that the storage has been defined by a declaration outside of that block. When used outside of all blocks, it indicates that the storage has been defined outside of the compilation unit. The <tt>extern</tt> storage class specifier is redundant when used on a function declaration. It indicates that the declared function has been defined outside of the compilation unit.</p>
<p>Note that storage specifiers apply only to functions and objects; other things such as type and enum declarations are private to the compilation unit in which they appear. Types, on the other hand, have qualifiers (see below).</p>
<h4><span class="mw-headline" id="Type_qualifiers">Type qualifiers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=7" title="Edit section: Type qualifiers">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Objects can be qualified to indicate special properties of the data they contain. The type qualifier <tt>const</tt> indicates that the value of an object does not change once it has been initialized. Attempting to modify a <tt>const</tt> qualified object yields undefined behavior, so some C compilers store them in read-only segments of memory. The type qualifier <tt>volatile</tt> indicates that the value of an object may change even if the value was not modified by any expression or statement(see <a href="Volatile_variable.html" title="Volatile variable">volatile variable</a>); this informs the compiler that it may not remove redundant object access.</p>
<h3><span class="mw-headline" id="Incomplete_types">Incomplete types</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=8" title="Edit section: Incomplete types">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>An incomplete type is a <a href="#Structures_and_unions">structure or union</a> type whose members have not yet been specified, an <a href="#Arrays">array type</a> whose dimension has not yet been specified, or the <tt>void</tt> type (the <tt>void</tt> type cannot be completed). Such a type may not be instantiated (its size is not known), nor may its members be accessed (they, too, are unknown); however, the derived pointer type may be used (but not dereferenced).</p>
<p>They are often used with pointers, either as forward or external declarations. For instance, code could declare an incomplete type like this:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> thing <span class="sy0">*</span>pt<span class="sy0">;</span>
</pre></div>
</div>
<p>This declares <tt>pt</tt> as a pointer to <tt>struct thing</tt> <i>and</i> the incomplete type <tt>struct thing</tt>. Pointers always have the same byte-width regardless of what they point to, so this statement is valid by itself (as long as <tt>pt</tt> is not dereferenced). The incomplete type can be completed later in the same scope by redeclaring it:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> thing
<span class="br0">{</span>
    <span class="kw4">int</span> num<span class="sy0">;</span>
<span class="br0">}</span> <span class="coMULTI">/* thing struct type is now completed */</span>
</pre></div>
</div>
<p>Incomplete types are used to implement <a href="http://en.wikipedia.org/wiki/Recursion_(computer_science)" title="Recursion (computer science)">recursive</a> structures; the body of the type declaration may be deferred to later in the translation unit:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">typedef</span> <span class="kw4">struct</span> Bert Bert<span class="sy0">;</span>
<span class="kw4">typedef</span> <span class="kw4">struct</span> Wilma Wilma<span class="sy0">;</span>
 
<span class="kw4">struct</span> Bert
<span class="br0">{</span>
    Wilma <span class="sy0">*</span>wilma<span class="sy0">;</span>
<span class="br0">}</span><span class="sy0">;</span>
 
<span class="kw4">struct</span> Wilma
<span class="br0">{</span>
    Bert <span class="sy0">*</span>bert<span class="sy0">;</span>
<span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Incomplete types are also used for <a href="http://en.wikipedia.org/wiki/Data_hiding" title="Data hiding" class="mw-redirect">data hiding</a>; the incomplete type is defined in a <a href="Header_file.html" title="Header file" class="mw-redirect">header file</a>, and the body only within the relevant source file.</p>
<h3><span class="mw-headline" id="Pointers">Pointers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=9" title="Edit section: Pointers">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In declarations the asterisk modifier (<tt>*</tt>) specifies a pointer type. For example, where the specifier <tt>int</tt> would refer to the integer type, the specifier <tt>int*</tt> refers to the type "pointer to integer". Pointer values associate two pieces of information: a memory address and a data type. The following line of code declares a pointer-to-integer variable called <i>ptr</i>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> <span class="sy0">*</span>ptr<span class="sy0">;</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Referencing">Referencing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=10" title="Edit section: Referencing">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>When a non-static pointer is declared, it has an unspecified value associated with it. The address associated with such a pointer must be changed by assignment prior to using it. In the following example, <i>ptr</i> is set so that it points to the data associated with the variable <i>a</i>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> <span class="sy0">*</span>ptr<span class="sy0">;</span>
<span class="kw4">int</span> a<span class="sy0">;</span>
 
ptr <span class="sy0">=</span> <span class="sy0">&amp;</span>a<span class="sy0">;</span>
</pre></div>
</div>
<p>In order to accomplish this, the "address-of" operator (unary <tt>&amp;</tt>) is used. It produces the memory location of the data object that follows.</p>
<h4><span class="mw-headline" id="Dereferencing">Dereferencing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=11" title="Edit section: Dereferencing">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>The pointed-to data can be accessed through a pointer value. In the following example, the integer variable <i>b</i> is set to the value of integer variable <i>a</i>, which is 10:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> <span class="sy0">*</span>p<span class="sy0">;</span>
<span class="kw4">int</span> a<span class="sy0">,</span> b<span class="sy0">;</span>
 
a <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
p <span class="sy0">=</span> <span class="sy0">&amp;</span>a<span class="sy0">;</span>
b <span class="sy0">=</span> <span class="sy0">*</span>p<span class="sy0">;</span>
</pre></div>
</div>
<p>In order to accomplish that task, the unary <a href="http://en.wikipedia.org/wiki/Dereference_operator" title="Dereference operator">dereference operator</a>, denoted by an asterisk (*), is used. It returns the data to which its operand—which must be of pointer type—points. Thus, the expression *<i>p</i> denotes the same value as <i>a</i>. Dereferencing a <a href="Null_pointer.html" title="Null pointer" class="mw-redirect">null pointer</a> is illegal.</p>
<h3><span class="mw-headline" id="Arrays">Arrays</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=12" title="Edit section: Arrays">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h4><span class="mw-headline" id="Array_definition">Array definition</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=13" title="Edit section: Array definition">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Arrays are used in C to represent structures of consecutive elements of the same type. The definition of a (fixed-size) array has the following syntax:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> array<span class="br0">[</span><span class="nu0">100</span><span class="br0">]</span><span class="sy0">;</span>
</pre></div>
</div>
<p>which defines an array named <i>array</i> to hold 100 values of the primitive type <tt>int</tt>. If declared within a function, the array dimension may also be a non-constant expression, in which case memory for the specified number of elements will be allocated. In most contexts in later use, a mention of the variable <i>array</i> is converted to a pointer to the first item in the array. The <tt>sizeof</tt> operator is an exception: <tt>sizeof</tt> <tt>array</tt> yields the size of the entire array (that is, 100 times the size of an <tt>int</tt>, and <code>sizeof(array) / sizeof(int)</code> will return 100). Another exception is the &amp; (address-of) operator, which yields a pointer to the entire array, for example</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>ptr_to_array<span class="br0">)</span><span class="br0">[</span><span class="nu0">100</span><span class="br0">]</span> <span class="sy0">=</span> <span class="sy0">&amp;</span>array<span class="sy0">;</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Accessing_elements">Accessing elements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=14" title="Edit section: Accessing elements">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>The primary facility for accessing the values of the elements of an array is the array subscript operator. To access the <i>i</i>-indexed element of <i>array</i>, the syntax would be <tt>array[i]</tt>, which refers to the value stored in that array element.</p>
<p>Array subscript numbering begins at 0 (see <a href="http://en.wikipedia.org/wiki/Zero-based_indexing" title="Zero-based indexing" class="mw-redirect">Zero-based indexing</a>). The largest allowed array subscript is therefore equal to the number of elements in the array minus 1. To illustrate this, consider an array <i>a</i> declared as having 10 elements; the first element would be <tt>a[0]</tt> and the last element would be <tt>a[9]</tt>.</p>
<p>C provides no facility for automatic <a href="Bounds_checking.html" title="Bounds checking">bounds checking</a> for array usage. Though logically the last subscript in an array of 10 elements would be 9, subscripts 10, 11, and so forth could accidentally be specified, with undefined results.</p>
<p>Due to arrays and pointers being interchangeable, the addresses of each of the array elements can be expressed in equivalent <a href="Pointer_arithmetic.html" title="Pointer arithmetic" class="mw-redirect">pointer arithmetic</a>. The following table illustrates both methods for the existing array:</p>
<table class="wikitable" style="margin-left: auto; margin-right: auto; text-align: center">
<caption>Array subscripts vs. pointer arithmetic</caption>
<tr>
<th style="text-align: left">Element</th>
<th style="width: 9em">First</th>
<th style="width: 9em">Second</th>
<th style="width: 9em">Third</th>
<th style="width: 9em"><i>n</i>th</th>
</tr>
<tr>
<th style="text-align: left">Array subscript</th>
<td><span class="mw-geshi c source-c">array<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span></span></td>
<td><span class="mw-geshi c source-c">array<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span></span></td>
<td><span class="mw-geshi c source-c">array<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span></span></td>
<td><span class="mw-geshi c source-c">array<span class="br0">[</span>n <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span></span></td>
</tr>
<tr>
<th style="text-align: left">Dereferenced pointer</th>
<td><span class="mw-geshi c source-c"><span class="sy0">*</span>array</span></td>
<td><span class="mw-geshi c source-c"><span class="sy0">*</span><span class="br0">(</span>array <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span></span></td>
<td><span class="mw-geshi c source-c"><span class="sy0">*</span><span class="br0">(</span>array <span class="sy0">+</span> <span class="nu0">2</span><span class="br0">)</span></span></td>
<td><span class="mw-geshi c source-c"><span class="sy0">*</span><span class="br0">(</span>array <span class="sy0">+</span> n <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span></span></td>
</tr>
</table>
<p>Since the expression <tt>a[i]</tt> is semantically equivalent to <tt>*(a+i)</tt>, which in turn is equivalent to <tt>*(i+a)</tt>, the expression can also be written as <tt>i[a]</tt>, although this form is rarely used.</p>
<h4><span class="mw-headline" id="Variable-length_arrays">Variable-length arrays</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=15" title="Edit section: Variable-length arrays">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p><a href="C99.html" title="C99">C99</a> standardised <a href="Variable-length_array.html" title="Variable-length array">variable-length arrays</a> (VLAs) within block scope. Such array variables are allocated based on the value of an integer value at runtime upon entry to a block, and are deallocated at the end of the block.<sup id="cite_ref-bk21st_3-0" class="reference"><a href="#cite_note-bk21st-3"><span>[</span>3<span>]</span></a></sup> As of <a href="C11_(C_standard_revision).html" title="C11 (C standard revision)">C11</a> this feature is no longer required to be implemented by the compiler.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> n <span class="sy0">=</span> ...<span class="sy0">;</span>
<span class="kw4">int</span> a<span class="br0">[</span>n<span class="br0">]</span><span class="sy0">;</span>
a<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
</pre></div>
</div>
<p>This syntax produces an array whose size is fixed until the end of the block.</p>
<h4><span class="mw-headline" id="Dynamic_arrays">Dynamic arrays</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=16" title="Edit section: Dynamic arrays">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/C_dynamic_memory_allocation" title="C dynamic memory allocation">C dynamic memory allocation</a></div>
<p>Arrays that can be resized dynamically can be produced with the help of the <a href="C_standard_library.html" title="C standard library">C standard library</a>. The <tt><a href="Malloc.html" title="Malloc" class="mw-redirect">malloc</a></tt> function provides a simple method for allocating memory. It takes one parameter: the amount of memory to allocate in bytes. Upon successful allocation, <tt>malloc</tt> returns a generic (<tt>void</tt>) pointer value, pointing to the beginning of the allocated space. The pointer value returned is converted to an appropriate type implicitly by assignment. If the allocation could not be completed, <tt>malloc</tt> returns a <a href="Null_pointer.html" title="Null pointer" class="mw-redirect">null pointer</a>. The following segment is therefore similar in function to the above desired declaration:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdlib.h&gt; /* declares malloc */</span>
...
<span class="kw4">int</span> <span class="sy0">*</span>a<span class="sy0">;</span>
a <span class="sy0">=</span> <span class="kw3">malloc</span><span class="br0">(</span>n <span class="sy0">*</span> <span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
a<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> <span class="sy0">=</span> <span class="nu0">10</span><span class="sy0">;</span>
</pre></div>
</div>
<p>The result is a "pointer to <tt>int</tt>" variable (<i>a</i>) that points to the first of <i>n</i> contiguous <tt>int</tt> objects; due to array–pointer equivalence this can be used in place of an actual array name, as shown in the last line. The advantage in using this <a href="http://en.wikipedia.org/wiki/Dynamic_allocation" title="Dynamic allocation" class="mw-redirect">dynamic allocation</a> is that the amount of memory that is allocated to it can be limited to what is actually needed at run time, and this can be changed as needed (using the standard library function <tt><a href="http://en.wikipedia.org/wiki/Realloc" title="Realloc" class="mw-redirect">realloc</a></tt>).</p>
<p>When the dynamically-allocated memory is no longer needed, it should be released back to the run-time system. This is done with a call to the <tt>free</tt> function. It takes a single parameter: a pointer to previously allocated memory. This is the value that was returned by a previous call to <tt>malloc</tt>. It is considered good practice to then set the pointer variable to <tt>NULL</tt> so that further attempts to access the memory to which it points will fail. If this is not done, the variable becomes a <a href="Dangling_pointer.html" title="Dangling pointer">dangling pointer</a>, and such errors in the code (or manipulations by an attacker) might be very hard to detect and lead to obscure and potentially dangerous malfunction caused by memory corruption.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw3">free</span><span class="br0">(</span>a<span class="br0">)</span><span class="sy0">;</span>
a <span class="sy0">=</span> NULL<span class="sy0">;</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Multidimensional_arrays">Multidimensional arrays</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=17" title="Edit section: Multidimensional arrays">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>In addition, C supports arrays of multiple dimensions, which are stored in <a href="Row-major_order.html" title="Row-major order">row-major order</a>. Technically, C multidimensional arrays are just one-dimensional arrays whose elements are arrays. The syntax for declaring multidimensional arrays is as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> array2d<span class="br0">[</span>ROWS<span class="br0">]</span><span class="br0">[</span>COLUMNS<span class="br0">]</span><span class="sy0">;</span>
</pre></div>
</div>
<p>where <i>ROWS</i> and <i>COLUMNS</i> are constants. This defines a two-dimensional array. Reading the subscripts from left to right, <i>array2d</i> is an array of length <i>ROWS</i>, each element of which is an array of <i>COLUMNS</i> integers.</p>
<p>To access an integer element in this multidimensional array, one would use</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
array2d<span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span>
</pre></div>
</div>
<p>Again, reading from left to right, this accesses the 5th row, and the 4th element in that row. The expression <tt>array2d[4]</tt> is an array, which we are then subscripting with [3] to access the fourth integer.</p>
<table class="wikitable" style="margin-left: auto; margin-right: auto; text-align: center">
<caption>Array subscripts vs. pointer arithmetic<sup id="cite_ref-4" class="reference"><a href="#cite_note-4"><span>[</span>4<span>]</span></a></sup></caption>
<tr>
<th style="text-align: left">Element</th>
<th>First</th>
<th>Second row, second column</th>
<th><i>i</i>th row, <i>j</i>th column</th>
</tr>
<tr>
<th style="text-align: left">Array subscript</th>
<td><span class="mw-geshi c source-c">array<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span></span></td>
<td><span class="mw-geshi c source-c">array<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span></span></td>
<td><span class="mw-geshi c source-c">array<span class="br0">[</span>i <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span><span class="br0">[</span>j <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span></span></td>
</tr>
<tr>
<th style="text-align: left">Dereferenced pointer</th>
<td><span class="mw-geshi c source-c"><span class="sy0">*</span><span class="br0">(</span><span class="sy0">*</span><span class="br0">(</span>array <span class="sy0">+</span> <span class="nu0">0</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">0</span><span class="br0">)</span></span></td>
<td><span class="mw-geshi c source-c"><span class="sy0">*</span><span class="br0">(</span><span class="sy0">*</span><span class="br0">(</span>array <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span></span></td>
<td><span class="mw-geshi c source-c"><span class="sy0">*</span><span class="br0">(</span><span class="sy0">*</span><span class="br0">(</span>array <span class="sy0">+</span> i <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">+</span> j <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span></span></td>
</tr>
</table>
<p>Higher-dimensional arrays can be declared in a similar manner.</p>
<p>A multidimensional array should not be confused with an array of references to arrays (also known as an <a href="http://en.wikipedia.org/wiki/Iliffe_vector" title="Iliffe vector">Iliffe vectors</a> or sometimes an <i>array of arrays</i>). The former is always rectangular (all subarrays must be the same size), and occupies a contiguous region of memory. The latter is a one-dimensional array of pointers, each of which may point to the first element of a subarray in a different place in memory, and the sub-arrays do not have to be the same size. The latter can be created by multiple uses of <tt>malloc</tt>.</p>
<h3><span class="mw-headline" id="Strings">Strings</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=18" title="Edit section: Strings">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="C_string.html" title="C string" class="mw-redirect">C string</a></div>
<p>In C, string constants (literals) are surrounded by double quotes (<tt>"</tt>), e.g. <tt>"Hello</tt>&#160;<tt>world!"</tt> and are compiled to an array of the specified <tt>char</tt> values with an additional <a href="http://en.wikipedia.org/wiki/Null_terminating_character" title="Null terminating character" class="mw-redirect">null terminating character</a> (0-valued) code to mark the end of the string.</p>
<p>String literals may not contain embedded newlines; this proscription somewhat simplifies parsing of the language. To include a newline in a string, the <a href="#Backslash_escapes">backslash escape</a> <tt>\n</tt> may be used, as below.</p>
<p>There are several standard library functions for operating with string data (not necessarily constant) organized as array of <tt>char</tt> using this null-terminated format; see <a href="#Library_functions">below</a>.</p>
<p>C's string-literal syntax has been very influential, and has made its way into many other languages, such as C++, Perl, Python, PHP, Java, Javascript, C#, Ruby. Nowadays, almost all new languages adopt or build upon C-style string syntax. Languages that lack this syntax tend to precede C.</p>
<h4><span class="mw-headline" id="Backslash_escapes">Backslash escapes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=19" title="Edit section: Backslash escapes">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>If you wish to include a double quote inside the string, that can be done by escaping it with a backslash (<tt>\</tt>), for example, <tt>"This</tt> <tt>string</tt> <tt>contains</tt> <tt>\"double</tt> <tt>quotes\"."</tt>. To insert a literal backslash, one must double it, e.g. <tt>"A</tt> <tt>backslash</tt> <tt>looks</tt> <tt>like</tt> <tt>this:</tt> <tt>\\"</tt>.</p>
<p>Backslashes may be used to enter control characters, etc., into a string:</p>
<table>
<tr>
<th align="left">Escape</th>
<th align="left">Meaning</th>
</tr>
<tr>
<td><tt>\\</tt></td>
<td>Literal backslash</td>
</tr>
<tr>
<td><tt>\"</tt></td>
<td>Double quote</td>
</tr>
<tr>
<td><tt>\'</tt></td>
<td>Single quote</td>
</tr>
<tr>
<td><tt>\n</tt></td>
<td>Newline (line feed)</td>
</tr>
<tr>
<td><tt>\r</tt></td>
<td>Carriage return</td>
</tr>
<tr>
<td><tt>\b</tt></td>
<td>Backspace</td>
</tr>
<tr>
<td><tt>\t</tt></td>
<td>Horizontal tab</td>
</tr>
<tr>
<td><tt>\f</tt></td>
<td>Form feed</td>
</tr>
<tr>
<td><tt>\a</tt></td>
<td>Alert (bell)</td>
</tr>
<tr>
<td><tt>\v</tt></td>
<td>Vertical tab</td>
</tr>
<tr>
<td><tt>\?</tt></td>
<td>Question mark (used to escape <a href="http://en.wikipedia.org/wiki/C_trigraph" title="C trigraph" class="mw-redirect">trigraphs</a>)</td>
</tr>
<tr>
<td><tt>\</tt><i>ooo</i></td>
<td>Character with octal value <i>ooo</i></td>
</tr>
<tr>
<td><tt>\x</tt><i>hh</i></td>
<td>Character with hexadecimal value <i>hh</i></td>
</tr>
</table>
<p>The use of other backslash escapes is not defined by the C standard, although compiler vendors often provide additional escape codes as language extensions.</p>
<h4><span class="mw-headline" id="String_literal_concatenation">String literal concatenation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=20" title="Edit section: String literal concatenation">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Adjacent string literals are concatenated at compile time; this allows long strings to be split over multiple lines, and also allows string literals resulting from <a href="C_preprocessor.html" title="C preprocessor">C preprocessor</a> defines and macros to be appended to strings at compile time:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
    <span class="kw3">printf</span><span class="br0">(</span>__FILE__ <span class="st0">": %d: Hello "</span>
           <span class="st0">"world<span class="es1">\n</span>"</span><span class="sy0">,</span> __LINE__<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>will expand to</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"helloworld.c"</span> <span class="st0">": %d: Hello "</span>
           <span class="st0">"world<span class="es1">\n</span>"</span><span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>which is syntactically equivalent to</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"helloworld.c: %d: Hello world<span class="es1">\n</span>"</span><span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Character_constants">Character constants</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=21" title="Edit section: Character constants">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Individual character constants are single-quoted, e.g. <tt>'A'</tt>, and have type <tt>int</tt> (in C++, <tt>char</tt>). The difference is that <tt>"A"</tt> represents a null-terminated array of two characters, 'A' and '\0', whereas <tt>'A'</tt> directly represents the character value (65 if ASCII is used). The same backslash-escapes are supported as for strings, except that (of course) <tt>"</tt> can validly be used as a character without being escaped, whereas <tt>'</tt> must now be escaped.</p>
<p>A character constant cannot be empty (i.e. <tt>''</tt> is invalid syntax), although a string may be (it still has the null terminating character). Multi-character constants (e.g. <tt>'xy'</tt>) are valid, although rarely useful — they let one store several characters in an integer (e.g. 4 ASCII characters can fit in a 32-bit integer, 8 in a 64-bit one). Since the order in which the characters are packed into an <tt>int</tt> is not specified, portable use of multi-character constants is difficult.</p>
<h4><span class="mw-headline" id="Wide_character_strings">Wide character strings</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=22" title="Edit section: Wide character strings">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Since type <tt>char</tt> is usually 1 byte wide, a single <tt>char</tt> value typically can represent at most 255 distinct character codes, not nearly enough for all the characters in use worldwide. To provide better support for international characters, the first C standard (C89) introduced <a href="http://en.wikipedia.org/wiki/Wide_character" title="Wide character">wide characters</a> (encoded in type <tt>wchar_t</tt>) and wide character strings, which are written as <tt>L"Hello</tt>&#160;<tt>world!"</tt></p>
<p>Wide characters are most commonly either 2 bytes (using a 2-byte encoding such as <a href="http://en.wikipedia.org/wiki/UTF-16" title="UTF-16">UTF-16</a>) or 4 bytes (usually <a href="http://en.wikipedia.org/wiki/UTF-32" title="UTF-32">UTF-32</a>), but Standard C does not specify the width for <tt>wchar_t</tt>, leaving the choice to the implementor. <a href="Microsoft_Windows.html" title="Microsoft Windows">Microsoft Windows</a> generally uses UTF-16, thus the above string would be 26 bytes long for a Microsoft compiler; the <a href="Unix.html" title="Unix">Unix</a> world prefers UTF-32, thus compilers such as GCC would generate a 52-byte string. A 2-byte wide <tt>wchar_t</tt> suffers the same limitation as <tt>char</tt>, in that certain characters (those outside the <a href="http://en.wikipedia.org/wiki/Basic_Multilingual_Plane" title="Basic Multilingual Plane" class="mw-redirect">BMP</a>) cannot be represented in a single <tt>wchar_t</tt>; but must be represented using <a href="http://en.wikipedia.org/wiki/Surrogate_pair" title="Surrogate pair" class="mw-redirect">surrogate pairs</a>.</p>
<p>The original C standard specified only minimal functions for operating with wide character strings; in 1995 the standard was modified to include much more extensive support, comparable to that for <tt>char</tt> strings. The relevant functions are mostly named after their <tt>char</tt> equivalents, with the addition of a "w" or the replacement of "str" with "wcs"; they are specified in <tt>&lt;wchar.h&gt;</tt>, with <tt>&lt;wctype.h&gt;</tt> containing wide-character classification and mapping functions.</p>
<p>The now generally recommended method<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span>[</span>5<span>]</span></a></sup> of supporting international characters is through <a href="http://en.wikipedia.org/wiki/UTF-8" title="UTF-8">UTF-8</a>, which is stored in <tt>char</tt> arrays, and can be written directly in the source code if using a UTF-8 editor, because UTF-8 is a direct <a href="http://en.wikipedia.org/wiki/Extended_ASCII" title="Extended ASCII">ASCII extension</a>.</p>
<h4><span class="mw-headline" id="Variable_width_strings">Variable width strings</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=23" title="Edit section: Variable width strings">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>A common alternative to <tt>wchar_t</tt> is to use a <a href="http://en.wikipedia.org/wiki/Variable-width_encoding" title="Variable-width encoding">variable-width encoding</a>, whereby a logical character may extend over multiple positions of the string. Variable-width strings may be encoded into literals verbatim, at the risk of confusing the compiler, or using numerical backslash escapes (e.g. <tt>"\xc3\xa9"</tt> for "é" in UTF-8). The <a href="http://en.wikipedia.org/wiki/UTF-8" title="UTF-8">UTF-8</a> encoding was specifically designed (under <a href="Plan_9_from_Bell_Labs.html" title="Plan 9 from Bell Labs">Plan 9</a>) for compatibility with the standard library string functions; supporting features of the encoding include a lack of embedded nulls, no valid interpretations for subsequences, and trivial resynchronisation. Encodings lacking these features are likely to prove incompatible with the standard library functions; encoding-aware string functions are often used in such cases.</p>
<h4><span class="mw-headline" id="Library_functions">Library functions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=24" title="Edit section: Library functions">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p><a href="http://en.wikipedia.org/wiki/String_(computer_science)" title="String (computer science)">Strings</a>, both constant and variable, may be manipulated without using the <a href="http://en.wikipedia.org/wiki/Standard_library" title="Standard library">standard library</a>. However, the library contains many useful functions for working with null-terminated strings. It is the programmer's responsibility to ensure that enough storage has been allocated to hold the resulting strings.</p>
<p>The most commonly used string functions are:</p>
<ul>
<li><tt>strcat(dest, source)</tt> - appends the string <tt>source</tt> to the end of string <tt>dest</tt></li>
<li><tt>strchr(s, c)</tt> - finds the first instance of character <tt>c</tt> in string <tt>s</tt> and returns a pointer to it or a null pointer if <tt>c</tt> is not found</li>
<li><tt>strcmp(a, b)</tt> - compares strings <tt>a</tt> and <tt>b</tt> (<a href="http://en.wikipedia.org/wiki/Lexicographical_order" title="Lexicographical order">lexicographical ordering</a>); returns negative if <tt>a</tt> is less than <tt>b</tt>, 0 if equal, positive if greater.</li>
<li><tt>strcpy(dest, source)</tt> - copies the string <tt>source</tt> onto the string <tt>dest</tt></li>
<li><tt>strlen(st)</tt> - return the length of string <tt>st</tt></li>
<li><tt>strncat(dest, source, n)</tt> - appends a maximum of <tt>n</tt> characters from the string <tt>source</tt> to the end of string <tt>dest</tt> and null terminates the string at the end of input or at index <tt>n+1</tt> when the max length is reached</li>
<li><tt>strncmp(a, b, n)</tt> - compares a maximum of <tt>n</tt> characters from strings <tt>a</tt> and <tt>b</tt> (lexical ordering); returns negative if <tt>a</tt> is less than <tt>b</tt>, 0 if equal, positive if greater</li>
<li><tt>strrchr(s, c)</tt> - finds the last instance of character <tt>c</tt> in string <tt>s</tt> and returns a pointer to it or a null pointer if <tt>c</tt> is not found</li>
</ul>
<p>Other standard string functions include:</p>
<ul>
<li><tt>strcoll(s1, s2)</tt> - compare two strings according to a locale-specific collating sequence</li>
<li><tt>strcspn(s1, s2)</tt> - returns the index of the first character in <tt>s1</tt> that matches any character in <tt>s2</tt></li>
<li><tt>strerror(errno)</tt> - returns a string with an error message corresponding to the code in <tt>errno</tt></li>
<li><tt>strncpy(dest, source, n)</tt> - copies <tt>n</tt> characters from the string <tt>source</tt> onto the string <tt>dest</tt>, substituting null bytes once past the end of <tt>source</tt>; does not null terminate if max length is reached</li>
<li><tt>strpbrk(s1, s2)</tt> - returns a pointer to the first character in <tt>s1</tt> that matches any character in <tt>s2</tt> or a null pointer if not found</li>
<li><tt>strspn(s1, s2)</tt> - returns the index of the first character in <tt>s1</tt> that matches no character in <tt>s2</tt></li>
<li><tt>strstr(st, subst)</tt> - returns a pointer to the first occurrence of the string <tt>subst</tt> in <tt>st</tt> or a null pointer if no such substring exists</li>
<li><tt>strtok(s1, s2)</tt> - returns a pointer to a token within <tt>s1</tt> delimited by the characters in <tt>s2</tt></li>
<li><tt>strxfrm(s1, s2, n)</tt> - transforms <tt>s2</tt> onto <tt>s1</tt>, such that <tt>s1</tt> used with <tt>strcmp</tt> gives the same results as <tt>s2</tt> used with <tt>strcoll</tt></li>
</ul>
<p>There is a similar set of functions for handling wide character strings.</p>
<h3><span class="mw-headline" id="Structures_and_unions">Structures and unions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=25" title="Edit section: Structures and unions">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<h4><span class="mw-headline" id="Structures">Structures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=26" title="Edit section: Structures">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Structures and unions in C are defined as data containers consisting of a sequence of named members of various types. They are similar to records in other programming so many languages. The members of a structure are stored in consecutive locations in memory, although the compiler is allowed to insert padding between or after members (but not before the first member) for efficiency or as padding required for proper <a href="http://en.wikipedia.org/wiki/Data_structure_alignment" title="Data structure alignment">alignment</a> by the target architecture. The size of a structure is equal to the sum of the sizes of its members, plus the size of the padding.</p>
<h4><span class="mw-headline" id="Unions">Unions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=27" title="Edit section: Unions">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Unions in C are related to structures and are defined as objects that may hold (at different times) objects of different types and sizes. They are analogous to variant records in other programming languages. Unlike structures, the components of a union all refer to the same location in memory. In this way, a union can be used at various times to hold different types of objects, without the need to create a separate object for each new type. The size of a union is equal to the size of its largest component type.</p>
<h4><span class="mw-headline" id="Declaration">Declaration</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=28" title="Edit section: Declaration">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Structures are declared with the <tt>struct</tt> keyword and unions are declared with the <tt>union</tt> keyword. The specifier keyword is followed by an optional identifier name, which is used to identify the form of the structure or union. The identifier is followed by the declaration of the structure or union's body: a list of member declarations, contained within curly braces, with each declaration terminated by a semicolon. Finally, the declaration concludes with an optional list of identifier names, which are declared as instances of the structure or union.</p>
<p>For example, the following statement declares a structure named <i>s</i> that contains three members; it will also declare an instance of the structure known as <i>tee</i>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> s
<span class="br0">{</span>
    <span class="kw4">int</span>   x<span class="sy0">;</span>
    <span class="kw4">float</span> y<span class="sy0">;</span>
    <span class="kw4">char</span>  <span class="sy0">*</span>z<span class="sy0">;</span>
<span class="br0">}</span> tee<span class="sy0">;</span>
</pre></div>
</div>
<p>And the following statement will declare a similar union named <i>u</i> and an instance of it named <i>n</i>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">union</span> u
<span class="br0">{</span>
    <span class="kw4">int</span>   x<span class="sy0">;</span>
    <span class="kw4">float</span> y<span class="sy0">;</span>
    <span class="kw4">char</span>  <span class="sy0">*</span>z<span class="sy0">;</span>
<span class="br0">}</span> n<span class="sy0">;</span>
</pre></div>
</div>
<p>Members of structures and unions cannot have an incomplete or function type. Thus members cannot be an instance of the structure or union being declared (because it is incomplete at that point) but can be pointers to the type being declared.</p>
<p>Once a structure or union body has been declared and given a name, it can be considered a new data type using the specifier <tt>struct</tt> or <tt>union</tt>, as appropriate, and the name. For example, the following statement, given the above structure declaration, declares a new instance of the structure <i>s</i> named <i>r</i>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> s r<span class="sy0">;</span>
</pre></div>
</div>
<p>It is also common to use the <tt>typedef</tt> specifier to eliminate the need for the <tt>struct</tt> or <tt>union</tt> keyword in later references to the structure. The first identifier after the body of the structure is taken as the new name for the structure type (structure instances may not be declared in this context). For example, the following statement will declare a new type known as <i>s_type</i> that will contain some structure:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">typedef</span> <span class="kw4">struct</span> <span class="br0">{</span>…<span class="br0">}</span> s_type<span class="sy0">;</span>
</pre></div>
</div>
<p>Future statements can then use the specifier <i>s_type</i> (instead of the expanded <tt>struct</tt> … specifier) to refer to the structure.</p>
<h4><span class="mw-headline" id="Accessing_members">Accessing members</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=29" title="Edit section: Accessing members">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Members are accessed using the name of the instance of a structure or union, a period (<tt>.</tt>), and the name of the member. For example, given the declaration of <i>tee</i> from above, the member known as <i>y</i> (of type <tt>float</tt>) can be accessed using the following syntax:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
tee.<span class="me1">y</span>
</pre></div>
</div>
<p>Structures are commonly accessed through pointers. Consider the following example that defines a pointer to <i>tee</i>, known as <i>ptr_to_tee</i>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> s <span class="sy0">*</span>ptr_to_tee <span class="sy0">=</span> <span class="sy0">&amp;</span>tee<span class="sy0">;</span>
</pre></div>
</div>
<p>Member <i>y</i> of <i>tee</i> can then be accessed by dereferencing <i>ptr_to_tee</i> and using the result as the left operand:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="br0">(</span><span class="sy0">*</span>ptr_to_tee<span class="br0">)</span>.<span class="me1">y</span>
</pre></div>
</div>
<p>Which is identical to the simpler <tt>tee.y</tt> above as long as <i>ptr_to_tee</i> points to <i>tee</i>. Due to <a href="Operators_in_C_and_C%2b%2b.html#Operator_precedence" title="Operators in C and C++">operator precedence</a> ("." being higher than "*"), the shorter <code>*ptr_to_tee.y</code> is incorrect for this purpose, instead being parsed as <code>*(ptr_to_tee.y)</code> and thus the parentheses are necessary. Because this operation is common, C provides an <a href="Syntactic_sugar.html" title="Syntactic sugar">abbreviated syntax</a> for accessing a member directly from a pointer. With this syntax, the name of the instance is replaced with the name of the pointer and the period is replaced with the character sequence <tt>-&gt;</tt>. Thus, the following method of accessing <i>y</i> is identical to the previous two:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
ptr_to_tee<span class="sy0">-&gt;</span>y
</pre></div>
</div>
<p>Members of unions are accessed in the same way.</p>
<p>This can be chained; for example, in a linked list, one may refer to <code>n-&gt;next-&gt;next</code> for the second following node (assuming that <code>n-&gt;next</code> is not null).</p>
<h4><span class="mw-headline" id="Assignment">Assignment</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=30" title="Edit section: Assignment">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Assigning values to individual members of structures and unions is syntactically identical to assigning values to any other object. The only difference is that the <i>lvalue</i> of the assignment is the name of the member, as accessed by the syntax mentioned above.</p>
<p>A structure can also be assigned as a unit to another structure of the same type. Structures (and pointers to structures) may also be used as function parameter and return types.</p>
<p>For example, the following statement assigns the value of 74 (the ASCII code point for the letter 't') to the member named <i>x</i> in the structure <i>tee</i>, from above:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
tee.<span class="me1">x</span> <span class="sy0">=</span> <span class="nu0">74</span><span class="sy0">;</span>
</pre></div>
</div>
<p>And the same assignment, using <i>ptr_to_tee</i> in place of <i>tee</i>, would look like:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
ptr_to_tee<span class="sy0">-&gt;</span>x <span class="sy0">=</span> <span class="nu0">74</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Assignment with members of unions is identical.</p>
<h4><span class="mw-headline" id="Other_operations">Other operations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=31" title="Edit section: Other operations">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>According to the C standard, the only legal operations that can be performed on a structure are copying it, assigning to it as a unit (or initializing it), taking its address with the address-of (<tt>&amp;</tt>) unary operator, and accessing its members. Unions have the same restrictions. One of the operations implicitly forbidden is comparison: structures and unions cannot be compared using C's standard comparison facilities (<tt>==</tt>, <tt>&gt;</tt>, <tt>&lt;</tt>, etc.).</p>
<h4><span class="mw-headline" id="Bit_fields">Bit fields</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=32" title="Edit section: Bit fields">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>C also provides a special type of structure member known as a <a href="http://en.wikipedia.org/wiki/Bit_field" title="Bit field">bit field</a>, which is an integer with an explicitly specified number of bits. A bit field is declared as a structure member of type <tt>int</tt>, <tt>signed</tt> <tt>int</tt>, <tt>unsigned</tt> <tt>int</tt>, or <tt>_Bool</tt>, following the member name by a colon (<tt>:</tt>) and the number of bits it should occupy. The total number of bits in a single bit field must not exceed the total number of bits in its declared type.</p>
<p>As a special exception to the usual C syntax rules, it is implementation-defined whether a bit field declared as type <tt>int</tt>, without specifying <tt>signed</tt> or <tt>unsigned</tt>, is signed or unsigned. Thus, it is recommended to explicitly specify <tt>signed</tt> or <tt>unsigned</tt> on all structure members for portability.</p>
<p>Unnamed fields consisting of just a colon followed by a number of bits are also allowed; these indicate <a href="http://en.wikipedia.org/wiki/Data_padding" title="Data padding" class="mw-redirect">padding</a>. Specifying a width of zero for an unnamed field is used to force <a href="http://en.wikipedia.org/wiki/Data_structure_alignment" title="Data structure alignment">alignment</a> to a new word.<sup id="cite_ref-6" class="reference"><a href="#cite_note-6"><span>[</span>6<span>]</span></a></sup></p>
<p>The members of bit fields do not have addresses, and as such cannot be used with the address-of (<tt>&amp;</tt>) unary operator. The <tt>sizeof</tt> operator may not be applied to bit fields.</p>
<p>The following declaration declares a new structure type known as <tt>f</tt> and an instance of it known as <tt>g</tt>. Comments provide a description of each of the members:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> f
<span class="br0">{</span>
    <span class="kw4">unsigned</span> <span class="kw4">int</span>  flag <span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">;</span>  <span class="coMULTI">/* a bit flag: can either be on (1) or off (0) */</span>
    <span class="kw4">signed</span> <span class="kw4">int</span>    num  <span class="sy0">:</span> <span class="nu0">4</span><span class="sy0">;</span>  <span class="coMULTI">/* a signed 4-bit field; range -7...7 or -8...7 */</span>
    <span class="kw4">signed</span> <span class="kw4">int</span>         <span class="sy0">:</span> <span class="nu0">3</span><span class="sy0">;</span>  <span class="coMULTI">/* 3 bits of padding to round out to 8 bits */</span>
<span class="br0">}</span> g<span class="sy0">;</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="Initialization">Initialization</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=33" title="Edit section: Initialization">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Default initialization depends on the <a href="#Storage_duration_specifiers">storage duration specifier</a>, described above.</p>
<p>Because of the language's grammar, a scalar initializer may be enclosed in any number of curly brace pairs. Most compilers issue a warning if there is more than one such pair, though.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> x <span class="sy0">=</span> <span class="nu0">12</span><span class="sy0">;</span>
<span class="kw4">int</span> y <span class="sy0">=</span> <span class="br0">{</span> <span class="nu0">23</span> <span class="br0">}</span><span class="sy0">;</span>     <span class="co1">//Legal, no warning</span>
<span class="kw4">int</span> z <span class="sy0">=</span> <span class="br0">{</span> <span class="br0">{</span> <span class="nu0">34</span> <span class="br0">}</span> <span class="br0">}</span><span class="sy0">;</span> <span class="co1">//Legal, expect a warning</span>
</pre></div>
</div>
<p>Structures, unions and arrays can be initialized in their declarations using an initializer list. Unless designators are used, the components of an initializer correspond with the elements in the order they are defined and stored, thus all preceding values must be provided before any particular element’s value. Any unspecified elements are set to zero (except for unions). Mentioning too many initialization values yields an error.</p>
<p>The following statement will initialize a new instance of the structure <i>s</i> known as <i>pi</i>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> s
<span class="br0">{</span>
    <span class="kw4">int</span>   x<span class="sy0">;</span>
    <span class="kw4">float</span> y<span class="sy0">;</span>
    <span class="kw4">char</span>  <span class="sy0">*</span>z<span class="sy0">;</span>
<span class="br0">}</span><span class="sy0">;</span>
 
<span class="kw4">struct</span> s pi <span class="sy0">=</span> <span class="br0">{</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu16">3.1415</span><span class="sy0">,</span> <span class="st0">"Pi"</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<h4><span class="mw-headline" id="Designated_initializers">Designated initializers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=34" title="Edit section: Designated initializers">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Designated initializers allow members to be initialized by name, in any order, and without explicitly providing the preceding values. The following initialization is equivalent to the previous one:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> s pi <span class="sy0">=</span> <span class="br0">{</span> .<span class="me1">z</span> <span class="sy0">=</span> <span class="st0">"Pi"</span><span class="sy0">,</span> .<span class="me1">x</span> <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">,</span> .<span class="me1">y</span> <span class="sy0">=</span> <span class="nu16">3.1415</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Using a designator in an initializer moves the initialization "cursor". In the example below, if <code>MAX</code> is greater than 10, there will be some zero-valued elements in the middle of <code>a</code>; if it is less than 10, some of the values provided by the first five initializers will be overridden by the second five (if <code>MAX</code> is less than 5, there will be a compilation error):</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> a<span class="br0">[</span>MAX<span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">9</span><span class="sy0">,</span> <span class="br0">[</span>MAX<span class="sy0">-</span><span class="nu0">5</span><span class="br0">]</span> <span class="sy0">=</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">0</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>In <a href="http://en.wikipedia.org/wiki/C89_(C_version)" title="C89 (C version)" class="mw-redirect">C89</a>, a union was initialized with a single value applied to its first member. That is, the union <i>u</i> defined above could only have its <i>int x</i> member initialized:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">union</span> u value <span class="sy0">=</span> <span class="br0">{</span> <span class="nu0">3</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Using a designated initializer, the member to be initialized does not have to be the first member:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">union</span> u value <span class="sy0">=</span> <span class="br0">{</span> .<span class="me1">y</span> <span class="sy0">=</span> <span class="nu16">3.1415</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>If an array has unknown size (i.e. the array was an <a href="#Incomplete_types">incomplete type</a>), the number of initializers determines the size of the array and its type becomes complete:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> x<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span> <span class="br0">}</span> <span class="sy0">;</span>
</pre></div>
</div>
<p>Compound designators can be used to provide explicit initialization when unadorned initializer lists might be misunderstood. In the example below, <code>w</code> is declared as an array of structures, each structure consisting in a member <code>a</code> (an array of 3 <code>int</code>) and a member <code>b</code> (an <code>int</code>). The initializer sets the size of <code>w</code> to 2 and sets the values of the first element of each <code>a</code>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> <span class="br0">{</span> <span class="kw4">int</span> a<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy0">,</span> b<span class="sy0">;</span> <span class="br0">}</span> w<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span> <span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span>.<span class="me1">a</span> <span class="sy0">=</span> <span class="br0">{</span><span class="nu0">1</span><span class="br0">}</span><span class="sy0">,</span> <span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span>.<span class="me1">a</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">=</span> <span class="nu0">2</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>This is equivalent to:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">struct</span> <span class="br0">{</span> <span class="kw4">int</span> a<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span><span class="sy0">,</span> b<span class="sy0">;</span> <span class="br0">}</span> w<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span>
<span class="br0">{</span>
   <span class="br0">{</span> <span class="br0">{</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span> <span class="br0">}</span><span class="sy0">,</span> <span class="nu0">0</span> <span class="br0">}</span><span class="sy0">,</span>
   <span class="br0">{</span> <span class="br0">{</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">0</span> <span class="br0">}</span><span class="sy0">,</span> <span class="nu0">0</span> <span class="br0">}</span> 
<span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>There is no way to specify repetition of an initializer in standard C.</p>
<h4><span class="mw-headline" id="Compound_literals">Compound literals</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=35" title="Edit section: Compound literals">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>It is possible to borrow the initialization methodology to generate compound structure and array literals:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span><span class="sy0">*</span> ptr<span class="sy0">;</span>
ptr <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><span class="br0">{</span> <span class="nu0">10</span><span class="sy0">,</span> <span class="nu0">20</span><span class="sy0">,</span> <span class="nu0">30</span><span class="sy0">,</span> <span class="nu0">40</span> <span class="br0">}</span><span class="sy0">;</span>
<span class="kw4">struct</span> s pi<span class="sy0">;</span>
pi <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">struct</span> s<span class="br0">)</span><span class="br0">{</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu16">3.1415</span><span class="sy0">,</span> <span class="st0">"Pi"</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<p>Compound literals are often combined with designated initializers to make the declaration more readable:<sup id="cite_ref-bk21st_3-1" class="reference"><a href="#cite_note-bk21st-3"><span>[</span>3<span>]</span></a></sup></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
pi <span class="sy0">=</span> <span class="br0">(</span><span class="kw4">struct</span> s<span class="br0">)</span><span class="br0">{</span> .<span class="me1">z</span> <span class="sy0">=</span> <span class="st0">"Pi"</span><span class="sy0">,</span> .<span class="me1">x</span> <span class="sy0">=</span> <span class="nu0">3</span><span class="sy0">,</span> .<span class="me1">y</span> <span class="sy0">=</span> <span class="nu16">3.1415</span> <span class="br0">}</span><span class="sy0">;</span>
</pre></div>
</div>
<h2><span class="mw-headline" id="Operators">Operators</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=36" title="Edit section: Operators">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="rellink relarticle mainarticle">Main article: <a href="Operators_in_C_and_C%2b%2b.html" title="Operators in C and C++">Operators in C and C++</a></div>
<h2><span class="mw-headline" id="Control_structures">Control structures</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=37" title="Edit section: Control structures">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>C is a <a href="Free-form_language.html" title="Free-form language">free-form language</a>.</p>
<p><a href="http://en.wikipedia.org/wiki/Bracing_style" title="Bracing style" class="mw-redirect">Bracing style</a> varies from <a href="Computer_programming.html" title="Computer programming">programmer</a> to programmer and can be the subject of debate. See <a href="http://en.wikipedia.org/wiki/Indent_style" title="Indent style">Indent style</a> for more details.</p>
<h3><span class="mw-headline" id="Compound_statements">Compound statements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=38" title="Edit section: Compound statements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In the items in this section, any &lt;statement&gt; can be replaced with a <b>compound statement</b>. Compound statements have the form:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="br0">{</span>
    <span class="sy0">&lt;</span>optional<span class="sy0">-</span>declaration<span class="sy0">-</span>list<span class="sy0">&gt;</span>
    <span class="sy0">&lt;</span>optional<span class="sy0">-</span>statement<span class="sy0">-</span>list<span class="sy0">&gt;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>and are used as the body of a function or anywhere that a single statement is expected. The declaration-list declares variables to be used in that <a href="Scope_(programming).html" title="Scope (programming)" class="mw-redirect">scope</a>, and the statement-list are the actions to be performed. Brackets define their own scope, and variables defined inside those brackets will be automatically deallocated at the closing bracket. Declarations and statements can be freely intermixed within a compound statement (as in <a href="C%2b%2b.html" title="C++">C++</a>).</p>
<h3><span class="mw-headline" id="Selection_statements">Selection statements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=39" title="Edit section: Selection statements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>C has two types of <a href="http://en.wikipedia.org/wiki/Selection_statement" title="Selection statement" class="mw-redirect">selection statements</a>: the <a href="http://en.wikipedia.org/wiki/If_statement" title="If statement" class="mw-redirect"><tt>if</tt> statement</a> and the <a href="Switch_statement.html" title="Switch statement"><tt>switch</tt> statement</a>.</p>
<p>The <tt>if</tt> statement is in the form:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&lt;</span>expression<span class="sy0">&gt;</span><span class="br0">)</span>
    <span class="sy0">&lt;</span>statement1<span class="sy0">&gt;</span>
<span class="kw1">else</span>
    <span class="sy0">&lt;</span>statement2<span class="sy0">&gt;</span>
</pre></div>
</div>
<p>In the <tt>if</tt> statement, if the <tt>&lt;expression&gt;</tt> in parentheses is nonzero (true), control passes to <tt>&lt;statement1&gt;</tt>. If the <tt>else</tt> clause is present and the <tt>&lt;expression&gt;</tt> is zero (false), control will pass to <tt>&lt;statement2&gt;</tt>. The <tt>else &lt;statement2&gt;</tt> part is optional and, if absent, a false <tt>&lt;expression&gt;</tt> will simply result in skipping over the <tt>&lt;statement1&gt;</tt>. An <tt>else</tt> always matches the nearest previous unmatched <tt>if</tt>; braces may be used to override this when necessary, or for clarity.</p>
<p>The <tt>switch</tt> statement causes control to be transferred to one of several statements depending on the value of an <a href="http://en.wikipedia.org/wiki/Expression_(mathematics)" title="Expression (mathematics)">expression</a>, which must have <a href="http://en.wikipedia.org/wiki/Integral_type" title="Integral type" class="mw-redirect">integral type</a>. The substatement controlled by a switch is typically compound. Any statement within the substatement may be labeled with one or more <tt>case</tt> labels, which consist of the keyword <tt>case</tt> followed by a constant expression and then a colon (:). The syntax is as follows:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">switch</span> <span class="br0">(</span><span class="sy0">&lt;</span>expression<span class="sy0">&gt;</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">case</span> <span class="sy0">&lt;</span>label1<span class="sy0">&gt;</span> <span class="sy0">:</span>
        <span class="sy0">&lt;</span>statements <span class="nu0">1</span><span class="sy0">&gt;</span>
    <span class="kw1">case</span> <span class="sy0">&lt;</span>label2<span class="sy0">&gt;</span> <span class="sy0">:</span>
        <span class="sy0">&lt;</span>statements <span class="nu0">2</span><span class="sy0">&gt;</span>
        <span class="kw2">break</span><span class="sy0">;</span>
    <span class="kw1">default</span> <span class="sy0">:</span>
        <span class="sy0">&lt;</span>statements <span class="nu0">3</span><span class="sy0">&gt;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>No two of the case constants associated with the same switch may have the same value. There may be at most one <tt>default</tt> label associated with a switch. If none of the case labels are equal to the expression in the parentheses following <tt>switch</tt>, control passes to the <tt>default</tt> label or, if there is no <tt>default</tt> label, execution resumes just beyond the entire construct.</p>
<p>Switches may be nested; a <tt>case</tt> or <tt>default</tt> label is associated with the innermost <tt>switch</tt> that contains it. Switch statements can "fall through", that is, when one case section has completed its execution, statements will continue to be executed downward until a <tt>break;</tt> statement is encountered. Fall-through is useful in some circumstances, but is usually not desired. In the preceding example, if <tt>&lt;label2&gt;</tt> is reached, the statements <tt>&lt;statements 2&gt;</tt> are executed and nothing more inside the braces. However if <tt>&lt;label1&gt;</tt> is reached, both <tt>&lt;statements 1&gt;</tt> and <tt>&lt;statements 2&gt;</tt> are executed since there is no <tt>break</tt> to separate the two case statements.</p>
<p>It is possible, although unusual, to insert the <tt>switch</tt> labels into the sub-blocks of other control structures. Examples of this include <a href="http://en.wikipedia.org/wiki/Duff%27s_device" title="Duff's device">Duff's device</a> and <a href="http://en.wikipedia.org/wiki/Simon_Tatham" title="Simon Tatham">Simon Tatham</a>'s implementation of <a href="Coroutine.html" title="Coroutine">coroutines</a> in <a href="http://en.wikipedia.org/wiki/Putty_(SSH)" title="Putty (SSH)" class="mw-redirect">Putty</a>.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7"><span>[</span>7<span>]</span></a></sup></p>
<h3><span class="mw-headline" id="Iteration_statements">Iteration statements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=40" title="Edit section: Iteration statements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>C has three forms of <a href="http://en.wikipedia.org/w/index.php?title=Iteration_statement&amp;action=edit&amp;redlink=1" class="new" title="Iteration statement (page does not exist)">iteration statement</a>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">do</span>
    <span class="sy0">&lt;</span>statement<span class="sy0">&gt;</span>
<span class="kw1">while</span> <span class="br0">(</span> <span class="sy0">&lt;</span>expression<span class="sy0">&gt;</span> <span class="br0">)</span> <span class="sy0">;</span>
 
<span class="kw1">while</span> <span class="br0">(</span> <span class="sy0">&lt;</span>expression<span class="sy0">&gt;</span> <span class="br0">)</span>
    <span class="sy0">&lt;</span>statement<span class="sy0">&gt;</span>
 
<span class="kw1">for</span> <span class="br0">(</span> <span class="sy0">&lt;</span>expression<span class="sy0">&gt;</span> <span class="sy0">;</span> <span class="sy0">&lt;</span>expression<span class="sy0">&gt;</span> <span class="sy0">;</span> <span class="sy0">&lt;</span>expression<span class="sy0">&gt;</span> <span class="br0">)</span>
    <span class="sy0">&lt;</span>statement<span class="sy0">&gt;</span>
</pre></div>
</div>
<p>In the <a href="While_loop.html" title="While loop"><tt>while</tt></a> and <tt>do</tt> statements, the substatement is executed repeatedly so long as the value of the <tt>expression</tt> remains nonzero (true). With <tt>while</tt>, the test, including all side effects from the <tt>expression</tt>, occurs before each <a href="http://en.wikipedia.org/wiki/Execution_(computers)" title="Execution (computers)" class="mw-redirect">execution</a> of the statement; with <tt>do</tt>, the test follows each <a href="Iteration.html" title="Iteration">iteration</a>. Thus, a <tt>do</tt> statement always executes its substatement at least once, whereas <tt>while</tt> may not execute the substatement at all.</p>
<p>If all three expressions are present in a <tt>for</tt>, the statement:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">for</span> <span class="br0">(</span>e1<span class="sy0">;</span> e2<span class="sy0">;</span> e3<span class="br0">)</span>
    s<span class="sy0">;</span>
</pre></div>
</div>
<p>is equivalent to:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
e1<span class="sy0">;</span>
<span class="kw1">while</span> <span class="br0">(</span>e2<span class="br0">)</span>
<span class="br0">{</span>
    s<span class="sy0">;</span>
    e3<span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>except for the behavior of a <tt>continue;</tt> statement (which in the <tt>for</tt> loop jumps to <tt>e3</tt> instead of <tt>e2</tt>).</p>
<p>Any of the three expressions in the <tt>for</tt> loop may be omitted. A missing second expression makes the <tt>while</tt> test always nonzero, creating a potentially infinite loop.</p>
<p>Since <a href="C99.html" title="C99">C99</a>, the first expression may take the form of a declaration, typically including an initializer, such as:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> i<span class="sy0">&lt;</span> limit<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><span class="br0">{</span>
    ...
<span class="br0">}</span>
</pre></div>
</div>
<p>The declaration's scope is limited to the extent of the <tt>for</tt> loop.</p>
<h3><span class="mw-headline" id="Jump_statements">Jump statements</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=41" title="Edit section: Jump statements">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Jump statements transfer control unconditionally. There are four types of <a href="http://en.wikipedia.org/wiki/Branch_(computer_science)" title="Branch (computer science)">jump statements</a> in C: <a href="http://en.wikipedia.org/wiki/GOTO" title="GOTO" class="mw-redirect"><tt>goto</tt></a>, <tt>continue</tt>, <tt>break</tt>, and <a href="http://en.wikipedia.org/wiki/Return_statement" title="Return statement"><tt>return</tt></a>.</p>
<p>The <tt>goto</tt> statement looks like this:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">goto</span> <span class="sy0">&lt;</span>identifier<span class="sy0">&gt;</span> <span class="sy0">;</span>
</pre></div>
</div>
<p>The <a href="http://en.wikipedia.org/wiki/Identifier" title="Identifier">identifier</a> must be a <a href="Label_(programming_language).html" title="Label (programming language)" class="mw-redirect">label</a> (followed by a colon) located in the current function. Control transfers to the labeled statement.</p>
<p>A <tt>continue</tt> statement may appear only within an <a href="C_syntax.html#Iteration_statements" title="C syntax">iteration statement</a> and causes control to pass to the loop-continuation portion of the innermost enclosing iteration statement. That is, within each of the statements</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw1">while</span> <span class="br0">(</span>expression<span class="br0">)</span>
<span class="br0">{</span>
    <span class="coMULTI">/* ... */</span>
    cont<span class="sy0">:</span> <span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw1">do</span>
<span class="br0">{</span>
    <span class="coMULTI">/* ... */</span>
    cont<span class="sy0">:</span> <span class="sy0">;</span>
<span class="br0">}</span> <span class="kw1">while</span> <span class="br0">(</span>expression<span class="br0">)</span><span class="sy0">;</span>
 
<span class="kw1">for</span> <span class="br0">(</span>expr1<span class="sy0">;</span> expr2<span class="sy0">;</span> expr3<span class="br0">)</span> <span class="br0">{</span>
     <span class="coMULTI">/* ... */</span>
     cont<span class="sy0">:</span> <span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>a <tt>continue</tt> not contained within a nested iteration statement is the same as <tt>goto</tt> <tt>cont</tt>.</p>
<p>The <tt>break</tt> statement is used to end a <tt>for</tt> loop, <tt>while</tt> loop, <tt>do</tt> loop, or <tt>switch</tt> statement. Control passes to the statement following the terminated statement.</p>
<p>A function returns to its caller by the <tt>return</tt> statement. When <tt>return</tt> is followed by an expression, the value is returned to the caller as the value of the function. Encountering the end of the function is equivalent to a <tt>return</tt> with no expression. In that case, if the function is declared as returning a value and the caller tries to use the returned value, the result is undefined.</p>
<h4><span class="mw-headline" id="Storing_the_address_of_a_label">Storing the address of a label</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=42" title="Edit section: Storing the address of a label">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p><a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a> extends the C language with a unary <tt>&amp;&amp;</tt> operator that returns the address of a label. This address can be stored in a <tt>void*</tt> variable type and may be used later in a <tt>goto</tt> instruction. For example, the following prints <tt>"hi "</tt> in an infinite loop:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
    <span class="kw4">void</span> <span class="sy0">*</span>ptr <span class="sy0">=</span> <span class="sy0">&amp;&amp;</span>J1<span class="sy0">;</span>
 
J1<span class="sy0">:</span> <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"hi "</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">goto</span> <span class="sy0">*</span>ptr<span class="sy0">;</span>
</pre></div>
</div>
<p>This feature can be used to implement a <a href="http://en.wikipedia.org/wiki/Jump_table" title="Jump table" class="mw-redirect">jump table</a>.</p>
<h2><span class="mw-headline" id="Functions">Functions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=43" title="Edit section: Functions">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Syntax">Syntax</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=44" title="Edit section: Syntax">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>A C function definition consists of a <a href="http://en.wikipedia.org/wiki/Return_type" title="Return type">return type</a> (<tt>void</tt> if no value is returned), a unique name, a list of parameters in parentheses, and various statements:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="sy0">&lt;</span>return<span class="sy0">-</span>type<span class="sy0">&gt;</span> functionName<span class="br0">(</span> <span class="sy0">&lt;</span>parameter<span class="sy0">-</span>list<span class="sy0">&gt;</span> <span class="br0">)</span>
<span class="br0">{</span>
    <span class="sy0">&lt;</span>statements<span class="sy0">&gt;</span>
    <span class="kw1">return</span> <span class="sy0">&lt;</span>expression of type return<span class="sy0">-</span>type<span class="sy0">&gt;;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>A function with non-<tt>void</tt> return type should include at least one <tt>return</tt> statement. The parameters are given by the <tt>&lt;parameter-list&gt;</tt>, a comma-separated list of parameter declarations, each item in the list being a data type followed by an identifier: <tt><data>&lt;variable-identifier&gt;, <data>&lt;variable-identifier&gt;, ...</data></data><data>.</data></tt></p>
<p><data>If there are no parameters, the <tt>&lt;parameter-list&gt;</tt> may be left empty or optionally be specified with the single word <tt>void</tt>.</data></p>
<p><data>It is possible to define a function as taking a variable number of parameters by providing the <tt>...</tt> keyword as the last parameter instead of a data type and variable identifier. A commonly used function that does this is the standard library function <tt>printf</tt>, which has the declaration:</data></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><data></data>
<div class="c source-c"><data></data>
<pre class="de1">
<data><span class="kw4">int</span> <span class="kw3">printf</span> <span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*,</span> ...<span class="br0">)</span><span class="sy0">;</span></data>
</pre></div>
</div>
<p><data>Manipulation of these parameters can be done by using the routines in the standard library header <a href="http://en.wikipedia.org/wiki/Stdarg.h" title="Stdarg.h"><tt>&lt;stdarg.h&gt;</tt></a>.</data></p>
<h4><data><span class="mw-headline" id="Function_Pointers">Function Pointers</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=45" title="Edit section: Function Pointers">edit</a><span class="mw-editsection-bracket">]</span></span></data></h4>
<p><data>A pointer to a function can be declared as follows:</data></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><data></data>
<div class="c source-c"><data></data>
<pre class="de1">
<data><span class="sy0">&lt;</span>return<span class="sy0">-</span>type<span class="sy0">&gt;</span> <span class="br0">(</span><span class="sy0">*&lt;</span>function<span class="sy0">-</span>name<span class="sy0">&gt;</span><span class="br0">)</span><span class="br0">(</span><span class="sy0">&lt;</span>parameter<span class="sy0">-</span>list<span class="sy0">&gt;</span><span class="br0">)</span><span class="sy0">;</span></data>
</pre></div>
</div>
<p><data>The following program shows use of a function pointer for selecting between addition and subtraction:</data></p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr"><data></data>
<div class="c source-c"><data></data>
<pre class="de1">
<data><span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> <span class="br0">(</span><span class="sy0">*</span>operation<span class="br0">)</span><span class="br0">(</span><span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="br0">)</span><span class="sy0">;</span>
 
<span class="kw4">int</span> add<span class="br0">(</span><span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> x <span class="sy0">+</span> y<span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> subtract<span class="br0">(</span><span class="kw4">int</span> x<span class="sy0">,</span> <span class="kw4">int</span> y<span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw1">return</span> x <span class="sy0">-</span> y<span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span><span class="sy0">*</span> args<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
   <span class="kw4">int</span>  foo <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> bar <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
 
   operation <span class="sy0">=</span> add<span class="sy0">;</span>
   <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d + %d = %d<span class="es1">\n</span>"</span><span class="sy0">,</span> foo<span class="sy0">,</span> bar<span class="sy0">,</span> operation<span class="br0">(</span>foo<span class="sy0">,</span> bar<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
   operation <span class="sy0">=</span> subtract<span class="sy0">;</span>
   <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d - %d = %d<span class="es1">\n</span>"</span><span class="sy0">,</span> foo<span class="sy0">,</span> bar<span class="sy0">,</span> operation<span class="br0">(</span>foo<span class="sy0">,</span> bar<span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
   <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span></data>
</pre></div>
</div>
<h3><span class="mw-headline" id="Global_structure">Global structure</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=46" title="Edit section: Global structure">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>After preprocessing, at the highest level a <a href="C_(programming_language).html" title="C (programming language)">C</a> <a href="http://en.wikipedia.org/wiki/Computer_program" title="Computer program">program</a> consists of a sequence of declarations at file scope. These may be partitioned into several separate source files, which may be compiled separately; the resulting object modules are then <a href="Linker_(computing).html" title="Linker (computing)">linked</a> along with implementation-provided run-time support modules to produce an executable image.</p>
<p>The declarations introduce <a href="http://en.wikipedia.org/wiki/Function_(programming)" title="Function (programming)" class="mw-redirect">functions</a>, <a href="Variable_(programming).html" title="Variable (programming)" class="mw-redirect">variables</a> and <a href="Data_type.html" title="Data type">types</a>. C functions are akin to the subroutines of <a href="http://en.wikipedia.org/wiki/Fortran_programming_language" title="Fortran programming language" class="mw-redirect">Fortran</a> or the procedures of <a href="http://en.wikipedia.org/wiki/Pascal_programming_language" title="Pascal programming language" class="mw-redirect">Pascal</a>.</p>
<p>A <i>definition</i> is a special type of declaration. A variable definition sets aside storage and possibly initializes it, a function definition provides its body.</p>
<p>An implementation of C providing all of the standard library functions is called a <i>hosted implementation</i>. Programs written for hosted implementations are required to define a special function called <a href="Main_function_(programming).html" title="Main function (programming)" class="mw-redirect"><tt>main</tt></a>, which is the first function called when execution of the program begins.</p>
<p>Hosted implementations start program execution by invoking the <tt>main</tt> function, which must be defined following one of these prototypes:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span>...<span class="br0">}</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>...<span class="br0">}</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">*</span>argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>...<span class="br0">}</span>
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">**</span>argv<span class="br0">)</span> <span class="br0">{</span>...<span class="br0">}</span>
</pre></div>
</div>
<p>The first two definitions are equivalent (and both are compatible with C++). It is probably up to individual preference which one is used (the current C standard contains two examples of <tt>main()</tt> and two of <tt>main(void)</tt>, but the draft C++ standard uses <tt>main()</tt>). The return value of <tt>main</tt> (which should be <tt>int</tt>) serves as <i>termination status</i> returned to the host environment.</p>
<p>The C standard defines return values <tt>0</tt> and <tt>EXIT_SUCCESS</tt> as indicating success and <tt>EXIT_FAILURE</tt> as indicating failure. (<tt>EXIT_SUCCESS</tt> and <tt>EXIT_FAILURE</tt> are defined in <a href="http://en.wikipedia.org/wiki/Stdlib.h" title="Stdlib.h" class="mw-redirect"><tt>&lt;stdlib.h&gt;</tt></a>). Other return values have implementation-defined meanings; for example, under <a href="Linux.html" title="Linux">Linux</a> a program killed by a <a href="http://en.wikipedia.org/wiki/Signal_(computing)" title="Signal (computing)" class="mw-redirect">signal</a> yields a return code of the numerical value of the signal plus 128.</p>
<p>A minimal correct C program consists of an empty <tt>main</tt> routine, taking no arguments and doing nothing:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span><span class="br0">{</span><span class="br0">}</span>
</pre></div>
</div>
<p>Because no <code>return</code> statement is present, <code>main</code> returns 0 on exit.<sup id="cite_ref-bk21st_3-2" class="reference"><a href="#cite_note-bk21st-3"><span>[</span>3<span>]</span></a></sup> (This is a special-case feature introduced in <a href="C99.html" title="C99">C99</a> that applies only to <code>main</code>.)</p>
<p>The <tt>main</tt> function will usually call other functions to help it perform its job.</p>
<p>Some implementations are not hosted, usually because they are not intended to be used with an <a href="Operating_system.html" title="Operating system">operating system</a>. Such implementations are called <i>free-standing</i> in the C standard. A free-standing implementation is free to specify how it handles program startup; in particular it need not require a program to define a <tt>main</tt> function.</p>
<p>Functions may be written by the programmer or provided by existing libraries. Interfaces for the latter are usually declared by including header files—with the <tt>#include</tt> <a href="http://en.wikipedia.org/wiki/Preprocessing_directive" title="Preprocessing directive" class="mw-redirect">preprocessing directive</a>—and the library objects are linked into the final executable image. Certain library functions, such as <a href="Printf.html" title="Printf" class="mw-redirect"><tt>printf</tt></a>, are defined by the C standard; these are referred to as the <a href="http://en.wikipedia.org/wiki/ISO_C_standard_library" title="ISO C standard library" class="mw-redirect">standard library</a> functions.</p>
<p>A function may return a value to caller (usually another C function, or the hosting environment for the function <tt>main</tt>). The <tt>printf</tt> function mentioned above returns how many characters were printed, but this value is often ignored.</p>
<h3><span class="mw-headline" id="Argument_passing">Argument passing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=47" title="Edit section: Argument passing">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In C, arguments are passed to functions <a href="http://en.wikipedia.org/wiki/Pass_by_value" title="Pass by value" class="mw-redirect">by value</a> while other languages may pass variables <a href="http://en.wikipedia.org/wiki/Pass_by_reference" title="Pass by reference" class="mw-redirect">by reference</a>. This means that the receiving function gets copies of the values and has no direct way of altering the original variables. For a function to alter a variable passed from another function, the caller must pass its <i>address</i> (a <i>pointer</i> to it), which can then be dereferenced in the receiving function. See <a href="C_syntax.html#Pointers" title="C syntax">Pointers</a> for more information.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">void</span> incInt<span class="br0">(</span><span class="kw4">int</span> <span class="sy0">*</span>y<span class="br0">)</span>
<span class="br0">{</span>
    <span class="br0">(</span><span class="sy0">*</span>y<span class="br0">)</span><span class="sy0">++;</span>  <span class="co1">// Increase the value of 'x', in 'main' below, by one</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> x <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
    incInt<span class="br0">(</span><span class="sy0">&amp;</span>x<span class="br0">)</span><span class="sy0">;</span>  <span class="co1">// pass a reference to the var 'x'</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>The function <a href="http://en.wikipedia.org/wiki/Scanf" title="Scanf" class="mw-redirect">scanf</a> works the same way:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">int</span> x<span class="sy0">;</span>
<span class="kw3">scanf</span><span class="br0">(</span><span class="st0">"%d"</span><span class="sy0">,</span> <span class="sy0">&amp;</span>x<span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<p>In order to pass an editable pointer to a function (such as for the purpose of returning an allocated array to the calling code) you have to pass a pointer to <i>that</i> pointer: its address.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
<span class="co2">#include &lt;stdlib.h&gt;</span>
 
<span class="kw4">void</span> allocate_array<span class="br0">(</span><span class="kw4">int</span> <span class="sy0">**</span> <span class="kw4">const</span> a_p<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">int</span> A<span class="br0">)</span> <span class="br0">{</span>
<span class="coMULTI">/* 
 allocate array of A ints
 assigning to *a_p alters the 'a' in main()
*/</span>
    <span class="sy0">*</span>a_p <span class="sy0">=</span> <span class="kw3">malloc</span><span class="br0">(</span><span class="kw4">sizeof</span><span class="br0">(</span><span class="kw4">int</span><span class="br0">)</span> <span class="sy0">*</span> A<span class="br0">)</span><span class="sy0">;</span> 
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span> <span class="br0">{</span>
    <span class="kw4">int</span> <span class="sy0">*</span> a<span class="sy0">;</span> <span class="coMULTI">/* create a pointer to one or more ints, this will be the array */</span>
 
 <span class="coMULTI">/* pass the address of 'a' */</span>
    allocate_array<span class="br0">(</span><span class="sy0">&amp;</span>a<span class="sy0">,</span> <span class="nu0">42</span><span class="br0">)</span><span class="sy0">;</span>
 
<span class="coMULTI">/* 'a' is now an array of length 42 and can be manipulated and freed here */</span>
 
    <span class="kw3">free</span><span class="br0">(</span>a<span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>The parameter <tt>int **a_p</tt> is a pointer to a pointer to an <tt>int</tt>, which is the address of the pointer <tt>p</tt> defined in the <i>main</i> function in this case.</p>
<h4><span class="mw-headline" id="Array_parameters">Array parameters</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=48" title="Edit section: Array parameters">edit</a><span class="mw-editsection-bracket">]</span></span></h4>
<p>Function parameters of array type may at first glance appear to be an exception to C's pass-by-value rule. The following program will print 2, not 1:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">void</span> setArray<span class="br0">(</span><span class="kw4">int</span> array<span class="br0">[</span><span class="br0">]</span><span class="sy0">,</span> <span class="kw4">int</span> index<span class="sy0">,</span> <span class="kw4">int</span> value<span class="br0">)</span>
<span class="br0">{</span>
    array<span class="br0">[</span>index<span class="br0">]</span> <span class="sy0">=</span> value<span class="sy0">;</span>
<span class="br0">}</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span> a<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span><span class="nu0">1</span><span class="br0">}</span><span class="sy0">;</span>
    setArray<span class="br0">(</span>a<span class="sy0">,</span> <span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"a[0]=%d<span class="es1">\n</span>"</span><span class="sy0">,</span> a<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>However, there is a different reason for this behavior. In fact, a function parameter declared with an array type is treated like one declared to be a pointer. That is, the preceding declaration of <tt>setArray</tt> is equivalent to the following:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="kw4">void</span> setArray<span class="br0">(</span><span class="kw4">int</span> <span class="sy0">*</span>array<span class="sy0">,</span> <span class="kw4">int</span> index<span class="sy0">,</span> <span class="kw4">int</span> value<span class="br0">)</span>
</pre></div>
</div>
<p>At the same time, C rules for the use of arrays in expressions cause the value of <tt>a</tt> in the call to <tt>setArray</tt> to be converted to a pointer to the first element of array <tt>a</tt>. Thus, in fact this is still an example of pass-by-value, with the caveat that it is the address of the first element of the array being passed by value, not the contents of the array.</p>
<h2><span class="mw-headline" id="Miscellaneous">Miscellaneous</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=49" title="Edit section: Miscellaneous">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Reserved_keywords">Reserved keywords</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=50" title="Edit section: Reserved keywords">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The following words are <a href="http://en.wikipedia.org/wiki/Reserved_word" title="Reserved word">reserved</a>, and may not be used as identifiers:</p>
<table class="multicol" role="presentation" style="border-collapse: collapse; padding: 0; border: 0; background:transparent; width:100%;">
<tr>
<td width="20%" align="left" valign="top">
<dl>
<dd><tt>auto</tt></dd>
<dd><tt>_Bool</tt></dd>
<dd><tt>break</tt></dd>
<dd><tt>case</tt></dd>
<dd><tt>char</tt></dd>
<dd><tt>_Complex</tt></dd>
<dd><tt>const</tt></dd>
<dd><tt>continue</tt></dd>
<dd><tt>default</tt></dd>
<dd><tt>do</tt></dd>
</dl>
</td>
<td width="20%" align="left" valign="top">
<dl>
<dd><tt>double</tt></dd>
<dd><tt>else</tt></dd>
<dd><tt>enum</tt></dd>
<dd><tt>extern</tt></dd>
<dd><tt>float</tt></dd>
<dd><tt>for</tt></dd>
<dd><tt>goto</tt></dd>
<dd><tt>if</tt></dd>
<dd><tt>_Imaginary</tt></dd>
<dd><tt>inline</tt></dd>
</dl>
</td>
<td width="20%" align="left" valign="top">
<dl>
<dd><tt>int</tt></dd>
<dd><tt>long</tt></dd>
<dd><tt>register</tt></dd>
<dd><tt>restrict</tt></dd>
<dd><tt>return</tt></dd>
<dd><tt>short</tt></dd>
<dd><tt>signed</tt></dd>
<dd><tt>sizeof</tt></dd>
<dd><tt>static</tt></dd>
<dd><tt>struct</tt></dd>
</dl>
</td>
<td align="left" valign="top">
<dl>
<dd><tt>switch</tt></dd>
<dd><tt>typedef</tt></dd>
<dd><tt>union</tt></dd>
<dd><tt>unsigned</tt></dd>
<dd><tt>void</tt></dd>
<dd><tt>volatile</tt></dd>
<dd><tt>while</tt></dd>
</dl>
</td>
</tr>
</table>
<p>Implementations may reserve other keywords, such as <tt>asm</tt>, although implementations typically provide non-standard keywords that begin with one or two underscores.</p>
<h3><span class="mw-headline" id="Case_sensitivity">Case sensitivity</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=51" title="Edit section: Case sensitivity">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>C identifiers are case sensitive (e.g., <tt>foo</tt>, <tt>FOO</tt>, and <tt>Foo</tt> are the names of different objects). Some linkers may map external identifiers to a single case, although this is uncommon in most modern linkers.</p>
<h3><span class="mw-headline" id="Comments">Comments</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=52" title="Edit section: Comments">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>Text starting with <tt>/*</tt> is treated as a <a href="http://en.wikipedia.org/wiki/Comment_(computer_programming)" title="Comment (computer programming)">comment</a> and ignored. The comment ends at the next <tt>*/</tt>; it can occur within expressions, and can span multiple lines. Accidental omission of the comment terminator is problematic in that the next comment's properly constructed comment terminator will be used to terminate the initial comment, and all code in between the comments will be considered as a comment. C-style comments do not nest; that is, accidentally placing a comment within a comment has unintended results:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<ol>
<li class="li1">
<pre class="de1">
<span class="coMULTI">/*</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="coMULTI">This line will be ignored.</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="coMULTI">/*</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="coMULTI">A compiler warning may be produced here. These lines will also be ignored.</span>
</pre></li>
<li class="li2">
<pre class="de2">
<span class="coMULTI">The comment opening token above did not start a new comment,</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="coMULTI">and the comment closing token below will close the comment begun on line 1.</span>
</pre></li>
<li class="li1">
<pre class="de1">
<span class="coMULTI">*/</span>
</pre></li>
<li class="li1">
<pre class="de1">
This line and the line below it will not be ignored. <span class="me1">Both</span> will likely produce compile errors.
</pre></li>
<li class="li1">
<pre class="de1">
<span class="sy0">*/</span>
</pre></li>
</ol>
</div>
</div>
<p><a href="C%2b%2b.html" title="C++">C++</a> style line comments start with <tt>//</tt> and extend to the end of the line. This style of comment originated in <a href="BCPL.html" title="BCPL">BCPL</a> and became valid C syntax in <a href="C99.html" title="C99">C99</a>; it is not available in the original K&amp;R C nor in <a href="ANSI_C.html" title="ANSI C">ANSI C</a>:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co1">// this line will be ignored by the compiler</span>
 
<span class="coMULTI">/* these lines
   will be ignored
   by the compiler */</span>
 
x <span class="sy0">=</span> <span class="sy0">*</span>p<span class="coMULTI">/*q;  /* this comment starts after the 'p' */</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="Command-line_arguments">Command-line arguments</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=53" title="Edit section: Command-line arguments">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>The <a href="http://en.wikipedia.org/wiki/Parameter" title="Parameter">parameters</a> given on a <a href="http://en.wikipedia.org/wiki/Command_line" title="Command line" class="mw-redirect">command line</a> are passed to a C program with two predefined variables - the count of the command-line arguments in <tt>argc</tt> and the individual <a href="http://en.wikipedia.org/wiki/Parameter" title="Parameter">arguments</a> as <a href="http://en.wikipedia.org/wiki/Character_string" title="Character string" class="mw-redirect">character strings</a> in the pointer array <tt>argv</tt>. So the command:</p>
<p><code>myFilt p1 p2 p3</code></p>
<p>results in something like:</p>
<table class="wikitable">
<tr>
<td><tt>m</tt></td>
<td><tt>y</tt></td>
<td><tt>F</tt></td>
<td><tt>i</tt></td>
<td><tt>l</tt></td>
<td><tt>t</tt></td>
<td style="background:#CCC;"><tt>\0</tt></td>
<td><tt>p</tt></td>
<td><tt>1</tt></td>
<td style="background:#CCC;"><tt>\0</tt></td>
<td><tt>p</tt></td>
<td><tt>2</tt></td>
<td style="background:#CCC;"><tt>\0</tt></td>
<td><tt>p</tt></td>
<td><tt>3</tt></td>
<td style="background:#CCC;"><tt>\0</tt></td>
</tr>
<tr>
<td colspan="7" align="center"><tt>argv[0]</tt></td>
<td colspan="3" align="center"><tt>argv[1]</tt></td>
<td colspan="3" align="center"><tt>argv[2]</tt></td>
<td colspan="3" align="center"><tt>argv[3]</tt></td>
</tr>
</table>
<p>While individual strings are arrays of contiguous characters, there is no guarantee that the strings are stored as a contiguous group.</p>
<p>The name of the program, <tt>argv[0]</tt>, may be useful when printing diagnostic messages or for making one binary serve multiple purposes. The individual values of the parameters may be accessed with <tt>argv[1]</tt>, <tt>argv[2]</tt>, and <tt>argv[3]</tt>, as shown in the following program:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">int</span> argc<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">*</span>argv<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span>  i<span class="sy0">;</span>
 
    <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"argc<span class="es1">\t</span>= %d<span class="es1">\n</span>"</span><span class="sy0">,</span> argc<span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> argc<span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span>
        <span class="kw3">printf</span> <span class="br0">(</span><span class="st0">"argv[%i]<span class="es1">\t</span>= %s<span class="es1">\n</span>"</span><span class="sy0">,</span> i<span class="sy0">,</span> argv<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="Evaluation_order">Evaluation order</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=54" title="Edit section: Evaluation order">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>In any reasonably complex expression, there arises a choice as to the order in which to evaluate the parts of the expression: <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">1</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="nu0">3</span><span class="sy0">+</span><span class="nu0">3</span><span class="br0">)</span></span> may be evaluated in the order <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">1</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="nu0">3</span><span class="sy0">+</span><span class="nu0">3</span><span class="br0">)</span></span>, <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="nu0">3</span><span class="sy0">+</span><span class="nu0">3</span><span class="br0">)</span></span>, <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="nu0">6</span><span class="br0">)</span></span>, <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">8</span><span class="br0">)</span></span>, or in the order <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">1</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="nu0">3</span><span class="sy0">+</span><span class="nu0">3</span><span class="br0">)</span></span>, <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">1</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="nu0">6</span><span class="br0">)</span></span>, <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="nu0">6</span><span class="br0">)</span></span>, <span class="mw-geshi c source-c"><span class="br0">(</span><span class="nu0">8</span><span class="br0">)</span></span>. Formally, a conforming C compiler may evaluate expressions in <i>any</i> order between <i><a href="Sequence_point.html" title="Sequence point">sequence points</a></i> (this allows the compiler to do some optimization). Sequence points are defined by:</p>
<ul>
<li><i>Statement ends</i> at semicolons.</li>
<li>The <i>sequencing operator</i>: a comma. However, commas that delimit function arguments are not sequence points.</li>
<li>The <i>short-circuit operators</i>: logical <i>and</i> (<tt>&amp;&amp;</tt>, which can be read <i>and then</i>) and logical <i>or</i> (<tt>||</tt>, which can be read <i>or else</i>).</li>
<li>The <i><a href="http://en.wikipedia.org/wiki/%3F:" title="?:">ternary operator</a></i> (<tt>?:</tt>): This operator evaluates its first sub-expression first, and then its second or third (never both of them) based on the value of the first.</li>
<li>Entry to and exit from a <i>function call</i> (but not between evaluations of the arguments).</li>
</ul>
<p>Expressions before a sequence point are always evaluated before those after a sequence point. In the case of short-circuit evaluation, the second expression may not be evaluated depending on the result of the first expression. For example, in the expression <span class="mw-geshi c source-c"><span class="br0">(</span>a<span class="br0">(</span><span class="br0">)</span> <span class="sy0">||</span> b<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span></span>, if the first argument evaluates to nonzero (true), the result of the entire expression cannot be anything else than true, so <tt>b()</tt> is not evaluated. Similarly, in the expression <span class="mw-geshi c source-c"><span class="br0">(</span>a<span class="br0">(</span><span class="br0">)</span> <span class="sy0">&amp;&amp;</span> b<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span></span>, if the first argument evaluates to zero (false), the result of the entire expression cannot be anything else than false, so <tt>b()</tt> is not evaluated.</p>
<p>The arguments to a function call may be evaluated in any order, as long as they are all evaluated by the time the function is entered. The following expression, for example, has undefined behavior:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
 <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%s %s<span class="es1">\n</span>"</span><span class="sy0">,</span> argv<span class="br0">[</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">]</span><span class="sy0">,</span> argv<span class="br0">[</span><span class="sy0">++</span>i<span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span>
</pre></div>
</div>
<h3><span class="mw-headline" id="Undefined_behavior">Undefined behavior</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=55" title="Edit section: Undefined behavior">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<div class="rellink relarticle mainarticle">Main article: <a href="http://en.wikipedia.org/wiki/Undefined_behavior" title="Undefined behavior">Undefined behavior</a></div>
<table class="metadata plainlinks ambox ambox-content ambox-Unreferenced" role="presentation">
<tr>
<td class="mbox-image">
<div style="width:52px;"><a href="http://en.wikipedia.org/wiki/File:Question_book-new.svg" class="image"><img alt="Question book-new.svg" src="http://upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png" width="50" height="39" srcset="//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/75px-Question_book-new.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/100px-Question_book-new.svg.png 2x" /></a></div>
</td>
<td class="mbox-text"><span class="mbox-text-span">This section <b>does not <a href="http://en.wikipedia.org/wiki/Wikipedia:Citing_sources" title="Wikipedia:Citing sources">cite</a> any <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">references or sources</a></b>. <span class="hide-when-compact">Please help improve this section by <a href="http://en.wikipedia.org/wiki/Help:Introduction_to_referencing/1" title="Help:Introduction to referencing/1">adding citations to reliable sources</a>. Unsourced material may be challenged and <a href="http://en.wikipedia.org/wiki/Wikipedia:Verifiability#Burden_of_evidence" title="Wikipedia:Verifiability">removed</a>.</span> <small><i>(November 2011)</i></small></span></td>
</tr>
</table>
<p>An aspect of the C standard (not unique to C) is that the behavior of certain code is said to be "undefined". In practice, this means that the program produced from this code can do anything, from working as the programmer intended, to crashing every time it is run.</p>
<p>For example, the following code produces undefined behavior, because the variable <i>b</i> is modified more than once with no intervening sequence point:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
<span class="co2">#include &lt;stdio.h&gt;</span>
 
<span class="kw4">int</span> main<span class="br0">(</span><span class="kw4">void</span><span class="br0">)</span>
<span class="br0">{</span>
    <span class="kw4">int</span>  a<span class="sy0">,</span> b <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">;</span>
 
    a <span class="sy0">=</span> b<span class="sy0">++</span> <span class="sy0">+</span> b<span class="sy0">++;</span>
    <span class="kw3">printf</span><span class="br0">(</span><span class="st0">"%d<span class="es1">\n</span>"</span><span class="sy0">,</span> a<span class="br0">)</span><span class="sy0">;</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">}</span>
</pre></div>
</div>
<p>Because there is no sequence point between the modifications of <i>b</i> in "<i>b</i>++ + <i>b</i>++", it is possible to perform the evaluation steps in more than one order, resulting in an ambiguous statement. This can be fixed by rewriting the code to insert a sequence point in order to enforce an unambiguous behavior, for example:</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
a <span class="sy0">=</span> b<span class="sy0">++;</span>
a <span class="sy0">+=</span> b<span class="sy0">++;</span>
</pre></div>
</div>
<p>or</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="c source-c">
<pre class="de1">
a <span class="sy0">=</span> <span class="br0">(</span>b <span class="sy0">+=</span> <span class="nu0">2</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span>
</pre></div>
</div>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=56" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Blocks_(C_language_extension)" title="Blocks (C language extension)">Blocks (C language extension)</a></li>
<li><a href="C_(programming_language).html" title="C (programming language)">C programming language</a></li>
<li><a href="C_variable_types_and_declarations.html" title="C variable types and declarations">C variable types and declarations</a></li>
<li><a href="Operators_in_C_and_C%2b%2b.html" title="Operators in C and C++">Operators in C and C++</a></li>
</ul>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=57" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="refbegin" style="">
<ul>
<li><span class="citation book"><a href="http://en.wikipedia.org/wiki/Brian_W._Kernighan" title="Brian W. Kernighan" class="mw-redirect">Kernighan, Brian W.</a>; <a href="Dennis_Ritchie.html" title="Dennis Ritchie">Ritchie, Dennis M.</a> (1988). <i>The C Programming Language</i> (2nd Edition ed.). Upper Saddle River, New Jersey: Prentice Hall PTR. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/0-13-110370-9" title="Special:BookSources/0-13-110370-9">0-13-110370-9</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AC+syntax&amp;rft.aufirst=Brian+W.&amp;rft.au=Kernighan%2C+Brian+W.&amp;rft.aulast=Kernighan&amp;rft.btitle=The+C+Programming+Language&amp;rft.date=1988&amp;rft.edition=2nd+Edition&amp;rft.genre=book&amp;rft.isbn=0-13-110370-9&amp;rft.place=Upper+Saddle+River%2C+New+Jersey&amp;rft.pub=Prentice+Hall+PTR&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment">Cite uses deprecated parameters (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#deprecated_params" title="Help:CS1 errors">help</a>)</span></li>
<li>American National Standard for Information Systems - Programming Language - C - ANSI X3.159-1989</li>
</ul>
</div>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-long_long-1"><span class="mw-cite-backlink">^ <a href="#cite_ref-long_long_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-long_long_1-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text">The <tt>long</tt> <tt>long</tt> modifier was introduced in the <a href="C99.html" title="C99">C99</a> standard.</span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text">The meaning of auto is a type specifier rather than a storage class specifier in C++0x</span></li>
<li id="cite_note-bk21st-3"><span class="mw-cite-backlink">^ <a href="#cite_ref-bk21st_3-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-bk21st_3-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-bk21st_3-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><span class="citation book"><a href="Ben_Klemens.html" title="Ben Klemens">Klemens, Ben</a> (2012). <i>21st Century C</i>. <a href="O%27Reilly_Media.html" title="O'Reilly Media">O'Reilly Media</a>. <a href="International_Standard_Book_Number.html" title="International Standard Book Number">ISBN</a>&#160;<a href="http://en.wikipedia.org/wiki/Special:BookSources/1449327141" title="Special:BookSources/1449327141">1449327141</a>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AC+syntax&amp;rft.aufirst=Ben&amp;rft.au=Klemens%2C+Ben&amp;rft.aulast=Klemens&amp;rft.btitle=21st+Century+C&amp;rft.date=2012&amp;rft.genre=book&amp;rft.isbn=1449327141&amp;rft.pub=O%27Reilly+Media&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-4">^</a></b></span> <span class="reference-text"><span class="citation book">Balagurusamy, E. <i>Programming in ANSI C</i>. Tata McGraw Hill. p.&#160;366.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AC+syntax&amp;rft.au=Balagurusamy%2C+E&amp;rft.aufirst=E&amp;rft.aulast=Balagurusamy&amp;rft.btitle=Programming+in+ANSI+C&amp;rft.genre=book&amp;rft.pages=366&amp;rft.pub=Tata+McGraw+Hill&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text">see <a href="http://en.wikipedia.org/wiki/UTF-8" title="UTF-8">UTF-8</a> first section for references</span></li>
<li id="cite_note-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-6">^</a></b></span> <span class="reference-text">Kernighan &amp; Richie</span></li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><span id="CITEREFTatham2000" class="citation"><a href="http://en.wikipedia.org/wiki/Simon_Tatham" title="Simon Tatham">Tatham, Simon</a> (2000), <a rel="nofollow" class="external text" href="http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html">"Coroutines in C"</a>,</span> <span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AC+syntax&amp;rft.aufirst=Simon&amp;rft.aulast=Tatham&amp;rft.au=Tatham%2C+Simon&amp;rft.btitle=Coroutines+in+C&amp;rft.date=2000&amp;rft.genre=bookitem&amp;rft_id=http%3A%2F%2Fwww.chiark.greenend.org.uk%2F~sgtatham%2Fcoroutines.html&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit&amp;section=58" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a rel="nofollow" class="external text" href="http://www.cs.man.ac.uk/~pjj/bnf/c_syntax.bnf"><i>The syntax of C in Backus-Naur form</i></a></li>
<li><a rel="nofollow" class="external text" href="http://www.cs.cf.ac.uk/Dave/C/CE.html">Programming in C</a></li>
<li><a rel="nofollow" class="external text" href="http://c-faq.com/"><i>The comp.lang.c Frequently Asked Questions Page</i></a></li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:CProLang" title="Template:CProLang"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:CProLang" title="Template talk:CProLang"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:CProLang&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="C_(programming_language).html" title="C (programming language)">C programming language</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><a href="ANSI_C.html" title="ANSI C">ANSI C</a>
<ul>
<li><a href="ANSI_C.html#C89_and_C90" title="ANSI C">C89 and C90</a></li>
</ul>
</li>
<li><a href="C99.html" title="C99">C99</a></li>
<li><a href="C11_(C_standard_revision).html" title="C11 (C standard revision)">C11</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Category:C_compilers" title="Category:C compilers">Compilers</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Amsterdam_Compiler_Kit.html" title="Amsterdam Compiler Kit">Amsterdam Compiler Kit</a></li>
<li><a href="Borland_Turbo_C.html" title="Borland Turbo C">Borland Turbo C</a></li>
<li><a href="Clang.html" title="Clang">Clang</a></li>
<li><a href="GNU_Compiler_Collection.html" title="GNU Compiler Collection">GCC</a></li>
<li><a href="LCC_(compiler).html" title="LCC (compiler)">LCC</a></li>
<li><a href="Pelles_C.html" title="Pelles C">Pelles C</a></li>
<li><a href="Portable_C_Compiler.html" title="Portable C Compiler">PCC</a></li>
<li><a href="Tiny_C_Compiler.html" title="Tiny C Compiler">TCC</a></li>
<li><a href="Visual_C%2b%2b.html" title="Visual C++">Visual C++</a>
<ul>
<li><a href="C%2b%2b/CLI.html" title="C++/CLI">C++/CLI</a></li>
<li><a href="C%2b%2b/CX.html" title="C++/CX">C++/CX</a></li>
</ul>
</li>
<li><a href="Watcom_C/C%2b%2b_compiler.html" title="Watcom C/C++ compiler">Watcom C/C++ compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Category:C_libraries" title="Category:C libraries">Libraries</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="C_standard_library.html" title="C standard library">C standard library</a></li>
<li><a href="Bionic_(software).html" title="Bionic (software)">Bionic</a></li>
<li><a href="Dietlibc.html" title="Dietlibc">dietlibc</a></li>
<li><a href="Embedded_GLIBC.html" title="Embedded GLIBC">EGLIBC</a></li>
<li><a href="GNU_C_Library.html" title="GNU C Library">glibc</a></li>
<li><a href="Klibc.html" title="Klibc">klibc</a></li>
<li><a href="Hybris_(software).html" title="Hybris (software)">libhybris</a></li>
<li><a href="Musl.html" title="Musl">musl</a></li>
<li><a href="Newlib.html" title="Newlib">Newlib</a></li>
<li><a href="UClibc.html" title="UClibc">uClibc</a></li>
<li><a href="BSD_libc.html" title="BSD libc" class="mw-redirect">BSD libc</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Features</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Null-terminated_string.html" title="Null-terminated string">String</a></li>
<li><strong class="selflink">Syntax</strong></li>
<li><a href="C_preprocessor.html" title="C preprocessor">Preprocessor</a></li>
<li><a href="C_data_types.html" title="C data types">Variable types and declarations</a></li>
<li><a href="C_standard_library.html" title="C standard library">Functions</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Select descendants</th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="C%2b%2b.html" title="C++">C++</a></li>
<li><a href="C_Sharp_(programming_language).html" title="C Sharp (programming language)">C#</a></li>
<li><a href="D_(programming_language).html" title="D (programming language)">D</a></li>
<li><a href="Objective-C.html" title="Objective-C">Objective-C</a></li>
<li><a href="Alef_(programming_language).html" title="Alef (programming language)">Alef</a></li>
<li><a href="Limbo_(programming_language).html" title="Limbo (programming language)">Limbo</a></li>
<li><a href="Go_(programming_language).html" title="Go (programming language)">Go</a></li>
<li><a href="Vala_(programming_language).html" title="Vala (programming language)">Vala</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">C and other languages</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li>C and C++
<ul>
<li><a href="Compatibility_of_C_and_C%2b%2b.html" title="Compatibility of C and C++">Compatibility</a></li>
<li><a href="Operators_in_C_and_C%2b%2b.html" title="Operators in C and C++">Operators</a></li>
</ul>
</li>
<li><a href="Comparison_of_Pascal_and_C.html" title="Comparison of Pascal and C">Comparison of Pascal and C</a></li>
<li><a href="Java_virtual_machine.html#C_to_bytecode_compilers" title="Java virtual machine">C to Java byte-code compiler</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><img alt="Category" src="http://upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/16px-Folder_Hexagonal_Icon.svg.png" width="16" height="14" srcset="//upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/24px-Folder_Hexagonal_Icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/en/thumb/4/48/Folder_Hexagonal_Icon.svg/32px-Folder_Hexagonal_Icon.svg.png 2x" /> <b><a href="http://en.wikipedia.org/wiki/Category:C_programming_language" title="Category:C programming language">Category</a></b></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1007
CPU time usage: 2.044 seconds
Real time usage: 2.154 seconds
Preprocessor visited node count: 2111/1000000
Preprocessor generated node count: 7378/1500000
Post‐expand include size: 27783/2048000 bytes
Template argument size: 1303/2048000 bytes
Highest expansion depth: 8/40
Expensive parser function count: 4/500
Lua time usage: 0.057/10.000 seconds
Lua memory usage: 1.73 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:456820-0!*!0!!en!4!* and timestamp 20140327232701
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;oldid=597042309">http://en.wikipedia.org/w/index.php?title=C_syntax&amp;oldid=597042309</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:C_programming_language" title="Category:C programming language">C programming language</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Source_code" title="Category:Source code">Source code</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Articles_needing_additional_references_from_November_2011" title="Category:Articles needing additional references from November 2011">Articles needing additional references from November 2011</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_needing_additional_references" title="Category:All articles needing additional references">All articles needing additional references</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Pages_containing_cite_templates_with_deprecated_parameters" title="Category:Pages containing cite templates with deprecated parameters">Pages containing cite templates with deprecated parameters</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_example_C_code" title="Category:Articles with example C code">Articles with example C code</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=C+syntax&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=C+syntax" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="C_syntax.html"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:C_syntax"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="C_syntax.html" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/C_syntax" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/C_syntax" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;oldid=597042309" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q590541" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=C_syntax&amp;id=597042309" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=C+syntax">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=C+syntax&amp;oldid=597042309&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=C_syntax&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-ko"><a href="http://ko.wikipedia.org/wiki/C_언어의_문법" title="C 언어의 문법 – Korean" lang="ko" hreflang="ko">한국어</a></li>
			<li class="interlanguage-link interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Cú_pháp_ngôn_ngữ_C" title="Cú pháp ngôn ngữ C – Vietnamese" lang="vi" hreflang="vi">Tiếng Việt</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q590541#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 25 February 2014 at 08:34.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/C_syntax" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf19/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["ext.cite","mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1182 in 0.327 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/C_syntax by HTTrack Website Copier/3.x [XR&CO'2013], Sat, 29 Mar 2014 23:56:59 GMT -->
</html>
