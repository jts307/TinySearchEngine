http://old-www.cs.dartmouth.edu/~cs50/data/tse/wikipedia/Splay_tree.html
2
<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">

<!-- Mirrored from en.wikipedia.org/wiki/Splay_tree by HTTrack Website Copier/3.x [XR&CO'2013], Sun, 30 Mar 2014 00:02:12 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=UTF-8" /><!-- /Added by HTTrack -->
<head>
<meta charset="UTF-8" />
<title>Splay tree - Wikipedia, the free encyclopedia</title>
<meta http-equiv="X-UA-Compatible" content="IE=EDGE" />
<meta name="generator" content="MediaWiki 1.23wmf19" />
<link rel="alternate" href="http://en.wikipedia.org/wiki/android-app://org.wikipedia/http/en.m.wikipedia.org/wiki/Splay_tree" />
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit" />
<link rel="edit" title="Edit this page" href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit" />
<link rel="apple-touch-icon" href="http://bits.wikimedia.org/apple-touch/wikipedia.png" />
<link rel="shortcut icon" href="http://bits.wikimedia.org/favicon/wikipedia.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="http://en.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://en.wikipedia.org/w/api.php?action=rsd" />
<link rel="copyright" href="http://creativecommons.org/licenses/by-sa/3.0/" />
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="http://en.wikipedia.org/w/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="canonical" href="Splay_tree.html" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=ext.gadget.DRN-wizard%2CReferenceTooltips%2Ccharinsert%2Cteahouse%7Cext.geshi.local%7Cext.rtlcite%2Cwikihiero%7Cext.uls.nojs%7Cext.visualEditor.viewPageTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.ui.button%7Cskins.common.interface%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<link rel="stylesheet" href="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*" />
<style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: enwiki:resourceloader:filter:minify-css:7:3904d24a08aa08f6a68dc338f9be277e */</style>

<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Splay_tree","wgTitle":"Splay tree","wgCurRevisionId":599713773,"wgRevisionId":599713773,"wgArticleId":28382,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages containing cite templates with deprecated parameters","Use dmy dates from July 2012","All articles with unsourced statements","Articles with unsourced statements from January 2010","Articles with unsourced statements from March 2014","Binary trees"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Splay_tree","wgIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"templateEditor":false,"templates":false,"preview":false,"previewDialog":false,"publish":false,"toc":false},"wgBetaFeaturesFeatures":[],"wgVisualEditor":{"isPageWatched":false,"magnifyClipIconURL":"//bits.wikimedia.org/static-1.23wmf19/skins/common/images/magnify-clip.png","pageLanguageCode":"en","pageLanguageDir":"ltr","svgMaxSize":2048},"wikilove-recipient":"","wikilove-anon":0,"wgGuidedTourHelpGuiderUrl":"Help:Guided tours/guider","wgFlowTermsOfUseEdit":"By saving changes, you agree to our \u003Ca class=\"external text\" href=\"//wikimediafoundation.org/wiki/Terms_of_use\"\u003ETerms of Use\u003C/a\u003E and agree to irrevocably release your text under the \u003Ca rel=\"nofollow\" class=\"external text\" href=\"//creativecommons.org/licenses/by-sa/3.0\"\u003ECC BY-SA 3.0 License\u003C/a\u003E and \u003Ca class=\"external text\" href=\"//en.wikipedia.org/wiki/Wikipedia:Text_of_the_GNU_Free_Documentation_License\"\u003EGFDL\u003C/a\u003E","wgULSAcceptLanguageList":["en-us","en"],"wgULSCurrentAutonym":"English","wgFlaggedRevsParams":{"tags":{"status":{"levels":1,"quality":2,"pristine":3}}},"wgStableRevisionId":null,"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgNoticeProject":"wikipedia","wgWikibaseItemId":"Q80729"});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":0,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"showhiddencats":false,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":4,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,
"wllimit":250,"useeditwarning":1,"prefershttps":1,"flaggedrevssimpleui":1,"flaggedrevsstable":0,"flaggedrevseditdiffs":true,"flaggedrevsviewdiffs":false,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"visualeditor-enable":0,"visualeditor-enable-experimental":0,"visualeditor-betatempdisable":0,"wikilove-enabled":1,"echo-subscriptions-web-page-review":true,"echo-subscriptions-email-page-review":false,"ep_showtoplink":false,"ep_bulkdelorgs":false,"ep_bulkdelcourses":true,"ep_showdyk":true,"echo-subscriptions-web-education-program":true,"echo-subscriptions-email-education-program":false,"echo-notify-show-link":true,"echo-show-alert":true,"echo-email-frequency":0,"echo-email-format":"html","echo-subscriptions-email-system":true,"echo-subscriptions-web-system":true,"echo-subscriptions-email-other":false,"echo-subscriptions-web-other":true,"echo-subscriptions-email-edit-user-talk":false,"echo-subscriptions-web-edit-user-talk":true,"echo-subscriptions-email-reverted":false,
"echo-subscriptions-web-reverted":true,"echo-subscriptions-email-article-linked":false,"echo-subscriptions-web-article-linked":false,"echo-subscriptions-email-mention":false,"echo-subscriptions-web-mention":true,"echo-subscriptions-web-edit-thank":true,"echo-subscriptions-email-edit-thank":false,"echo-subscriptions-web-flow-discussion":true,"echo-subscriptions-email-flow-discussion":false,"gettingstarted-task-toolbar-show-intro":true,"uls-preferences":"","language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":false,"searchNs101":false,"searchNs108":false,
"searchNs109":false,"searchNs118":false,"searchNs119":false,"searchNs446":false,"searchNs447":false,"searchNs710":false,"searchNs711":false,"searchNs828":false,"searchNs829":false,"gadget-teahouse":1,"gadget-ReferenceTooltips":1,"gadget-DRN-wizard":1,"gadget-charinsert":1,"gadget-mySandbox":1,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: enwiki:resourceloader:filter:minify-js:7:868e43d07ede2616d2d1dc3507cd8145 */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.centralauth.centralautologin","skins.vector.compactPersonalBar.defaultTracking","ext.visualEditor.viewPageTarget.init","ext.uls.init","ext.uls.interface","wikibase.client.init","ext.centralNotice.bannerController","skins.vector.js"]);
}</script>
<style type="text/css">/*<![CDATA[*/
.source-cpp {line-height: normal;}
.source-cpp li, .source-cpp pre {
	line-height: normal; border: 0px none white;
}
/**
 * GeSHi Dynamically Generated Stylesheet
 * --------------------------------------
 * Dynamically generated stylesheet for cpp
 * CSS class: source-cpp, CSS id: 
 * GeSHi (C) 2004 - 2007 Nigel McNie, 2007 - 2008 Benny Baumann
 * (http://qbnz.com/highlighter/ and http://geshi.org/)
 * --------------------------------------
 */
.cpp.source-cpp .de1, .cpp.source-cpp .de2 {font: normal normal 1em/1.2em monospace; margin:0; padding:0; background:none; vertical-align:top;font-family: monospace, monospace;}
.cpp.source-cpp  {font-family:monospace;}
.cpp.source-cpp .imp {font-weight: bold; color: red;}
.cpp.source-cpp li, .cpp.source-cpp .li1 {font-weight: normal; vertical-align:top;}
.cpp.source-cpp .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.cpp.source-cpp .li2 {font-weight: bold; vertical-align:top;}
.cpp.source-cpp .kw1 {color: #0000ff;}
.cpp.source-cpp .kw2 {color: #0000ff;}
.cpp.source-cpp .kw3 {color: #0000dd;}
.cpp.source-cpp .kw4 {color: #0000ff;}
.cpp.source-cpp .co1 {color: #666666;}
.cpp.source-cpp .co2 {color: #339900;}
.cpp.source-cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp.source-cpp .es0 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es1 {color: #000099; font-weight: bold;}
.cpp.source-cpp .es2 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es3 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es4 {color: #660099; font-weight: bold;}
.cpp.source-cpp .es5 {color: #006699; font-weight: bold;}
.cpp.source-cpp .br0 {color: #008000;}
.cpp.source-cpp .sy0 {color: #008000;}
.cpp.source-cpp .sy1 {color: #000080;}
.cpp.source-cpp .sy2 {color: #000040;}
.cpp.source-cpp .sy3 {color: #000040;}
.cpp.source-cpp .sy4 {color: #008080;}
.cpp.source-cpp .st0 {color: #FF0000;}
.cpp.source-cpp .nu0 {color: #0000dd;}
.cpp.source-cpp .nu6 {color: #208080;}
.cpp.source-cpp .nu8 {color: #208080;}
.cpp.source-cpp .nu12 {color: #208080;}
.cpp.source-cpp .nu16 {color:#800080;}
.cpp.source-cpp .nu17 {color:#800080;}
.cpp.source-cpp .nu18 {color:#800080;}
.cpp.source-cpp .nu19 {color:#800080;}
.cpp.source-cpp .me1 {color: #007788;}
.cpp.source-cpp .me2 {color: #007788;}
.cpp.source-cpp .ln-xtra, .cpp.source-cpp li.ln-xtra, .cpp.source-cpp div.ln-xtra {background-color: #ffc;}
.cpp.source-cpp span.xtra { display:block; }

/*]]>*/
</style><link rel="dns-prefetch" href="http://meta.wikimedia.org/" /><!--[if lt IE 7]><style type="text/css">body{behavior:url("/w/static-1.23wmf19/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Splay_tree skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<div id="siteNotice"><!-- CentralNotice --></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Splay tree</span></h1>
						<div id="bodyContent">
								<div id="siteSub">From Wikipedia, the free encyclopedia</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><table class="infobox" style="width: 22em">
<tr>
<th colspan="3" style="font-size: 125%; text-align: center;">Splay tree</th>
</tr>
<tr>
<th><a href="http://en.wikipedia.org/wiki/List_of_data_structures" title="List of data structures">Type</a></th>
<td colspan="2"><a href="Tree_(data_structure).html" title="Tree (data structure)">Tree</a></td>
</tr>
<tr>
<th>Invented</th>
<td colspan="2">1985</td>
</tr>
<tr>
<th>Invented by</th>
<td colspan="2"><a href="http://en.wikipedia.org/wiki/Daniel_Dominic_Sleator" title="Daniel Dominic Sleator" class="mw-redirect">Daniel Dominic Sleator</a> and <a href="http://en.wikipedia.org/wiki/Robert_Endre_Tarjan" title="Robert Endre Tarjan" class="mw-redirect">Robert Endre Tarjan</a></td>
</tr>
<tr>
<th colspan="3" class="navbox-abovebelow"><a href="Time_complexity.html" title="Time complexity">Time complexity</a><br />
in <a href="Big_O_notation.html" title="Big O notation">big O notation</a></th>
</tr>
<tr>
<td></td>
<td>Average</td>
<td>Worst case</td>
</tr>
<tr>
<th>Space</th>
<td>O(n)</td>
<td>O(n)</td>
</tr>
<tr>
<th>Search</th>
<td>O(log n)</td>
<td>amortized O(log n)</td>
</tr>
<tr>
<th>Insert</th>
<td>O(log n)</td>
<td>amortized O(log n)</td>
</tr>
<tr>
<th>Delete</th>
<td>O(log n)</td>
<td>amortized O(log n)</td>
</tr>
</table>
<p>A <b>splay tree</b> is a self-adjusting <a href="Binary_search_tree.html" title="Binary search tree">binary search tree</a> with the additional property that recently accessed elements are quick to access again. It performs basic operations such as insertion, look-up and removal in <a href="Big_O_notation.html" title="Big O notation">O</a>(log n) <a href="Amortized_analysis.html" title="Amortized analysis">amortized</a> time. For many sequences of non-random operations, splay trees perform better than other search trees, even when the specific pattern of the sequence is unknown. The splay tree was invented by <a href="http://en.wikipedia.org/wiki/Daniel_Dominic_Sleator" title="Daniel Dominic Sleator" class="mw-redirect">Daniel Dominic Sleator</a> and <a href="http://en.wikipedia.org/wiki/Robert_Endre_Tarjan" title="Robert Endre Tarjan" class="mw-redirect">Robert Endre Tarjan</a> in 1985.<sup id="cite_ref-SleatorTarjan_1-0" class="reference"><a href="#cite_note-SleatorTarjan-1"><span>[</span>1<span>]</span></a></sup></p>
<p>All normal operations on a binary search tree are combined with one basic operation, called <i>splaying</i>. Splaying the tree for a certain element rearranges the tree so that the element is placed at the root of the tree. One way to do this is to first perform a standard binary tree search for the element in question, and then use <a href="http://en.wikipedia.org/wiki/Tree_rotation" title="Tree rotation">tree rotations</a> in a specific fashion to bring the element to the top. Alternatively, a top-down algorithm can combine the search and the tree reorganization into a single phase.</p>
<p></p>
<div id="toc" class="toc">
<div id="toctitle">
<h2>Contents</h2>
</div>
<ul>
<li class="toclevel-1 tocsection-1"><a href="#Advantages"><span class="tocnumber">1</span> <span class="toctext">Advantages</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="#Disadvantages"><span class="tocnumber">2</span> <span class="toctext">Disadvantages</span></a></li>
<li class="toclevel-1 tocsection-3"><a href="#Operations"><span class="tocnumber">3</span> <span class="toctext">Operations</span></a>
<ul>
<li class="toclevel-2 tocsection-4"><a href="#Splaying"><span class="tocnumber">3.1</span> <span class="toctext">Splaying</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="#Insertion"><span class="tocnumber">3.2</span> <span class="toctext">Insertion</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="#Deletion"><span class="tocnumber">3.3</span> <span class="toctext">Deletion</span></a></li>
</ul>
</li>
<li class="toclevel-1 tocsection-7"><a href="#Implementation"><span class="tocnumber">4</span> <span class="toctext">Implementation</span></a></li>
<li class="toclevel-1 tocsection-8"><a href="#Analysis"><span class="tocnumber">5</span> <span class="toctext">Analysis</span></a></li>
<li class="toclevel-1 tocsection-9"><a href="#Performance_theorems"><span class="tocnumber">6</span> <span class="toctext">Performance theorems</span></a></li>
<li class="toclevel-1 tocsection-10"><a href="#Dynamic_optimality_conjecture"><span class="tocnumber">7</span> <span class="toctext">Dynamic optimality conjecture</span></a></li>
<li class="toclevel-1 tocsection-11"><a href="#See_also"><span class="tocnumber">8</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-12"><a href="#Notes"><span class="tocnumber">9</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-13"><a href="#References"><span class="tocnumber">10</span> <span class="toctext">References</span></a></li>
<li class="toclevel-1 tocsection-14"><a href="#External_links"><span class="tocnumber">11</span> <span class="toctext">External links</span></a></li>
</ul>
</div>
<p></p>
<h2><span class="mw-headline" id="Advantages">Advantages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=1" title="Edit section: Advantages">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Good performance for a splay tree depends on the fact that it is self-optimizing, in that frequently accessed nodes will move nearer to the root where they can be accessed more quickly. The worst-case height—though unlikely—is O(n), with the average being O(log <i>n</i>). Having frequently used nodes near the root is an advantage for nearly all practical applications (also see <a href="Locality_of_reference.html" title="Locality of reference">Locality of reference</a>),<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (January 2010)">citation needed</span></a></i>]</sup> and is particularly useful for implementing <a href="Cache_(computing).html" title="Cache (computing)">caches</a> and <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)" title="Garbage collection (computer science)">garbage collection</a> algorithms.</p>
<p>Advantages include:</p>
<ul>
<li>Simple implementation—simpler than other self-balancing binary search trees, such as <a href="Red-black_tree.html" title="Red-black tree" class="mw-redirect">red-black trees</a> or <a href="AVL_tree.html" title="AVL tree">AVL trees</a>.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (March 2014)">citation needed</span></a></i>]</sup></li>
<li>Comparable performance—<a href="http://en.wikipedia.org/w/index.php?title=Average-case_performance&amp;action=edit&amp;redlink=1" class="new" title="Average-case performance (page does not exist)">average-case performance</a> is as efficient as other trees.<sup class="Template-Fact" style="white-space:nowrap;">[<i><a href="http://en.wikipedia.org/wiki/Wikipedia:Citation_needed" title="Wikipedia:Citation needed"><span title="This claim needs references to reliable sources. (January 2010)">citation needed</span></a></i>]</sup></li>
<li>Small memory footprint—splay trees do not need to store any bookkeeping data.</li>
<li>Possibility of creating a <a href="Persistent_data_structure.html" title="Persistent data structure">persistent data structure</a> version of splay trees—which allows access to both the previous and new versions after an update. This can be useful in <a href="Functional_programming.html" title="Functional programming">functional programming</a>, and requires amortized O(log <i>n</i>) space per update.</li>
<li>Working well with nodes containing identical keys—contrary to other types of self-balancing trees. Even with identical keys, performance remains amortized O(log <i>n</i>). All tree operations preserve the order of the identical nodes within the tree, which is a property similar to <a href="http://en.wikipedia.org/wiki/Sorting_algorithm#Classification" title="Sorting algorithm">stable sorting algorithms</a>. A carefully designed find operation can return the leftmost or rightmost node of a given key.</li>
</ul>
<h2><span class="mw-headline" id="Disadvantages">Disadvantages</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=2" title="Edit section: Disadvantages">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>The most significant disadvantage of splay trees is that the height of a splay tree can be linear. For example, this will be the case after accessing all <i>n</i> elements in non-decreasing order. Since the height of a tree corresponds to the worst-case access time, this means that the actual cost of an operation can be high. However the <a href="http://en.wikipedia.org/wiki/Amortized" title="Amortized" class="mw-redirect">amortized</a> access cost of this worst case is logarithmic, O(log <i>n</i>). Also, the expected access cost can be reduced to O(log <i>n</i>) <i>by using a randomized variant.<sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span>[</span>2<span>]</span></a></sup></i></p>
<p>A splay tree can be worse than a static tree by at most a constant factor.</p>
<p>The representation of splay trees can change even when they are accessed in a 'read-only' manner (i.e. by <i>find</i> operations). This complicates the use of such splay trees in a multi-threaded environment. Specifically, extra management is needed if multiple threads are allowed to perform <i>find</i> operations concurrently.</p>
<h2><span class="mw-headline" id="Operations">Operations</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=3" title="Edit section: Operations">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<h3><span class="mw-headline" id="Splaying">Splaying</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=4" title="Edit section: Splaying">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>When a node <i>x</i> is accessed, a splay operation is performed on <i>x</i> to move it to the root. To perform a splay operation we carry out a sequence of <i>splay steps</i>, each of which moves <i>x</i> closer to the root. By performing a splay operation on the node of interest after every access, the recently accessed nodes are kept near the root and the tree remains roughly balanced, so that we achieve the desired amortized time bounds.</p>
<p>Each particular step depends on three factors:</p>
<ul>
<li>Whether <i>x</i> is the left or right child of its parent node, <i>p</i>,</li>
<li>whether <i>p</i> is the root or not, and if not</li>
<li>whether <i>p</i> is the left or right child of <i>its</i> parent, <i>g</i> (the <i>grandparent</i> of x).</li>
</ul>
<p>It is important to remember to set <i>gg</i> (the <i>great-grandparent</i> of x) to now point to x after any splay operation. If <i>gg</i> is null, then x obviously is now the root and must be updated as such.</p>
<p>There are three types of splay steps, each of which has a left- and right-handed case. For the sake of brevity, only one of these two is shown for each type. These three types are:</p>
<p><b>Zig Step:</b> This step is done when <i>p</i> is the root. The tree is rotated on the edge between <i>x</i> and <i>p</i>. Zig steps exist to deal with the parity issue and will be done only as the last step in a splay operation and only when <i>x</i> has odd depth at the beginning of the operation.</p>
<div class="center">
<div class="floatnone"><a href="http://en.wikipedia.org/wiki/File:Splay_tree_zig.svg" class="image"><img alt="Splay tree zig.svg" src="http://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Splay_tree_zig.svg/709px-Splay_tree_zig.svg.png" width="709" height="237" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Splay_tree_zig.svg/1064px-Splay_tree_zig.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Splay_tree_zig.svg/1418px-Splay_tree_zig.svg.png 2x" /></a></div>
</div>
<p><b>Zig-zig Step:</b> This step is done when <i>p</i> is not the root and <i>x</i> and <i>p</i> are either both right children or are both left children. The picture below shows the case where <i>x</i> and <i>p</i> are both left children. The tree is rotated on the edge joining <i>p</i> with <i>its</i> parent <i>g</i>, then rotated on the edge joining <i>x</i> with <i>p</i>. Note that zig-zig steps are the only thing that differentiate splay trees from the <i>rotate to root</i> method introduced by Allen and Munro<sup id="cite_ref-AllenMunro_3-0" class="reference"><a href="#cite_note-AllenMunro-3"><span>[</span>3<span>]</span></a></sup> prior to the introduction of splay trees.</p>
<div class="center">
<div class="floatnone"><a href="http://en.wikipedia.org/wiki/File:Zigzig.gif" class="image"><img alt="Zigzig.gif" src="http://upload.wikimedia.org/wikipedia/commons/f/fd/Zigzig.gif" width="367" height="154" /></a></div>
</div>
<p><b>Zig-zag Step:</b> This step is done when <i>p</i> is not the root and <i>x</i> is a right child and <i>p</i> is a left child or vice versa. The tree is rotated on the edge between <i>p</i> and x, and then rotated on the resulting edge between <i>x</i> and g.</p>
<div class="center">
<div class="floatnone"><a href="http://en.wikipedia.org/wiki/File:Zigzag.gif" class="image"><img alt="Zigzag.gif" src="http://upload.wikimedia.org/wikipedia/commons/6/6f/Zigzag.gif" width="426" height="180" /></a></div>
</div>
<h3><span class="mw-headline" id="Insertion">Insertion</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=5" title="Edit section: Insertion">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>To insert a node <i>x</i> into a splay tree:</p>
<ol>
<li>First insert the node as with a normal <a href="Binary_search_tree.html" title="Binary search tree">binary search tree</a>.</li>
<li>Then splay the newly inserted node <i>x</i> to the top of the tree.</li>
</ol>
<h3><span class="mw-headline" id="Deletion">Deletion</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=6" title="Edit section: Deletion">edit</a><span class="mw-editsection-bracket">]</span></span></h3>
<p>To delete a node <i>x</i>, we use the same method as with a binary search tree: if <i>x</i> has two children, we swap its value with that of either the rightmost node of its left sub tree (its in-order predecessor) or the leftmost node of its right subtree (its in-order successor). Then we remove that node instead. In this way, deletion is reduced to the problem of removing a node with 0 or 1 children.</p>
<p>Unlike a binary search tree, in a splay tree after deletion, we splay the parent of the removed node to the top of the tree. <b>OR</b> The node to be deleted is first splayed, i.e. brought to the root of the tree and then deleted. This leaves the tree with two sub trees. The maximum element of the left sub tree (<b>: METHOD 1</b>), or minimum of the right sub tree (<b>: METHOD 2</b>) is then splayed to the root. The right sub tree is made the right child of the resultant left sub tree (for <b>METHOD 1</b>). The root of left sub tree is the root of melded tree.</p>
<h2><span class="mw-headline" id="Implementation">Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=7" title="Edit section: Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>Below there is an implementation of splay trees in C++, which uses pointers to represent each node on the tree. This implementation is based on the second method of deletion on a splay tree. Also, unlike the above definition, this C++ version does <i>not</i> splay the tree on finds - it only splays on insertions and deletions.</p>
<div dir="ltr" class="mw-geshi mw-code mw-content-ltr">
<div class="cpp source-cpp">
<pre class="de1">
<span class="co2">#include &lt;functional&gt;</span>
 
<span class="co2">#ifndef SPLAY_TREE</span>
<span class="co2">#define SPLAY_TREE</span>
 
<span class="kw2">template</span><span class="sy1">&lt;</span> <span class="kw2">typename</span> T, <span class="kw2">typename</span> Comp <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">less</span><span class="sy1">&lt;</span> T <span class="sy1">&gt;</span> <span class="sy1">&gt;</span>
<span class="kw2">class</span> splay_tree <span class="br0">{</span>
<span class="kw2">private</span><span class="sy4">:</span>
  Comp comp<span class="sy4">;</span>
  <span class="kw4">unsigned</span> <span class="kw4">long</span> p_size<span class="sy4">;</span>
 
  <span class="kw4">struct</span> node <span class="br0">{</span>
    node <span class="sy2">*</span>left, <span class="sy2">*</span>right<span class="sy4">;</span>
    node <span class="sy2">*</span>parent<span class="sy4">;</span>
    T key<span class="sy4">;</span>
    node<span class="br0">(</span> <span class="kw4">const</span> T<span class="sy3">&amp;</span> init <span class="sy1">=</span> T<span class="br0">(</span> <span class="br0">)</span> <span class="br0">)</span> <span class="sy4">:</span> left<span class="br0">(</span> <span class="nu0">0</span> <span class="br0">)</span>, right<span class="br0">(</span> <span class="nu0">0</span> <span class="br0">)</span>, parent<span class="br0">(</span> <span class="nu0">0</span> <span class="br0">)</span>, key<span class="br0">(</span> init <span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
  <span class="br0">}</span> <span class="sy2">*</span>root<span class="sy4">;</span>
 
  <span class="kw4">void</span> left_rotate<span class="br0">(</span> node <span class="sy2">*</span>x <span class="br0">)</span> <span class="br0">{</span>
    node <span class="sy2">*</span>y <span class="sy1">=</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy4">;</span>
    x<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">=</span> y<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy4">;</span>
    <span class="kw1">if</span><span class="br0">(</span> y<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="br0">)</span> y<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> x<span class="sy4">;</span>
    y<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy4">;</span>
    <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> root <span class="sy1">=</span> y<span class="sy4">;</span>
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> x <span class="sy1">==</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="br0">)</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">=</span> y<span class="sy4">;</span>
    <span class="kw1">else</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">=</span> y<span class="sy4">;</span>
    y<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">=</span> x<span class="sy4">;</span>
    x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> y<span class="sy4">;</span>
  <span class="br0">}</span>
 
  <span class="kw4">void</span> right_rotate<span class="br0">(</span> node <span class="sy2">*</span>x <span class="br0">)</span> <span class="br0">{</span>
    node <span class="sy2">*</span>y <span class="sy1">=</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy4">;</span>
    x<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">=</span> y<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy4">;</span>
    <span class="kw1">if</span><span class="br0">(</span> y<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="br0">)</span> y<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> x<span class="sy4">;</span>
    y<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy4">;</span>
    <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> root <span class="sy1">=</span> y<span class="sy4">;</span>
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> x <span class="sy1">==</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="br0">)</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">=</span> y<span class="sy4">;</span>
    <span class="kw1">else</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">=</span> y<span class="sy4">;</span>
    y<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">=</span> x<span class="sy4">;</span>
    x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> y<span class="sy4">;</span>
  <span class="br0">}</span>
 
  <span class="kw4">void</span> splay<span class="br0">(</span> node <span class="sy2">*</span>x <span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">while</span><span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> <span class="br0">{</span>
      <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span><span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">==</span> x <span class="br0">)</span> right_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
        <span class="kw1">else</span> left_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
      <span class="br0">}</span> <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">==</span> x <span class="sy3">&amp;&amp;</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">==</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> <span class="br0">{</span>
        right_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
        right_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
      <span class="br0">}</span> <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">==</span> x <span class="sy3">&amp;&amp;</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">==</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> <span class="br0">{</span>
        left_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
        left_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
      <span class="br0">}</span> <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">==</span> x <span class="sy3">&amp;&amp;</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">==</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> <span class="br0">{</span>
        right_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
        left_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
      <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
        left_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
        right_rotate<span class="br0">(</span> x<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span><span class="sy4">;</span>
      <span class="br0">}</span>
    <span class="br0">}</span>
  <span class="br0">}</span>
 
  <span class="kw4">void</span> replace<span class="br0">(</span> node <span class="sy2">*</span>u, node <span class="sy2">*</span>v <span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>u<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="br0">)</span> root <span class="sy1">=</span> v<span class="sy4">;</span>
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> u <span class="sy1">==</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="br0">)</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">=</span> v<span class="sy4">;</span>
    <span class="kw1">else</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">=</span> v<span class="sy4">;</span>
    <span class="kw1">if</span><span class="br0">(</span> v <span class="br0">)</span> v<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>parent<span class="sy4">;</span>
  <span class="br0">}</span>
 
  node<span class="sy2">*</span> subtree_minimum<span class="br0">(</span> node <span class="sy2">*</span>u <span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">while</span><span class="br0">(</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="br0">)</span> u <span class="sy1">=</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy4">;</span>
    <span class="kw1">return</span> u<span class="sy4">;</span>
  <span class="br0">}</span>
 
  node<span class="sy2">*</span> subtree_maximum<span class="br0">(</span> node <span class="sy2">*</span>u <span class="br0">)</span> <span class="br0">{</span>
    <span class="kw1">while</span><span class="br0">(</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="br0">)</span> u <span class="sy1">=</span> u<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy4">;</span>
    <span class="kw1">return</span> u<span class="sy4">;</span>
  <span class="br0">}</span>
<span class="kw2">public</span><span class="sy4">:</span>
  splay_tree<span class="br0">(</span> <span class="br0">)</span> <span class="sy4">:</span> root<span class="br0">(</span> <span class="nu0">0</span> <span class="br0">)</span>, p_size<span class="br0">(</span> <span class="nu0">0</span> <span class="br0">)</span> <span class="br0">{</span> <span class="br0">}</span>
 
  <span class="kw4">void</span> insert<span class="br0">(</span> <span class="kw4">const</span> T <span class="sy3">&amp;</span>key <span class="br0">)</span> <span class="br0">{</span>
    node <span class="sy2">*</span>z <span class="sy1">=</span> root<span class="sy4">;</span>
    node <span class="sy2">*</span>p <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span>
 
    <span class="kw1">while</span><span class="br0">(</span> z <span class="br0">)</span> <span class="br0">{</span>
      p <span class="sy1">=</span> z<span class="sy4">;</span>
      <span class="kw1">if</span><span class="br0">(</span> comp<span class="br0">(</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>key, key <span class="br0">)</span> <span class="br0">)</span> z <span class="sy1">=</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy4">;</span>
      <span class="kw1">else</span> z <span class="sy1">=</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy4">;</span>
    <span class="br0">}</span>
 
    z <span class="sy1">=</span> <span class="kw3">new</span> node<span class="br0">(</span> key <span class="br0">)</span><span class="sy4">;</span>
    z<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> p<span class="sy4">;</span>
 
    <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>p <span class="br0">)</span> root <span class="sy1">=</span> z<span class="sy4">;</span>
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> comp<span class="br0">(</span> p<span class="sy2">-</span><span class="sy1">&gt;</span>key, z<span class="sy2">-</span><span class="sy1">&gt;</span>key <span class="br0">)</span> <span class="br0">)</span> p<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">=</span> z<span class="sy4">;</span>
    <span class="kw1">else</span> p<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">=</span> z<span class="sy4">;</span>
 
    splay<span class="br0">(</span> z <span class="br0">)</span><span class="sy4">;</span>
    p_size<span class="sy2">++</span><span class="sy4">;</span>
  <span class="br0">}</span>
 
  node<span class="sy2">*</span> find<span class="br0">(</span> <span class="kw4">const</span> T <span class="sy3">&amp;</span>key <span class="br0">)</span> <span class="br0">{</span>
    node <span class="sy2">*</span>z <span class="sy1">=</span> root<span class="sy4">;</span>
    <span class="kw1">while</span><span class="br0">(</span> z <span class="br0">)</span> <span class="br0">{</span>
      <span class="kw1">if</span><span class="br0">(</span> comp<span class="br0">(</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>key, key <span class="br0">)</span> <span class="br0">)</span> z <span class="sy1">=</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy4">;</span>
      <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> comp<span class="br0">(</span> key, z<span class="sy2">-</span><span class="sy1">&gt;</span>key <span class="br0">)</span> <span class="br0">)</span> z <span class="sy1">=</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy4">;</span>
      <span class="kw1">else</span> <span class="kw1">return</span> z<span class="sy4">;</span>
    <span class="br0">}</span>
    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span>
  <span class="br0">}</span>
 
  <span class="kw4">void</span> erase<span class="br0">(</span> <span class="kw4">const</span> T <span class="sy3">&amp;</span>key <span class="br0">)</span> <span class="br0">{</span>
    node <span class="sy2">*</span>z <span class="sy1">=</span> find<span class="br0">(</span> key <span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>z <span class="br0">)</span> <span class="kw1">return</span><span class="sy4">;</span>
 
    splay<span class="br0">(</span> z <span class="br0">)</span><span class="sy4">;</span>
 
    <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>z<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="br0">)</span> replace<span class="br0">(</span> z, z<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">(</span> <span class="sy3">!</span>z<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="br0">)</span> replace<span class="br0">(</span> z, z<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="br0">)</span><span class="sy4">;</span>
    <span class="kw1">else</span> <span class="br0">{</span>
      node <span class="sy2">*</span>y <span class="sy1">=</span> subtree_minimum<span class="br0">(</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="br0">)</span><span class="sy4">;</span>
      <span class="kw1">if</span><span class="br0">(</span> y<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy3">!</span><span class="sy1">=</span> z <span class="br0">)</span> <span class="br0">{</span>
        replace<span class="br0">(</span> y, y<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="br0">)</span><span class="sy4">;</span>
        y<span class="sy2">-</span><span class="sy1">&gt;</span>right <span class="sy1">=</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy4">;</span>
        y<span class="sy2">-</span><span class="sy1">&gt;</span>right<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> y<span class="sy4">;</span>
      <span class="br0">}</span>
      replace<span class="br0">(</span> z, y <span class="br0">)</span><span class="sy4">;</span>
      y<span class="sy2">-</span><span class="sy1">&gt;</span>left <span class="sy1">=</span> z<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy4">;</span>
      y<span class="sy2">-</span><span class="sy1">&gt;</span>left<span class="sy2">-</span><span class="sy1">&gt;</span>parent <span class="sy1">=</span> y<span class="sy4">;</span>
    <span class="br0">}</span>
 
    <span class="kw3">delete</span> z<span class="sy4">;</span>
    p_size<span class="sy2">--</span><span class="sy4">;</span>
  <span class="br0">}</span>
 
  <span class="kw4">const</span> T<span class="sy3">&amp;</span> minimum<span class="br0">(</span> <span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> subtree_minimum<span class="br0">(</span> root <span class="br0">)</span><span class="sy2">-</span><span class="sy1">&gt;</span>key<span class="sy4">;</span> <span class="br0">}</span>
  <span class="kw4">const</span> T<span class="sy3">&amp;</span> maximum<span class="br0">(</span> <span class="br0">)</span> <span class="br0">{</span> <span class="kw1">return</span> subtree_maximum<span class="br0">(</span> root <span class="br0">)</span><span class="sy2">-</span><span class="sy1">&gt;</span>key<span class="sy4">;</span> <span class="br0">}</span>
 
  <span class="kw4">bool</span> empty<span class="br0">(</span> <span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> root <span class="sy1">==</span> <span class="nu0">0</span><span class="sy4">;</span> <span class="br0">}</span>
  <span class="kw4">unsigned</span> <span class="kw4">long</span> size<span class="br0">(</span> <span class="br0">)</span> <span class="kw4">const</span> <span class="br0">{</span> <span class="kw1">return</span> p_size<span class="sy4">;</span> <span class="br0">}</span>
<span class="br0">}</span><span class="sy4">;</span>
 
<span class="co2">#endif // SPLAY_TREE</span>
</pre></div>
</div>
<h2><span class="mw-headline" id="Analysis">Analysis</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=8" title="Edit section: Analysis">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>A simple <a href="Amortized_analysis.html" title="Amortized analysis">amortized analysis</a> of static splay trees can be carried out using the <a href="http://en.wikipedia.org/wiki/Potential_method" title="Potential method">potential method</a>. Suppose that size(<i>r</i>) is the number of nodes in the subtree rooted at <i>r</i> (including <i>r</i>) and rank(<i>r</i>) = log<sub>2</sub>(size(<i>r</i>)). Then the potential function P(<i>t</i>) for a splay tree <i>t</i> is the sum of the ranks of all the nodes in the tree. This will tend to be high for poorly balanced trees, and low for well-balanced trees. We can bound the amortized cost of any zig-zig or zig-zag operation by:</p>
<dl>
<dd>amortized cost = cost + P(t<sub>f</sub>) - P(t<sub>i</sub>) ≤ 3(rank<sub>f</sub>(<i>x</i>) - rank<sub>i</sub>(<i>x</i>)),</dd>
</dl>
<p>where <i>x</i> is the node being moved towards the root, and the subscripts "f" and "i" indicate after and before the operation, respectively. When summed over the entire splay operation, this <a href="http://en.wikipedia.org/wiki/Telescoping_series" title="Telescoping series">telescopes</a> to 3(rank(root)) which is O(log <i>n</i>). Since there's at most one zig operation, this only adds a constant.</p>
<h2><span class="mw-headline" id="Performance_theorems">Performance theorems</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=9" title="Edit section: Performance theorems">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<p>There are several theorems and conjectures regarding the worst-case runtime for performing a sequence <i>S</i> of <i>m</i> accesses in a splay tree containing <i>n</i> elements.</p>
<dl>
<dt>Balance Theorem</dt>
<dd><sup id="cite_ref-SleatorTarjan_1-1" class="reference"><a href="#cite_note-SleatorTarjan-1"><span>[</span>1<span>]</span></a></sup> The cost of performing the sequence <i>S</i> is <img class="tex" alt="O\left[m(1 + \log n) + n\log n\right]" src="http://upload.wikimedia.org/math/2/f/5/2f57b653b03ef7f88edc73acde8a3756.png" />. In other words, splay trees perform as well as static balanced binary search trees on sequences of at least <i>n</i> accesses.</dd>
<dt>Static Optimality Theorem</dt>
<dd><sup id="cite_ref-SleatorTarjan_1-2" class="reference"><a href="#cite_note-SleatorTarjan-1"><span>[</span>1<span>]</span></a></sup> Let <img class="tex" alt="q_i" src="http://upload.wikimedia.org/math/0/5/5/055c210a7797b4e842635accb13e32a7.png" /> be the number of times element <i>i</i> is accessed in <i>S</i>. The cost of performing <i>S</i> is <img class="tex" alt="O\left[m + \sum_{i=1}^n q_i\log\frac{m}{q_i}\right]" src="http://upload.wikimedia.org/math/1/2/1/121d21f8d23b11ce9d2235b89fb6279e.png" />. In other words, splay trees perform as well as optimum static binary search trees on sequences of at least <i>n</i> accesses.</dd>
<dt>Static Finger Theorem</dt>
<dd><sup id="cite_ref-SleatorTarjan_1-3" class="reference"><a href="#cite_note-SleatorTarjan-1"><span>[</span>1<span>]</span></a></sup> Let <img class="tex" alt="i_j" src="http://upload.wikimedia.org/math/8/1/5/815147f41410ea2dc02e7b52dfcd711b.png" /> be the element accessed in the <img class="tex" alt="j^{th}" src="http://upload.wikimedia.org/math/b/3/5/b35be813c0c020ea8a099c67d611e463.png" /> access of <i>S</i> and let <i>f</i> be any fixed element (the finger). The cost of performing <i>S</i> is <img class="tex" alt="O\left[m + n\log n + \sum_{j=1}^m \log(|i_j-f| + 1)\right]" src="http://upload.wikimedia.org/math/6/d/f/6df0f0c2c8b13a37dc6f5a5cd39c80d6.png" />.</dd>
<dt>Working Set Theorem</dt>
<dd><sup id="cite_ref-SleatorTarjan_1-4" class="reference"><a href="#cite_note-SleatorTarjan-1"><span>[</span>1<span>]</span></a></sup> Let <img class="tex" alt="t(j)" src="http://upload.wikimedia.org/math/7/7/a/77abd43570d9166a4ddc4a57bb10865d.png" /> be the number of distinct elements accessed between access <i>j</i> and the previous time element <img class="tex" alt="i_j" src="http://upload.wikimedia.org/math/8/1/5/815147f41410ea2dc02e7b52dfcd711b.png" /> was accessed. The cost of performing <i>S</i> is <img class="tex" alt="O\left[m + n\log n + \sum_{j=1}^m \log(t(j) + 1)\right]" src="http://upload.wikimedia.org/math/3/8/3/3835e353903f31ad66311678b3d0bbcb.png" />.</dd>
<dt>Dynamic Finger Theorem</dt>
<dd><sup id="cite_ref-ColeEtAl_4-0" class="reference"><a href="#cite_note-ColeEtAl-4"><span>[</span>4<span>]</span></a></sup><sup id="cite_ref-Cole_5-0" class="reference"><a href="#cite_note-Cole-5"><span>[</span>5<span>]</span></a></sup> The cost of performing <i>S</i> is <img class="tex" alt="O\left[m + n + \sum_{j=1}^m \log(|i_{j + 1} - i_j| + 1)\right]" src="http://upload.wikimedia.org/math/e/5/2/e52a17dec6c60e72547bf6a4878f2622.png" />.</dd>
<dt>Scanning Theorem</dt>
<dd><sup id="cite_ref-Tarjan_6-0" class="reference"><a href="#cite_note-Tarjan-6"><span>[</span>6<span>]</span></a></sup> Also known as the <b>Sequential Access Theorem</b>. Accessing the <i>n</i> elements of a splay tree in symmetric order takes O(<i>n</i>) time, regardless of the initial structure of the splay tree. The tightest upper bound proven so far is <img class="tex" alt="4.5n" src="http://upload.wikimedia.org/math/3/c/4/3c451698bc6dc37d3bc43da378320db2.png" />.<sup id="cite_ref-Elmasry_7-0" class="reference"><a href="#cite_note-Elmasry-7"><span>[</span>7<span>]</span></a></sup></dd>
</dl>
<h2><span class="mw-headline" id="Dynamic_optimality_conjecture">Dynamic optimality conjecture</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=10" title="Edit section: Dynamic optimality conjecture">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<table class="wikitable" style="float:right; width:30%; margin:0em 1em 1em 1em;">
<caption><a href="http://en.wikipedia.org/wiki/List_of_unsolved_problems_in_computer_science" title="List of unsolved problems in computer science">List of unsolved problems in computer science</a></caption>
<tr>
<td><i>Do splay trees perform as well as any other binary search tree algorithm?</i></td>
</tr>
</table>
<p>In addition to the proven performance guarantees for splay trees there is an unproven conjecture of great interest from the original Sleator and Tarjan paper. This conjecture is known as the <i>dynamic optimality conjecture</i> and it basically claims that splay trees perform as well as any other binary search tree algorithm up to a constant factor.</p>
<dl>
<dd><b>Dynamic Optimality Conjecture:<sup id="cite_ref-SleatorTarjan_1-5" class="reference"><a href="#cite_note-SleatorTarjan-1"><span>[</span>1<span>]</span></a></sup></b> Let <img class="tex" alt="A" src="http://upload.wikimedia.org/math/7/f/c/7fc56270e7a70fa81a5935b72eacbe29.png" /> be any binary search tree algorithm that accesses an element <img class="tex" alt="x" src="http://upload.wikimedia.org/math/9/d/d/9dd4e461268c8034f5c8564e155c67a6.png" /> by traversing the path from the root to <img class="tex" alt="x" src="http://upload.wikimedia.org/math/9/d/d/9dd4e461268c8034f5c8564e155c67a6.png" /> at a cost of <img class="tex" alt="d(x)+1" src="http://upload.wikimedia.org/math/a/1/7/a17406bfaeb7fe41faaa72ad3ee8a3c7.png" />, and that between accesses can make any rotations in the tree at a cost of 1 per rotation. Let <img class="tex" alt="A(S)" src="http://upload.wikimedia.org/math/6/a/d/6ad5c869270583e74702774c699150a0.png" /> be the cost for <img class="tex" alt="A" src="http://upload.wikimedia.org/math/7/f/c/7fc56270e7a70fa81a5935b72eacbe29.png" /> to perform the sequence <img class="tex" alt="S" src="http://upload.wikimedia.org/math/5/d/b/5dbc98dcc983a70728bd082d1a47546e.png" /> of accesses. Then the cost for a splay tree to perform the same accesses is <img class="tex" alt="O[n + A(S)]" src="http://upload.wikimedia.org/math/5/8/9/58934dd65086700e5f7dda920dd077f9.png" />.</dd>
</dl>
<p>There are several corollaries of the dynamic optimality conjecture that remain unproven:</p>
<dl>
<dd><b>Traversal Conjecture:<sup id="cite_ref-SleatorTarjan_1-6" class="reference"><a href="#cite_note-SleatorTarjan-1"><span>[</span>1<span>]</span></a></sup></b> Let <img class="tex" alt="T_1" src="http://upload.wikimedia.org/math/a/5/7/a5749ec33f2c95fe8c19d702d76d4968.png" /> and <img class="tex" alt="T_2" src="http://upload.wikimedia.org/math/f/0/6/f066e1184caa1b9991cbceb207ea6341.png" /> be two splay trees containing the same elements. Let <img class="tex" alt="S" src="http://upload.wikimedia.org/math/5/d/b/5dbc98dcc983a70728bd082d1a47546e.png" /> be the sequence obtained by visiting the elements in <img class="tex" alt="T_2" src="http://upload.wikimedia.org/math/f/0/6/f066e1184caa1b9991cbceb207ea6341.png" /> in preorder (i.e., depth first search order). The total cost of performing the sequence <img class="tex" alt="S" src="http://upload.wikimedia.org/math/5/d/b/5dbc98dcc983a70728bd082d1a47546e.png" /> of accesses on <img class="tex" alt="T_1" src="http://upload.wikimedia.org/math/a/5/7/a5749ec33f2c95fe8c19d702d76d4968.png" /> is <img class="tex" alt="O(n)" src="http://upload.wikimedia.org/math/7/b/a/7ba55e7c64a9405a0b39a1107e90ca94.png" />.</dd>
</dl>
<dl>
<dd><b>Deque Conjecture:<sup id="cite_ref-Tarjan_6-1" class="reference"><a href="#cite_note-Tarjan-6"><span>[</span>6<span>]</span></a></sup><sup id="cite_ref-Pettie_8-0" class="reference"><a href="#cite_note-Pettie-8"><span>[</span>8<span>]</span></a></sup><sup id="cite_ref-Sundar_9-0" class="reference"><a href="#cite_note-Sundar-9"><span>[</span>9<span>]</span></a></sup></b> Let <img class="tex" alt="S" src="http://upload.wikimedia.org/math/5/d/b/5dbc98dcc983a70728bd082d1a47546e.png" /> be a sequence of <img class="tex" alt="m" src="http://upload.wikimedia.org/math/6/f/8/6f8f57715090da2632453988d9a1501b.png" /> <a href="Double-ended_queue.html" title="Double-ended queue">double-ended queue</a> operations (push, pop, inject, eject). Then the cost of performing <img class="tex" alt="S" src="http://upload.wikimedia.org/math/5/d/b/5dbc98dcc983a70728bd082d1a47546e.png" /> on a splay tree is <img class="tex" alt="O(m + n)" src="http://upload.wikimedia.org/math/c/f/d/cfda60c744b8119ed03fe07e5c3722c9.png" />.</dd>
</dl>
<dl>
<dd><b>Split Conjecture:<sup id="cite_ref-Lucas_10-0" class="reference"><a href="#cite_note-Lucas-10"><span>[</span>10<span>]</span></a></sup></b> Let <img class="tex" alt="S" src="http://upload.wikimedia.org/math/5/d/b/5dbc98dcc983a70728bd082d1a47546e.png" /> be any permutation of the elements of the splay tree. Then the cost of deleting the elements in the order <img class="tex" alt="S" src="http://upload.wikimedia.org/math/5/d/b/5dbc98dcc983a70728bd082d1a47546e.png" /> is <img class="tex" alt="O(n)" src="http://upload.wikimedia.org/math/7/b/a/7ba55e7c64a9405a0b39a1107e90ca94.png" />.</dd>
</dl>
<h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=11" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="http://en.wikipedia.org/wiki/Finger_tree" title="Finger tree">Finger tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Link/cut_tree" title="Link/cut tree">Link/cut tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Scapegoat_tree" title="Scapegoat tree">Scapegoat tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Zipper_(data_structure)" title="Zipper (data structure)">Zipper (data structure)</a></li>
<li><a href="http://en.wikipedia.org/wiki/Tree_data_structure" title="Tree data structure" class="mw-redirect">Trees</a></li>
<li><a href="http://en.wikipedia.org/wiki/Tree_rotation" title="Tree rotation">Tree rotation</a></li>
<li><a href="AVL_tree.html" title="AVL tree">AVL tree</a></li>
<li><a href="B-tree.html" title="B-tree">B-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/T-tree" title="T-tree">T-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/List_of_data_structures" title="List of data structures">List of data structures</a></li>
<li><a href="http://en.wikipedia.org/wiki/Iacono%27s_working_set_structure" title="Iacono's working set structure">Iacono's working set structure</a></li>
<li><a href="http://en.wikipedia.org/wiki/Geometry_of_binary_search_trees" title="Geometry of binary search trees">Geometry of binary search trees</a></li>
<li><a href="http://en.wikipedia.org/wiki/Splaysort" title="Splaysort">Splaysort</a>, a sorting algorithm using splay trees</li>
</ul>
<h2><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=12" title="Edit section: Notes">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<div class="reflist" style="list-style-type: decimal;">
<ol class="references">
<li id="cite_note-SleatorTarjan-1"><span class="mw-cite-backlink">^ <a href="#cite_ref-SleatorTarjan_1-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-SleatorTarjan_1-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-SleatorTarjan_1-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-SleatorTarjan_1-3"><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-SleatorTarjan_1-4"><sup><i><b>e</b></i></sup></a> <a href="#cite_ref-SleatorTarjan_1-5"><sup><i><b>f</b></i></sup></a> <a href="#cite_ref-SleatorTarjan_1-6"><sup><i><b>g</b></i></sup></a></span> <span class="reference-text"><span id="CITEREFSleatorTarjan1985" class="citation">Sleator, Daniel D.; Tarjan, Robert E. (1985), <a rel="nofollow" class="external text" href="http://www.cs.cmu.edu/~sleator/papers/self-adjusting.pdf">"Self-Adjusting Binary Search Trees"</a>, <i>Journal of the ACM (<a href="Association_for_Computing_Machinery.html" title="Association for Computing Machinery">Association for Computing Machinery</a>)</i> <b>32</b> (3): 652–686, <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F3828.3835">10.1145/3828.3835</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=Self-Adjusting+Binary+Search+Trees&amp;rft.aufirst=Daniel+D.&amp;rft.aulast=Sleator&amp;rft.au=Sleator%2C+Daniel+D.&amp;rft.au=Tarjan%2C+Robert+E.&amp;rft.date=1985&amp;rft.genre=article&amp;rft_id=http%3A%2F%2Fwww.cs.cmu.edu%2F~sleator%2Fpapers%2Fself-adjusting.pdf&amp;rft_id=info%3Adoi%2F10.1145%2F3828.3835&amp;rft.issue=3&amp;rft.jtitle=Journal+of+the+ACM+%28Association+for+Computing+Machinery%29&amp;rft.pages=652%E2%80%93686&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=32" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www2.informatik.hu-berlin.de/~albers/papers/ipl02.pdf">"Randomized Splay Trees: Theoretical and Experimental Results"</a><span class="reference-accessdate">. Retrieved 31 May 2011</span>.</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.btitle=Randomized+Splay+Trees%3A+Theoretical+and+Experimental+Results&amp;rft.genre=book&amp;rft_id=http%3A%2F%2Fwww2.informatik.hu-berlin.de%2F~albers%2Fpapers%2Fipl02.pdf&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-AllenMunro-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-AllenMunro_3-0">^</a></b></span> <span class="reference-text"><span id="CITEREFAllen.2C_Brian.3B_and_Munro.2C_Ian1978" class="citation">Allen, Brian; and Munro, Ian (1978), "Self-organizing search trees", <i>Journal of the ACM</i> <b>25</b> (4): 526–535, <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1145%2F322092.322094">10.1145/322092.322094</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=Self-organizing+search+trees&amp;rft.au=Allen%2C+Brian%3B+and+Munro%2C+Ian&amp;rft.aulast=Allen%2C+Brian%3B+and+Munro%2C+Ian&amp;rft.date=1978&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1145%2F322092.322094&amp;rft.issue=4&amp;rft.jtitle=Journal+of+the+ACM&amp;rft.pages=526%E2%80%93535&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=25" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-ColeEtAl-4"><span class="mw-cite-backlink"><b><a href="#cite_ref-ColeEtAl_4-0">^</a></b></span> <span class="reference-text"><span id="CITEREFCole.2C_Richard2000" class="citation">Cole, Richard; Mishra, Bud; Schmidt, Jeanette; and Siegel, Alan (2000), "On the Dynamic Finger Conjecture for Splay Trees. Part I: Splay Sorting log n-Block Sequences", <i><a href="http://en.wikipedia.org/wiki/SIAM_Journal_on_Computing" title="SIAM Journal on Computing">SIAM Journal on Computing</a></i> <b>30</b>: 1–43</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=On+the+Dynamic+Finger+Conjecture+for+Splay+Trees.+Part+I%3A+Splay+Sorting+log+n-Block+Sequences&amp;rft.au=Cole%2C+Richard&amp;rft.aulast=Cole%2C+Richard&amp;rft.date=2000&amp;rft.genre=article&amp;rft.jtitle=SIAM+Journal+on+Computing&amp;rft.pages=1%E2%80%9343&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=30" class="Z3988"><span style="display:none;">&#160;</span></span> <span style="display:none;font-size:100%" class="error citation-comment">Cite uses deprecated parameters (<a href="http://en.wikipedia.org/wiki/Help:CS1_errors#deprecated_params" title="Help:CS1 errors">help</a>)</span></span></li>
<li id="cite_note-Cole-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-Cole_5-0">^</a></b></span> <span class="reference-text"><span id="CITEREFCole.2C_Richard2000" class="citation">Cole, Richard (2000), "On the Dynamic Finger Conjecture for Splay Trees. Part II: The Proof", <i>SIAM Journal on Computing</i> <b>30</b>: 44–85, <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1137%2FS009753979732699X">10.1137/S009753979732699X</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=On+the+Dynamic+Finger+Conjecture+for+Splay+Trees.+Part+II%3A+The+Proof&amp;rft.au=Cole%2C+Richard&amp;rft.aulast=Cole%2C+Richard&amp;rft.date=2000&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1137%2FS009753979732699X&amp;rft.jtitle=SIAM+Journal+on+Computing&amp;rft.pages=44%E2%80%9385&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=30" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Tarjan-6"><span class="mw-cite-backlink">^ <a href="#cite_ref-Tarjan_6-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Tarjan_6-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><span id="CITEREFTarjan.2C_Robert_E.1985" class="citation">Tarjan, Robert E. (1985), "Sequential access in splay trees takes linear time", <i>Combinatorica</i> <b>5</b> (4): 367–378, <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1007%2FBF02579253">10.1007/BF02579253</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=Sequential+access+in+splay+trees+takes+linear+time&amp;rft.aulast=Tarjan%2C+Robert+E.&amp;rft.au=Tarjan%2C+Robert+E.&amp;rft.date=1985&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1007%2FBF02579253&amp;rft.issue=4&amp;rft.jtitle=Combinatorica&amp;rft.pages=367%E2%80%93378&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=5" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Elmasry-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-Elmasry_7-0">^</a></b></span> <span class="reference-text"><span id="CITEREFElmasry.2C_Amr2004" class="citation">Elmasry, Amr (2004), "On the sequential access theorem and Deque conjecture for splay trees", <i>Theoretical Computer Science</i> <b>314</b> (3): 459–466, <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1016%2Fj.tcs.2004.01.019">10.1016/j.tcs.2004.01.019</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=On+the+sequential+access+theorem+and+Deque+conjecture+for+splay+trees&amp;rft.au=Elmasry%2C+Amr&amp;rft.aulast=Elmasry%2C+Amr&amp;rft.date=2004&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1016%2Fj.tcs.2004.01.019&amp;rft.issue=3&amp;rft.jtitle=Theoretical+Computer+Science&amp;rft.pages=459%E2%80%93466&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=314" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Pettie-8"><span class="mw-cite-backlink"><b><a href="#cite_ref-Pettie_8-0">^</a></b></span> <span class="reference-text"><span id="CITEREFPettie.2C_Seth2008" class="citation">Pettie, Seth (2008), "Splay Trees, Davenport-Schinzel Sequences, and the Deque Conjecture", <i>Proceedings of the 19th ACM-SIAM Symposium on Discrete Algorithms</i> <b>0707</b>: 1115–1124, <a href="http://en.wikipedia.org/wiki/ArXiv" title="ArXiv">arXiv</a>:<a rel="nofollow" class="external text" href="http://arxiv.org/abs/0707.2160">0707.2160</a>, <a href="http://en.wikipedia.org/wiki/Bibcode" title="Bibcode">Bibcode</a>:<a rel="nofollow" class="external text" href="http://adsabs.harvard.edu/abs/2007arXiv0707.2160P">2007arXiv0707.2160P</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=Splay+Trees%2C+Davenport-Schinzel+Sequences%2C+and+the+Deque+Conjecture&amp;rft.aulast=Pettie%2C+Seth&amp;rft.au=Pettie%2C+Seth&amp;rft.date=2008&amp;rft.genre=article&amp;rft_id=info%3Aarxiv%2F0707.2160&amp;rft_id=info%3Abibcode%2F2007arXiv0707.2160P&amp;rft.jtitle=Proceedings+of+the+19th+ACM-SIAM+Symposium+on+Discrete+Algorithms&amp;rft.pages=1115%E2%80%931124&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=0707" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Sundar-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-Sundar_9-0">^</a></b></span> <span class="reference-text"><span id="CITEREFSundar.2C_Rajamani1992" class="citation">Sundar, Rajamani (1992), "On the Deque conjecture for the splay algorithm", <i>Combinatorica</i> <b>12</b> (1): 95–124, <a href="Digital_object_identifier.html" title="Digital object identifier">doi</a>:<a rel="nofollow" class="external text" href="http://dx.doi.org/10.1007%2FBF01191208">10.1007/BF01191208</a></span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=On+the+Deque+conjecture+for+the+splay+algorithm&amp;rft.aulast=Sundar%2C+Rajamani&amp;rft.au=Sundar%2C+Rajamani&amp;rft.date=1992&amp;rft.genre=article&amp;rft_id=info%3Adoi%2F10.1007%2FBF01191208&amp;rft.issue=1&amp;rft.jtitle=Combinatorica&amp;rft.pages=95%E2%80%93124&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.volume=12" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
<li id="cite_note-Lucas-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-Lucas_10-0">^</a></b></span> <span class="reference-text"><span id="CITEREFLucas.2C_Joan_M.1991" class="citation">Lucas, Joan M. (1991), "On the Competitiveness of Splay Trees: Relations to the Union-Find Problem", <i>Online Algorithms, Center for Discrete Mathematics and Theoretical Computer Science (<a href="http://en.wikipedia.org/wiki/DIMACS" title="DIMACS">DIMACS</a>) Series in Discrete Mathematics and Theoretical Computer Science Vol. 7</i>: 95–124</span><span title="ctx_ver=Z39.88-2004&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3ASplay+tree&amp;rft.atitle=On+the+Competitiveness+of+Splay+Trees%3A+Relations+to+the+Union-Find+Problem&amp;rft.aulast=Lucas%2C+Joan+M.&amp;rft.au=Lucas%2C+Joan+M.&amp;rft.date=1991&amp;rft.genre=article&amp;rft.jtitle=Online+Algorithms%2C+Center+for+Discrete+Mathematics+and+Theoretical+Computer+Science+%28DIMACS%29+Series+in+Discrete+Mathematics+and+Theoretical+Computer+Science+Vol.+7&amp;rft.pages=95%E2%80%93124&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal" class="Z3988"><span style="display:none;">&#160;</span></span></span></li>
</ol>
</div>
<h2><span class="mw-headline" id="References">References</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=13" title="Edit section: References">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a href="Donald_Knuth.html" title="Donald Knuth">Knuth, Donald</a>. <i><a href="http://en.wikipedia.org/wiki/The_Art_of_Computer_Programming" title="The Art of Computer Programming">The Art of Computer Programming</a></i>, Volume 3: <i>Sorting and Searching</i>, Third Edition. Addison-Wesley, 1997. <a href="http://en.wikipedia.org/wiki/Special:BookSources/0201896850" class="internal mw-magiclink-isbn">ISBN 0-201-89685-0</a>. Page 478 of section 6.2.3.</li>
</ul>
<h2><span class="mw-headline" id="External_links">External links</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit&amp;section=14" title="Edit section: External links">edit</a><span class="mw-editsection-bracket">]</span></span></h2>
<ul>
<li><a rel="nofollow" class="external text" href="http://www.nist.gov/dads/HTML/splaytree.html">NIST's Dictionary of Algorithms and Data Structures: Splay Tree</a></li>
<li><a rel="nofollow" class="external text" href="http://www.link.cs.cmu.edu/link/ftp-site/splaying/">Implementations in C and Java (by Daniel Sleator)</a></li>
<li><a rel="nofollow" class="external text" href="http://wiki.algoviz.org/search/node/splay">Pointers to splay tree visualizations</a></li>
<li><a rel="nofollow" class="external text" href="http://github.com/fbuihuu/libtree">Fast and efficient implentation of Splay trees</a></li>
<li><a rel="nofollow" class="external text" href="http://github.com/cpdomina/SplayTree">Top-Down Splay Tree Java implementation</a></li>
<li><a rel="nofollow" class="external text" href="http://arxiv.org/abs/1003.0139">Zipper Trees</a></li>
<li><a rel="nofollow" class="external text" href="http://www.youtube.com/watch?v=G5QIXywcJlY">splay tree video</a></li>
</ul>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:CS_trees" title="Template:CS trees"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:CS_trees" title="Template talk:CS trees"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:CS_trees&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="Tree_(data_structure).html" title="Tree (data structure)">Tree data structures</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Binary_tree.html" title="Binary tree">Binary trees</a></th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Binary_search_tree.html" title="Binary search tree">Binary search tree (BST)</a></li>
<li><a href="http://en.wikipedia.org/wiki/Cartesian_tree" title="Cartesian tree">Cartesian tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/MVP_tree" title="MVP tree">MVP tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Top_tree" title="Top tree">Top tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/T-tree" title="T-tree">T-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Left-child_right-sibling_binary_tree" title="Left-child right-sibling binary tree">Left-child right-sibling binary tree</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Self-balancing_binary_search_tree.html" title="Self-balancing binary search tree">Self-balancing binary search trees</a></th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="AA_tree.html" title="AA tree">AA tree</a></li>
<li><a href="AVL_tree.html" title="AVL tree">AVL tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Left-leaning_red–black_tree" title="Left-leaning red–black tree">LLRB tree</a></li>
<li><a href="Red%e2%80%93black_tree.html" title="Red–black tree">Red–black tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Scapegoat_tree" title="Scapegoat tree">Scapegoat tree</a></li>
<li><strong class="selflink">Splay tree</strong></li>
<li><a href="http://en.wikipedia.org/wiki/Treap" title="Treap">Treap</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="B-tree.html" title="B-tree">B-trees</a></th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/B+_tree" title="B+ tree">B+ tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/B*-tree" title="B*-tree" class="mw-redirect">B*-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Bx-tree" title="Bx-tree">B<small><sup>x</sup></small>-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/UB-tree" title="UB-tree">UB-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/2–3_tree" title="2–3 tree">2–3 tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/2–3–4_tree" title="2–3–4 tree">2–3–4 tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/(a,b)-tree" title="(a,b)-tree">(a,b)-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Dancing_tree" title="Dancing tree">Dancing tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/HTree" title="HTree">HTree</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Trie.html" title="Trie">Tries</a></th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Suffix_tree" title="Suffix tree">Suffix tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Radix_tree" title="Radix tree">Radix tree</a></li>
<li><a href="Hash_tree_(persistent_data_structure).html" title="Hash tree (persistent data structure)">Hash tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Ternary_search_tree" title="Ternary search tree">Ternary search tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/X-fast_trie" title="X-fast trie">X-fast trie</a></li>
<li><a href="http://en.wikipedia.org/wiki/Y-fast_trie" title="Y-fast trie">Y-fast trie</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Binary_space_partitioning" title="Binary space partitioning">Binary space partitioning (BSP)</a> trees</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Quadtree" title="Quadtree">Quadtree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Octree" title="Octree">Octree</a></li>
<li><a href="http://en.wikipedia.org/wiki/K-d_tree" title="K-d tree"><i>k</i>-d tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Implicit_k-d_tree" title="Implicit k-d tree">Implicit <i>k</i>-d tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Vantage-point_tree" title="Vantage-point tree">VP tree</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Non-binary trees</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="http://en.wikipedia.org/wiki/Exponential_tree" title="Exponential tree">Exponential tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Fusion_tree" title="Fusion tree">Fusion tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Interval_tree" title="Interval tree">Interval tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/PQ_tree" title="PQ tree">PQ tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Range_tree" title="Range tree">Range tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/SPQR_tree" title="SPQR tree">SPQR tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Van_Emde_Boas_tree" title="Van Emde Boas tree">Van Emde Boas tree</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="http://en.wikipedia.org/wiki/Spatial_index" title="Spatial index" class="mw-redirect">Spatial</a> data partitioning trees</th>
<td class="navbox-list navbox-odd hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="R-tree.html" title="R-tree">R-tree</a></li>
<li><a href="R%2b_tree.html" title="R+ tree">R+ tree</a></li>
<li><a href="R__tree.html" title="R* tree">R* tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/X-tree" title="X-tree">X-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/M-tree" title="M-tree">M-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Segment_tree" title="Segment tree">Segment tree</a></li>
<li><a href="Hilbert_R-tree.html" title="Hilbert R-tree">Hilbert R-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Priority_R-tree" title="Priority R-tree">Priority R-tree</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Other trees</th>
<td class="navbox-list navbox-even hlist" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Heap_(data_structure).html" title="Heap (data structure)">Heap</a></li>
<li><a href="http://en.wikipedia.org/wiki/Hash_calendar" title="Hash calendar">Hash calendar</a></li>
<li><a href="http://en.wikipedia.org/wiki/Merkle_tree" title="Merkle tree">Merkle tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Finger_tree" title="Finger tree">Finger tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Order_statistic_tree" title="Order statistic tree">Order statistic tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Metric_tree" title="Metric tree">Metric tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Cover_tree" title="Cover tree">Cover tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/BK-tree" title="BK-tree">BK-tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Doubly_chained_tree" title="Doubly chained tree">Doubly chained tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/IDistance" title="IDistance">iDistance</a></li>
<li><a href="http://en.wikipedia.org/wiki/Link/cut_tree" title="Link/cut tree">Link/cut tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Fenwick_tree" title="Fenwick tree">Fenwick tree</a></li>
<li><a href="http://en.wikipedia.org/wiki/Log-structured_merge-tree" title="Log-structured merge-tree">Log-structured merge-tree</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>
<table cellspacing="0" class="navbox" style="border-spacing:0;">
<tr>
<td style="padding:2px;">
<table cellspacing="0" class="nowraplinks hlist collapsible autocollapse navbox-inner" style="border-spacing:0;background:transparent;color:inherit;">
<tr>
<th scope="col" class="navbox-title" colspan="2">
<div class="plainlinks hlist navbar mini">
<ul>
<li class="nv-view"><a href="http://en.wikipedia.org/wiki/Template:Data_structures" title="Template:Data structures"><span title="View this template" style=";;background:none transparent;border:none;;">v</span></a></li>
<li class="nv-talk"><a href="http://en.wikipedia.org/wiki/Template_talk:Data_structures" title="Template talk:Data structures"><span title="Discuss this template" style=";;background:none transparent;border:none;;">t</span></a></li>
<li class="nv-edit"><a class="external text" href="http://en.wikipedia.org/w/index.php?title=Template:Data_structures&amp;action=edit"><span title="Edit this template" style=";;background:none transparent;border:none;;">e</span></a></li>
</ul>
</div>
<div style="font-size:110%;"><a href="Data_structure.html" title="Data structure">Data structures</a></div>
</th>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group">Types</th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Collection_(abstract_data_type).html" title="Collection (abstract data type)">Collection</a></li>
<li><a href="Container_(abstract_data_type).html" title="Container (abstract data type)">Container</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Abstract_data_type.html" title="Abstract data type">Abstract</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Associative_array.html" title="Associative array">Associative array</a></li>
<li><a href="Double-ended_priority_queue.html" title="Double-ended priority queue">Double-ended priority queue</a></li>
<li><a href="Double-ended_queue.html" title="Double-ended queue">Double-ended queue</a></li>
<li><a href="http://en.wikipedia.org/wiki/List_(abstract_data_type)" title="List (abstract data type)">List</a></li>
<li><a href="Multimap.html" title="Multimap">Multimap</a></li>
<li><a href="Priority_queue.html" title="Priority queue">Priority queue</a></li>
<li><a href="Queue_(abstract_data_type).html" title="Queue (abstract data type)">Queue</a></li>
<li><a href="Set_(abstract_data_type).html" title="Set (abstract data type)">Set</a>
<ul>
<li><a href="Set_(abstract_data_type).html#Multiset" title="Set (abstract data type)">multiset</a></li>
</ul>
</li>
<li><a href="Disjoint-set_data_structure.html" title="Disjoint-set data structure">Disjoint Sets</a></li>
<li><a href="Stack_(abstract_data_type).html" title="Stack (abstract data type)">Stack</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Array_data_structure.html" title="Array data structure">Arrays</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Bit_array.html" title="Bit array">Bit array</a></li>
<li><a href="Circular_buffer.html" title="Circular buffer">Circular buffer</a></li>
<li><a href="Dynamic_array.html" title="Dynamic array">Dynamic array</a></li>
<li><a href="Hash_table.html" title="Hash table">Hash table</a></li>
<li><a href="Hashed_array_tree.html" title="Hashed array tree">Hashed array tree</a></li>
<li><a href="Sparse_array.html" title="Sparse array">Sparse array</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Linked_data_structure.html" title="Linked data structure">Linked</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Association_list.html" title="Association list">Association list</a></li>
<li><a href="Linked_list.html" title="Linked list">Linked list</a></li>
<li><a href="Skip_list.html" title="Skip list">Skip list</a></li>
<li><a href="Unrolled_linked_list.html" title="Unrolled linked list">Unrolled linked list</a></li>
<li><a href="XOR_linked_list.html" title="XOR linked list">XOR linked list</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Tree_(data_structure).html" title="Tree (data structure)">Trees</a></th>
<td class="navbox-list navbox-odd" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="B-tree.html" title="B-tree">B-tree</a></li>
<li><a href="Binary_search_tree.html" title="Binary search tree">Binary search tree</a>
<ul>
<li><a href="AA_tree.html" title="AA tree">AA</a></li>
<li><a href="AVL_tree.html" title="AVL tree">AVL</a></li>
<li><a href="Red%e2%80%93black_tree.html" title="Red–black tree">red-black</a></li>
<li><a href="Self-balancing_binary_search_tree.html" title="Self-balancing binary search tree">self-balancing</a></li>
<li><strong class="selflink">splay</strong></li>
</ul>
</li>
<li><a href="Heap_(data_structure).html" title="Heap (data structure)">Heap</a>
<ul>
<li><a href="Binary_heap.html" title="Binary heap">binary</a></li>
<li><a href="Binomial_heap.html" title="Binomial heap">binomial</a></li>
<li><a href="Fibonacci_heap.html" title="Fibonacci heap">Fibonacci</a></li>
</ul>
</li>
<li><a href="R-tree.html" title="R-tree">R-tree</a>
<ul>
<li><a href="R__tree.html" title="R* tree">R*</a></li>
<li><a href="R%2b_tree.html" title="R+ tree">R+</a></li>
<li><a href="Hilbert_R-tree.html" title="Hilbert R-tree">Hilbert</a></li>
</ul>
</li>
<li><a href="Trie.html" title="Trie">Trie</a>
<ul>
<li><a href="Hash_tree_(persistent_data_structure).html" title="Hash tree (persistent data structure)">Hash tree</a></li>
</ul>
</li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<th scope="row" class="navbox-group"><a href="Graph_(abstract_data_type).html" title="Graph (abstract data type)">Graphs</a></th>
<td class="navbox-list navbox-even" style="text-align:left;border-left-width:2px;border-left-style:solid;width:100%;padding:0px;">
<div style="padding:0em 0.25em;">
<ul>
<li><a href="Binary_decision_diagram.html" title="Binary decision diagram">Binary decision diagram</a></li>
<li><a href="Directed_acyclic_word_graph.html" title="Directed acyclic word graph">Directed acyclic word graph</a></li>
</ul>
</div>
</td>
</tr>
<tr style="height:2px;">
<td colspan="2"></td>
</tr>
<tr>
<td class="navbox-abovebelow" colspan="2">
<div>
<ul>
<li><a href="http://en.wikipedia.org/wiki/List_of_data_structures" title="List of data structures">List of data structures</a></li>
</ul>
</div>
</td>
</tr>
</table>
</td>
</tr>
</table>


<!-- 
NewPP limit report
Parsed by mw1013
CPU time usage: 1.104 seconds
Real time usage: 1.225 seconds
Preprocessor visited node count: 1934/1000000
Preprocessor generated node count: 6895/1500000
Post‐expand include size: 57741/2048000 bytes
Template argument size: 1972/2048000 bytes
Highest expansion depth: 14/40
Expensive parser function count: 7/500
Lua time usage: 0.129/10.000 seconds
Lua memory usage: 2.24 MB/50 MB
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:28382-0!*!0!!en!4!*!math=0 and timestamp 20140325075657
 -->
<noscript><img src="http://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" /></noscript></div>								<div class="printfooter">
				Retrieved from "<a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;oldid=599713773">http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;oldid=599713773</a>"				</div>
												<div id='catlinks' class='catlinks'><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="http://en.wikipedia.org/wiki/Help:Category" title="Help:Category">Categories</a>: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Binary_trees" title="Category:Binary trees">Binary trees</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="http://en.wikipedia.org/wiki/Category:Pages_containing_cite_templates_with_deprecated_parameters" title="Category:Pages containing cite templates with deprecated parameters">Pages containing cite templates with deprecated parameters</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Use_dmy_dates_from_July_2012" title="Category:Use dmy dates from July 2012">Use dmy dates from July 2012</a></li><li><a href="http://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements" title="Category:All articles with unsourced statements">All articles with unsourced statements</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_January_2010" title="Category:Articles with unsourced statements from January 2010">Articles with unsourced statements from January 2010</a></li><li><a href="http://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_March_2014" title="Category:Articles with unsourced statements from March 2014">Articles with unsourced statements from March 2014</a></li></ul></div></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-createaccount"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Splay+tree&amp;type=signup">Create account</a></li><li id="pt-login"><a href="http://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Splay+tree" title="You're encouraged to log in; however, it's not mandatory. [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="Splay_tree.html"  title="View the content page [c]" accesskey="c">Article</a></span></li>
					<li  id="ca-talk"><span><a href="http://en.wikipedia.org/wiki/Talk:Splay_tree"  title="Discussion about the content page [t]" accesskey="t">Talk</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="Splay_tree.html" >Read</a></span></li>
					<li id="ca-edit"><span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=edit"  title="You can edit this page. &#10;Please review your changes before saving. [e]" accesskey="e">Edit</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=history"  title="Past versions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="http://en.wikipedia.org/w/index.php" id="searchform">
					<div id="simpleSearch">
					<input type="search" name="search" placeholder="Search" title="Search Wikipedia [f]" accesskey="f" id="searchInput" /><input type="hidden" value="Special:Search" name="title" /><input type="submit" name="fulltext" value="Search" title="Search Wikipedia for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton" /><input type="submit" name="go" value="Go" title="Go to a page with this exact name if one exists" id="searchButton" class="searchButton" />		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(http://upload.wikimedia.org/wikipedia/en/b/bc/Wiki.png);" href="Main_Page.html"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="Main_Page.html" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-contents"><a href="http://en.wikipedia.org/wiki/Portal:Contents" title="Guides to browsing Wikipedia">Contents</a></li>
			<li id="n-featuredcontent"><a href="http://en.wikipedia.org/wiki/Portal:Featured_content" title="Featured content – the best of Wikipedia">Featured content</a></li>
			<li id="n-currentevents"><a href="http://en.wikipedia.org/wiki/Portal:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-randompage"><a href="http://en.wikipedia.org/wiki/Special:Random" title="Load a random article [x]" accesskey="x">Random article</a></li>
			<li id="n-sitesupport"><a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en" title="Support us">Donate to Wikipedia</a></li>
			<li id="n-shoplink"><a href="http://shop.wikimedia.org/" title="Visit the Wikimedia Shop">Wikimedia Shop</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-interaction' aria-labelledby='p-interaction-label'>
	<h3 id='p-interaction-label'>Interaction</h3>
	<div class="body">
		<ul>
			<li id="n-help"><a href="http://en.wikipedia.org/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia">Help</a></li>
			<li id="n-aboutsite"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Find out about Wikipedia">About Wikipedia</a></li>
			<li id="n-portal"><a href="http://en.wikipedia.org/wiki/Wikipedia:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-recentchanges"><a href="http://en.wikipedia.org/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-contactpage"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact page</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="http://en.wikipedia.org/wiki/Special:WhatLinksHere/Splay_tree" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="http://en.wikipedia.org/wiki/Special:RecentChangesLinked/Splay_tree" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-upload"><a href="http://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u">Upload file</a></li>
			<li id="t-specialpages"><a href="http://en.wikipedia.org/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-permalink"><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;oldid=599713773" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;action=info">Page information</a></li>
			<li id="t-wikibase"><a href="http://www.wikidata.org/wiki/Q80729" title="Link to connected data repository item [g]" accesskey="g">Data item</a></li>
<li id="t-cite"><a href="http://en.wikipedia.org/w/index.php?title=Special:Cite&amp;page=Splay_tree&amp;id=599713773" title="Information on how to cite this page">Cite this page</a></li>		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-coll-print_export' aria-labelledby='p-coll-print_export-label'>
	<h3 id='p-coll-print_export-label'>Print/export</h3>
	<div class="body">
		<ul>
			<li id="coll-create_a_book"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Splay+tree">Create a book</a></li>
			<li id="coll-download-as-rl"><a href="http://en.wikipedia.org/w/index.php?title=Special:Book&amp;bookcmd=render_article&amp;arttitle=Splay+tree&amp;oldid=599713773&amp;writer=rl">Download as PDF</a></li>
			<li id="t-print"><a href="http://en.wikipedia.org/w/index.php?title=Splay_tree&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-lang' aria-labelledby='p-lang-label'>
	<h3 id='p-lang-label'>Languages</h3>
	<div class="body">
		<ul>
			<li class="interlanguage-link interwiki-cs"><a href="http://cs.wikipedia.org/wiki/Splay_strom" title="Splay strom – Czech" lang="cs" hreflang="cs">Čeština</a></li>
			<li class="interlanguage-link interwiki-de"><a href="http://de.wikipedia.org/wiki/Splay-Baum" title="Splay-Baum – German" lang="de" hreflang="de">Deutsch</a></li>
			<li class="interlanguage-link interwiki-es"><a href="http://es.wikipedia.org/wiki/Árbol_biselado" title="Árbol biselado – Spanish" lang="es" hreflang="es">Español</a></li>
			<li class="interlanguage-link interwiki-fa"><a href="http://fa.wikipedia.org/wiki/درخت_اسپلی" title="درخت اسپلی – Persian" lang="fa" hreflang="fa">فارسی</a></li>
			<li class="interlanguage-link interwiki-fr"><a href="http://fr.wikipedia.org/wiki/Arbre_splay" title="Arbre splay – French" lang="fr" hreflang="fr">Français</a></li>
			<li class="interlanguage-link interwiki-it"><a href="http://it.wikipedia.org/wiki/Albero_splay" title="Albero splay – Italian" lang="it" hreflang="it">Italiano</a></li>
			<li class="interlanguage-link interwiki-he"><a href="http://he.wikipedia.org/wiki/עץ_Splay" title="עץ Splay – Hebrew" lang="he" hreflang="he">עברית</a></li>
			<li class="interlanguage-link interwiki-nl"><a href="http://nl.wikipedia.org/wiki/Splayboom" title="Splayboom – Dutch" lang="nl" hreflang="nl">Nederlands</a></li>
			<li class="interlanguage-link interwiki-ja"><a href="http://ja.wikipedia.org/wiki/スプレー木" title="スプレー木 – Japanese" lang="ja" hreflang="ja">日本語</a></li>
			<li class="interlanguage-link interwiki-pl"><a href="http://pl.wikipedia.org/wiki/Drzewo_splay" title="Drzewo splay – Polish" lang="pl" hreflang="pl">Polski</a></li>
			<li class="interlanguage-link interwiki-ru"><a href="http://ru.wikipedia.org/wiki/Расширяющееся_дерево" title="Расширяющееся дерево – Russian" lang="ru" hreflang="ru">Русский</a></li>
			<li class="interlanguage-link interwiki-fi"><a href="http://fi.wikipedia.org/wiki/Splay-puu" title="Splay-puu – Finnish" lang="fi" hreflang="fi">Suomi</a></li>
			<li class="interlanguage-link interwiki-th"><a href="http://th.wikipedia.org/wiki/ต้นไม้สเปลย์" title="ต้นไม้สเปลย์ – Thai" lang="th" hreflang="th">ไทย</a></li>
			<li class="interlanguage-link interwiki-uk"><a href="http://uk.wikipedia.org/wiki/Розширюване_дерево" title="Розширюване дерево – Ukrainian" lang="uk" hreflang="uk">Українська</a></li>
			<li class="interlanguage-link interwiki-vi"><a href="http://vi.wikipedia.org/wiki/Cây_splay" title="Cây splay – Vietnamese" lang="vi" hreflang="vi">Tiếng Việt</a></li>
			<li class="interlanguage-link interwiki-zh"><a href="http://zh.wikipedia.org/wiki/伸展树" title="伸展树 – Chinese" lang="zh" hreflang="zh">中文</a></li>
			<li class="uls-p-lang-dummy"><a href="#"></a></li>
			<li class="wbc-editpage"><a href="http://www.wikidata.org/wiki/Q80729#sitelinks-wikipedia" title="Edit interlanguage links">Edit links</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 15 March 2014 at 12:20.<br /></li>
											<li id="footer-info-copyright">Text is available under the <a rel="license" href="http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="http://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="http://wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="http://wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a> <br/>
Wikipedia® is a registered trademark of the <a href="http://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="http://wikimediafoundation.org/wiki/Privacy_policy" title="wikimedia:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="http://en.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
											<li id="footer-places-disclaimer"><a href="http://en.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
											<li id="footer-places-contact"><a href="http://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
											<li id="footer-places-developers"><a class="external" href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
											<li id="footer-places-mobileview"><a href="http://en.m.wikipedia.org/wiki/Splay_tree" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-copyrightico">
						<a href="http://wikimediafoundation.org/"><img src="http://bits.wikimedia.org/images/wikimedia-button.png" width="88" height="31" alt="Wikimedia Foundation"/></a>
					</li>
					<li id="footer-poweredbyico">
						<a href="http://www.mediawiki.org/"><img src="http://bits.wikimedia.org/static-1.23wmf19/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["ext.cite","mobile.desktop","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.gadget.teahouse","ext.gadget.ReferenceTooltips","ext.gadget.DRN-wizard","ext.gadget.charinsert","mw.MwEmbedSupport.style","ext.navigationTiming","schema.UniversalLanguageSelector","ext.uls.eventlogger","ext.uls.interlanguage","skins.vector.collapsibleNav"],null,true);
}</script>
<script src="http://bits.wikimedia.org/en.wikipedia.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script>
<!-- Served by mw1051 in 0.496 secs. -->
	</body>

<!-- Mirrored from en.wikipedia.org/wiki/Splay_tree by HTTrack Website Copier/3.x [XR&CO'2013], Sun, 30 Mar 2014 00:02:12 GMT -->
</html>
